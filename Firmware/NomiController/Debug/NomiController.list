
NomiController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08006c48  08006c48  00007c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e68  08006e68  00008020  2**0
                  CONTENTS
  4 .ARM          00000000  08006e68  08006e68  00008020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e68  08006e68  00008020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e68  08006e68  00007e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e6c  08006e6c  00007e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08006e70  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e2c  20000020  08006e90  00008020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e4c  08006e90  00008e4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010831  00000000  00000000  00008050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f1  00000000  00000000  00018881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  0001ad78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd8  00000000  00000000  0001bc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb1d  00000000  00000000  0001c870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001493b  00000000  00000000  0003938d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8add  00000000  00000000  0004dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f67a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004328  00000000  00000000  000f67e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000fab10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006c30 	.word	0x08006c30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08006c30 	.word	0x08006c30

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <Set_LED_struct>:

	uint8_t LED_Data[MAX_LED][4];
	uint8_t LED_Mod[MAX_LED][4];  // for brightness

	void Set_LED_struct(int LEDnum, COLOUR colour)
	{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
		Set_LED(LEDnum, colour.r, colour.g, colour.b);
 8000bae:	f997 1000 	ldrsb.w	r1, [r7]
 8000bb2:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8000bb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f000 f804 	bl	8000bc8 <Set_LED>
	}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <Set_LED>:

	void Set_LED (int LEDnum, int8_t Red, int8_t Green, int8_t Blue)
		{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	70fb      	strb	r3, [r7, #3]
 8000bda:	460b      	mov	r3, r1
 8000bdc:	70bb      	strb	r3, [r7, #2]
 8000bde:	4613      	mov	r3, r2
 8000be0:	707b      	strb	r3, [r7, #1]
			LED_Data[LEDnum][0] = LEDnum;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	b2d9      	uxtb	r1, r3
 8000be6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c24 <Set_LED+0x5c>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
			LED_Data[LEDnum][1] = Green;
 8000bee:	78b9      	ldrb	r1, [r7, #2]
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c24 <Set_LED+0x5c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	705a      	strb	r2, [r3, #1]
			LED_Data[LEDnum][2] = Red;
 8000bfc:	78f9      	ldrb	r1, [r7, #3]
 8000bfe:	4a09      	ldr	r2, [pc, #36]	@ (8000c24 <Set_LED+0x5c>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	460a      	mov	r2, r1
 8000c08:	709a      	strb	r2, [r3, #2]
			LED_Data[LEDnum][3] = Blue;
 8000c0a:	7879      	ldrb	r1, [r7, #1]
 8000c0c:	4a05      	ldr	r2, [pc, #20]	@ (8000c24 <Set_LED+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	460a      	mov	r2, r1
 8000c16:	70da      	strb	r2, [r3, #3]
		}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	200027f4 	.word	0x200027f4

08000c28 <Set_Brightness>:

		#define PI 3.14159265

		void Set_Brightness (int8_t brightness)  // 0-45
		{
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
		#if USE_BRIGHTNESS

			if (brightness > 45) brightness = 45;
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b2d      	cmp	r3, #45	@ 0x2d
 8000c38:	dd01      	ble.n	8000c3e <Set_Brightness+0x16>
 8000c3a:	232d      	movs	r3, #45	@ 0x2d
 8000c3c:	71fb      	strb	r3, [r7, #7]
			for (int i=0; i<MAX_LED; i++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e061      	b.n	8000d08 <Set_Brightness+0xe0>
			{
				LED_Mod[i][0] = LED_Data[i][0];
 8000c44:	4a36      	ldr	r2, [pc, #216]	@ (8000d20 <Set_Brightness+0xf8>)
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000c4c:	4a35      	ldr	r2, [pc, #212]	@ (8000d24 <Set_Brightness+0xfc>)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
				for (int j=1; j<4; j++)
 8000c54:	2301      	movs	r3, #1
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	e050      	b.n	8000cfc <Set_Brightness+0xd4>
				{
					float angle = 90-brightness;  // in degrees
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8000c62:	ee07 3a90 	vmov	s15, r3
 8000c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c6a:	edc7 7a03 	vstr	s15, [r7, #12]
					angle = angle*PI / 180;  // in rad
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff fc0e 	bl	8000490 <__aeabi_f2d>
 8000c74:	a328      	add	r3, pc, #160	@ (adr r3, 8000d18 <Set_Brightness+0xf0>)
 8000c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7a:	f7ff fc61 	bl	8000540 <__aeabi_dmul>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	4610      	mov	r0, r2
 8000c84:	4619      	mov	r1, r3
 8000c86:	f04f 0200 	mov.w	r2, #0
 8000c8a:	4b27      	ldr	r3, [pc, #156]	@ (8000d28 <Set_Brightness+0x100>)
 8000c8c:	f7ff fd82 	bl	8000794 <__aeabi_ddiv>
 8000c90:	4602      	mov	r2, r0
 8000c92:	460b      	mov	r3, r1
 8000c94:	4610      	mov	r0, r2
 8000c96:	4619      	mov	r1, r3
 8000c98:	f7ff ff34 	bl	8000b04 <__aeabi_d2f>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60fb      	str	r3, [r7, #12]
					LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8000ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8000d20 <Set_Brightness+0xf8>)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	441a      	add	r2, r3
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4413      	add	r3, r2
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fbdc 	bl	800046c <__aeabi_i2d>
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	f7ff fbe9 	bl	8000490 <__aeabi_f2d>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	ec43 2b10 	vmov	d0, r2, r3
 8000cc6:	f004 ff23 	bl	8005b10 <tan>
 8000cca:	ec53 2b10 	vmov	r2, r3, d0
 8000cce:	4620      	mov	r0, r4
 8000cd0:	4629      	mov	r1, r5
 8000cd2:	f7ff fd5f 	bl	8000794 <__aeabi_ddiv>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	460b      	mov	r3, r1
 8000cda:	4610      	mov	r0, r2
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f7ff fef1 	bl	8000ac4 <__aeabi_d2uiz>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	b2d9      	uxtb	r1, r3
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d24 <Set_Brightness+0xfc>)
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	441a      	add	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	460a      	mov	r2, r1
 8000cf4:	701a      	strb	r2, [r3, #0]
				for (int j=1; j<4; j++)
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	ddab      	ble.n	8000c5a <Set_Brightness+0x32>
			for (int i=0; i<MAX_LED; i++)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8000d0c:	dd9a      	ble.n	8000c44 <Set_Brightness+0x1c>
				}
			}

		#endif

		}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bdb0      	pop	{r4, r5, r7, pc}
 8000d18:	53c8d4f1 	.word	0x53c8d4f1
 8000d1c:	400921fb 	.word	0x400921fb
 8000d20:	200027f4 	.word	0x200027f4
 8000d24:	20002b14 	.word	0x20002b14
 8000d28:	40668000 	.word	0x40668000

08000d2c <WS2812_Send>:

		void WS2812_Send (void)
		{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
			uint32_t indx=0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
			uint32_t color;


			for (int i= 0; i<MAX_LED; i++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	e036      	b.n	8000daa <WS2812_Send+0x7e>
			{
		#if USE_BRIGHTNESS
				color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8000d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8000df8 <WS2812_Send+0xcc>)
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	785b      	ldrb	r3, [r3, #1]
 8000d46:	041a      	lsls	r2, r3, #16
 8000d48:	492b      	ldr	r1, [pc, #172]	@ (8000df8 <WS2812_Send+0xcc>)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	440b      	add	r3, r1
 8000d50:	789b      	ldrb	r3, [r3, #2]
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	431a      	orrs	r2, r3
 8000d56:	4928      	ldr	r1, [pc, #160]	@ (8000df8 <WS2812_Send+0xcc>)
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	78db      	ldrb	r3, [r3, #3]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	607b      	str	r3, [r7, #4]
		#else
				color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
		#endif

				for (int i=23; i>=0; i--)
 8000d64:	2317      	movs	r3, #23
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	e019      	b.n	8000d9e <WS2812_Send+0x72>
				{
					if (color&(1<<i))
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4013      	ands	r3, r2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d005      	beq.n	8000d88 <WS2812_Send+0x5c>
					{
						pwmData[indx] = 60;  // 2/3 of 90
 8000d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8000dfc <WS2812_Send+0xd0>)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	213c      	movs	r1, #60	@ 0x3c
 8000d82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d86:	e004      	b.n	8000d92 <WS2812_Send+0x66>
					}

					else pwmData[indx] = 30;  // 1/3 of 90
 8000d88:	4a1c      	ldr	r2, [pc, #112]	@ (8000dfc <WS2812_Send+0xd0>)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	211e      	movs	r1, #30
 8000d8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

					indx++;
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
				for (int i=23; i>=0; i--)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	dae2      	bge.n	8000d6a <WS2812_Send+0x3e>
			for (int i= 0; i<MAX_LED; i++)
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	3301      	adds	r3, #1
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	2bc7      	cmp	r3, #199	@ 0xc7
 8000dae:	ddc5      	ble.n	8000d3c <WS2812_Send+0x10>
				}

			}

			for (int i=0; i<50; i++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	e00a      	b.n	8000dcc <WS2812_Send+0xa0>
			{
				pwmData[indx] = 0;
 8000db6:	4a11      	ldr	r2, [pc, #68]	@ (8000dfc <WS2812_Send+0xd0>)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	2100      	movs	r1, #0
 8000dbc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				indx++;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
			for (int i=0; i<50; i++)
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	2b31      	cmp	r3, #49	@ 0x31
 8000dd0:	ddf1      	ble.n	8000db6 <WS2812_Send+0x8a>
			}

			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	4a09      	ldr	r2, [pc, #36]	@ (8000dfc <WS2812_Send+0xd0>)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4809      	ldr	r0, [pc, #36]	@ (8000e00 <WS2812_Send+0xd4>)
 8000ddc:	f002 ffaa 	bl	8003d34 <HAL_TIM_PWM_Start_DMA>
			while (!datasentflag){};
 8000de0:	bf00      	nop
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <WS2812_Send+0xd8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0fb      	beq.n	8000de2 <WS2812_Send+0xb6>
			datasentflag = 0;
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <WS2812_Send+0xd8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
		}
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20002b14 	.word	0x20002b14
 8000dfc:	2000020c 	.word	0x2000020c
 8000e00:	200000a0 	.word	0x200000a0
 8000e04:	200027f0 	.word	0x200027f0

08000e08 <HAL_TIM_PWM_PulseFinishedCallback>:

		void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
		{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000e10:	2100      	movs	r1, #0
 8000e12:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000e14:	f003 f98c 	bl	8004130 <HAL_TIM_PWM_Stop_DMA>
			datasentflag=1;
 8000e18:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]
		}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000a0 	.word	0x200000a0
 8000e2c:	200027f0 	.word	0x200027f0

08000e30 <Shift>:

		void Shift(void)
		{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
			COLOUR help;
			if(state == 6)
 8000e36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <Shift+0x74>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d102      	bne.n	8000e44 <Shift+0x14>
				state = 0;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <Shift+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]

			help = rainbow[0];
 8000e44:	4a18      	ldr	r2, [pc, #96]	@ (8000ea8 <Shift+0x78>)
 8000e46:	463b      	mov	r3, r7
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	8019      	strh	r1, [r3, #0]
 8000e4e:	3302      	adds	r3, #2
 8000e50:	0c12      	lsrs	r2, r2, #16
 8000e52:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<5; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	e014      	b.n	8000e84 <Shift+0x54>
			{
				rainbow[i] = rainbow[i+1];
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	4812      	ldr	r0, [pc, #72]	@ (8000ea8 <Shift+0x78>)
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	460b      	mov	r3, r1
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	440b      	add	r3, r1
 8000e68:	4418      	add	r0, r3
 8000e6a:	490f      	ldr	r1, [pc, #60]	@ (8000ea8 <Shift+0x78>)
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	18ca      	adds	r2, r1, r3
 8000e74:	4603      	mov	r3, r0
 8000e76:	8811      	ldrh	r1, [r2, #0]
 8000e78:	7892      	ldrb	r2, [r2, #2]
 8000e7a:	8019      	strh	r1, [r3, #0]
 8000e7c:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i<5; i++)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3301      	adds	r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	dde7      	ble.n	8000e5a <Shift+0x2a>
			}
			rainbow[5] = help;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <Shift+0x78>)
 8000e8c:	330f      	adds	r3, #15
 8000e8e:	463a      	mov	r2, r7
 8000e90:	8811      	ldrh	r1, [r2, #0]
 8000e92:	7892      	ldrb	r2, [r2, #2]
 8000e94:	8019      	strh	r1, [r3, #0]
 8000e96:	709a      	strb	r2, [r3, #2]

		}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	20000208 	.word	0x20000208
 8000ea8:	200001b8 	.word	0x200001b8

08000eac <shiftActive>:

		void shiftActive(void)
		{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
			Shift();
 8000eb2:	f7ff ffbd 	bl	8000e30 <Shift>
			for(int i = 0; i<MAX_LED/10; i++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	e019      	b.n	8000ef0 <shiftActive+0x44>
			{
				activeRainbow[i] = rainbow[((i)<6)?i:(i)-6];
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b05      	cmp	r3, #5
 8000ec0:	dd02      	ble.n	8000ec8 <shiftActive+0x1c>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	1f9a      	subs	r2, r3, #6
 8000ec6:	e000      	b.n	8000eca <shiftActive+0x1e>
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <shiftActive+0x54>)
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	440b      	add	r3, r1
 8000ed4:	4418      	add	r0, r3
 8000ed6:	490b      	ldr	r1, [pc, #44]	@ (8000f04 <shiftActive+0x58>)
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	18ca      	adds	r2, r1, r3
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	8811      	ldrh	r1, [r2, #0]
 8000ee4:	7892      	ldrb	r2, [r2, #2]
 8000ee6:	8019      	strh	r1, [r3, #0]
 8000ee8:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i<MAX_LED/10; i++)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3301      	adds	r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b13      	cmp	r3, #19
 8000ef4:	dde2      	ble.n	8000ebc <shiftActive+0x10>
			}
		}
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200001cc 	.word	0x200001cc
 8000f04:	200001b8 	.word	0x200001b8

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0e:	f000 fcad 	bl	800186c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f12:	f000 f8f9 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f16:	f000 fa8b 	bl	8001430 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f1a:	f000 fa6b 	bl	80013f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f1e:	f000 fa39 	bl	8001394 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f22:	f000 f98b 	bl	800123c <MX_TIM1_Init>
  MX_SPI3_Init();
 8000f26:	f000 f94b 	bl	80011c0 <MX_SPI3_Init>
  MX_FATFS_Init();
 8000f2a:	f004 fcff 	bl	800592c <MX_FATFS_Init>

  	  Set_LED(4, 156, 233, 100);
  	  Set_LED(5, 102, 0, 235);
  	  Set_LED(6, 47, 38, 77);
*/
  rainbow[0] = (COLOUR) {255, 0, 0};
 8000f2e:	4b70      	ldr	r3, [pc, #448]	@ (80010f0 <main+0x1e8>)
 8000f30:	22ff      	movs	r2, #255	@ 0xff
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	4b6e      	ldr	r3, [pc, #440]	@ (80010f0 <main+0x1e8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	705a      	strb	r2, [r3, #1]
 8000f3a:	4b6d      	ldr	r3, [pc, #436]	@ (80010f0 <main+0x1e8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	709a      	strb	r2, [r3, #2]
  rainbow[1] = (COLOUR) {255, 140, 0};
 8000f40:	4b6b      	ldr	r3, [pc, #428]	@ (80010f0 <main+0x1e8>)
 8000f42:	4a6c      	ldr	r2, [pc, #432]	@ (80010f4 <main+0x1ec>)
 8000f44:	3303      	adds	r3, #3
 8000f46:	8811      	ldrh	r1, [r2, #0]
 8000f48:	7892      	ldrb	r2, [r2, #2]
 8000f4a:	8019      	strh	r1, [r3, #0]
 8000f4c:	709a      	strb	r2, [r3, #2]
  rainbow[2] = (COLOUR) {255, 255, 0};
 8000f4e:	4b68      	ldr	r3, [pc, #416]	@ (80010f0 <main+0x1e8>)
 8000f50:	4a69      	ldr	r2, [pc, #420]	@ (80010f8 <main+0x1f0>)
 8000f52:	3306      	adds	r3, #6
 8000f54:	8811      	ldrh	r1, [r2, #0]
 8000f56:	7892      	ldrb	r2, [r2, #2]
 8000f58:	8019      	strh	r1, [r3, #0]
 8000f5a:	709a      	strb	r2, [r3, #2]
  rainbow[3] = (COLOUR) {0, 255, 0};
 8000f5c:	4b64      	ldr	r3, [pc, #400]	@ (80010f0 <main+0x1e8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	725a      	strb	r2, [r3, #9]
 8000f62:	4b63      	ldr	r3, [pc, #396]	@ (80010f0 <main+0x1e8>)
 8000f64:	22ff      	movs	r2, #255	@ 0xff
 8000f66:	729a      	strb	r2, [r3, #10]
 8000f68:	4b61      	ldr	r3, [pc, #388]	@ (80010f0 <main+0x1e8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	72da      	strb	r2, [r3, #11]
  rainbow[4] = (COLOUR) {0, 0, 255};
 8000f6e:	4b60      	ldr	r3, [pc, #384]	@ (80010f0 <main+0x1e8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	731a      	strb	r2, [r3, #12]
 8000f74:	4b5e      	ldr	r3, [pc, #376]	@ (80010f0 <main+0x1e8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	735a      	strb	r2, [r3, #13]
 8000f7a:	4b5d      	ldr	r3, [pc, #372]	@ (80010f0 <main+0x1e8>)
 8000f7c:	22ff      	movs	r2, #255	@ 0xff
 8000f7e:	739a      	strb	r2, [r3, #14]
  rainbow[5] = (COLOUR) {170, 0, 255};
 8000f80:	4b5b      	ldr	r3, [pc, #364]	@ (80010f0 <main+0x1e8>)
 8000f82:	4a5e      	ldr	r2, [pc, #376]	@ (80010fc <main+0x1f4>)
 8000f84:	330f      	adds	r3, #15
 8000f86:	8811      	ldrh	r1, [r2, #0]
 8000f88:	7892      	ldrb	r2, [r2, #2]
 8000f8a:	8019      	strh	r1, [r3, #0]
 8000f8c:	709a      	strb	r2, [r3, #2]
		  WS2812_Send();
		  HAL_Delay (500);
	  }
	  */

	  for (int i = 0; i<MAX_LED; i++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	e098      	b.n	80010c6 <main+0x1be>
	    {
	  	  if(i<10)
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	2b09      	cmp	r3, #9
 8000f98:	dc05      	bgt.n	8000fa6 <main+0x9e>
	  		  Set_LED_struct(i, activeRainbow[0]);
 8000f9a:	4b59      	ldr	r3, [pc, #356]	@ (8001100 <main+0x1f8>)
 8000f9c:	6819      	ldr	r1, [r3, #0]
 8000f9e:	69f8      	ldr	r0, [r7, #28]
 8000fa0:	f7ff fe00 	bl	8000ba4 <Set_LED_struct>
 8000fa4:	e08c      	b.n	80010c0 <main+0x1b8>
	  	  else if(i<20)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	2b13      	cmp	r3, #19
 8000faa:	dc0f      	bgt.n	8000fcc <main+0xc4>
	  		  Set_LED_struct(i, activeRainbow[1]);
 8000fac:	4b54      	ldr	r3, [pc, #336]	@ (8001100 <main+0x1f8>)
 8000fae:	78da      	ldrb	r2, [r3, #3]
 8000fb0:	7919      	ldrb	r1, [r3, #4]
 8000fb2:	0209      	lsls	r1, r1, #8
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	795b      	ldrb	r3, [r3, #5]
 8000fb8:	041b      	lsls	r3, r3, #16
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f362 0317 	bfi	r3, r2, #0, #24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	69f8      	ldr	r0, [r7, #28]
 8000fc6:	f7ff fded 	bl	8000ba4 <Set_LED_struct>
 8000fca:	e079      	b.n	80010c0 <main+0x1b8>
	  	  else if(i<30)
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	2b1d      	cmp	r3, #29
 8000fd0:	dc0c      	bgt.n	8000fec <main+0xe4>
	  		  Set_LED_struct(i, activeRainbow[2]);
 8000fd2:	4b4b      	ldr	r3, [pc, #300]	@ (8001100 <main+0x1f8>)
 8000fd4:	88da      	ldrh	r2, [r3, #6]
 8000fd6:	7a1b      	ldrb	r3, [r3, #8]
 8000fd8:	041b      	lsls	r3, r3, #16
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f362 0317 	bfi	r3, r2, #0, #24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	69f8      	ldr	r0, [r7, #28]
 8000fe6:	f7ff fddd 	bl	8000ba4 <Set_LED_struct>
 8000fea:	e069      	b.n	80010c0 <main+0x1b8>
	  	  else if(i<40)
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	2b27      	cmp	r3, #39	@ 0x27
 8000ff0:	dc0f      	bgt.n	8001012 <main+0x10a>
	  		  Set_LED_struct(i, activeRainbow[3]);
 8000ff2:	4b43      	ldr	r3, [pc, #268]	@ (8001100 <main+0x1f8>)
 8000ff4:	7a5a      	ldrb	r2, [r3, #9]
 8000ff6:	7a99      	ldrb	r1, [r3, #10]
 8000ff8:	0209      	lsls	r1, r1, #8
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	7adb      	ldrb	r3, [r3, #11]
 8000ffe:	041b      	lsls	r3, r3, #16
 8001000:	431a      	orrs	r2, r3
 8001002:	2300      	movs	r3, #0
 8001004:	f362 0317 	bfi	r3, r2, #0, #24
 8001008:	4619      	mov	r1, r3
 800100a:	69f8      	ldr	r0, [r7, #28]
 800100c:	f7ff fdca 	bl	8000ba4 <Set_LED_struct>
 8001010:	e056      	b.n	80010c0 <main+0x1b8>
	  	  else if(i<50)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	2b31      	cmp	r3, #49	@ 0x31
 8001016:	dc05      	bgt.n	8001024 <main+0x11c>
	  		  Set_LED_struct(i, activeRainbow[4]);
 8001018:	4b39      	ldr	r3, [pc, #228]	@ (8001100 <main+0x1f8>)
 800101a:	68d9      	ldr	r1, [r3, #12]
 800101c:	69f8      	ldr	r0, [r7, #28]
 800101e:	f7ff fdc1 	bl	8000ba4 <Set_LED_struct>
 8001022:	e04d      	b.n	80010c0 <main+0x1b8>
	  	  else if(i<60)
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2b3b      	cmp	r3, #59	@ 0x3b
 8001028:	dc0f      	bgt.n	800104a <main+0x142>
	  		  Set_LED_struct(i, activeRainbow[5]);
 800102a:	4b35      	ldr	r3, [pc, #212]	@ (8001100 <main+0x1f8>)
 800102c:	7bda      	ldrb	r2, [r3, #15]
 800102e:	7c19      	ldrb	r1, [r3, #16]
 8001030:	0209      	lsls	r1, r1, #8
 8001032:	430a      	orrs	r2, r1
 8001034:	7c5b      	ldrb	r3, [r3, #17]
 8001036:	041b      	lsls	r3, r3, #16
 8001038:	431a      	orrs	r2, r3
 800103a:	2300      	movs	r3, #0
 800103c:	f362 0317 	bfi	r3, r2, #0, #24
 8001040:	4619      	mov	r1, r3
 8001042:	69f8      	ldr	r0, [r7, #28]
 8001044:	f7ff fdae 	bl	8000ba4 <Set_LED_struct>
 8001048:	e03a      	b.n	80010c0 <main+0x1b8>
	  	  else if(i<70)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	2b45      	cmp	r3, #69	@ 0x45
 800104e:	dc0c      	bgt.n	800106a <main+0x162>
	  		  Set_LED_struct(i, activeRainbow[6]);
 8001050:	4b2b      	ldr	r3, [pc, #172]	@ (8001100 <main+0x1f8>)
 8001052:	8a5a      	ldrh	r2, [r3, #18]
 8001054:	7d1b      	ldrb	r3, [r3, #20]
 8001056:	041b      	lsls	r3, r3, #16
 8001058:	431a      	orrs	r2, r3
 800105a:	2300      	movs	r3, #0
 800105c:	f362 0317 	bfi	r3, r2, #0, #24
 8001060:	4619      	mov	r1, r3
 8001062:	69f8      	ldr	r0, [r7, #28]
 8001064:	f7ff fd9e 	bl	8000ba4 <Set_LED_struct>
 8001068:	e02a      	b.n	80010c0 <main+0x1b8>
	  	  else if(i<80)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	2b4f      	cmp	r3, #79	@ 0x4f
 800106e:	dc0f      	bgt.n	8001090 <main+0x188>
	  		  Set_LED_struct(i, activeRainbow[7]);
 8001070:	4b23      	ldr	r3, [pc, #140]	@ (8001100 <main+0x1f8>)
 8001072:	7d5a      	ldrb	r2, [r3, #21]
 8001074:	7d99      	ldrb	r1, [r3, #22]
 8001076:	0209      	lsls	r1, r1, #8
 8001078:	430a      	orrs	r2, r1
 800107a:	7ddb      	ldrb	r3, [r3, #23]
 800107c:	041b      	lsls	r3, r3, #16
 800107e:	431a      	orrs	r2, r3
 8001080:	2300      	movs	r3, #0
 8001082:	f362 0317 	bfi	r3, r2, #0, #24
 8001086:	4619      	mov	r1, r3
 8001088:	69f8      	ldr	r0, [r7, #28]
 800108a:	f7ff fd8b 	bl	8000ba4 <Set_LED_struct>
 800108e:	e017      	b.n	80010c0 <main+0x1b8>
	  	  else if(i<90)
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	2b59      	cmp	r3, #89	@ 0x59
 8001094:	dc05      	bgt.n	80010a2 <main+0x19a>
	  		  Set_LED_struct(i, activeRainbow[8]);
 8001096:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <main+0x1f8>)
 8001098:	6999      	ldr	r1, [r3, #24]
 800109a:	69f8      	ldr	r0, [r7, #28]
 800109c:	f7ff fd82 	bl	8000ba4 <Set_LED_struct>
 80010a0:	e00e      	b.n	80010c0 <main+0x1b8>
	  	  else
	  		  Set_LED_struct(i, activeRainbow[9]);
 80010a2:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <main+0x1f8>)
 80010a4:	7eda      	ldrb	r2, [r3, #27]
 80010a6:	7f19      	ldrb	r1, [r3, #28]
 80010a8:	0209      	lsls	r1, r1, #8
 80010aa:	430a      	orrs	r2, r1
 80010ac:	7f5b      	ldrb	r3, [r3, #29]
 80010ae:	041b      	lsls	r3, r3, #16
 80010b0:	431a      	orrs	r2, r3
 80010b2:	2300      	movs	r3, #0
 80010b4:	f362 0317 	bfi	r3, r2, #0, #24
 80010b8:	4619      	mov	r1, r3
 80010ba:	69f8      	ldr	r0, [r7, #28]
 80010bc:	f7ff fd72 	bl	8000ba4 <Set_LED_struct>
	  for (int i = 0; i<MAX_LED; i++)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	3301      	adds	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80010ca:	f77f af63 	ble.w	8000f94 <main+0x8c>
	    }
	  Set_Brightness(5);
 80010ce:	2005      	movs	r0, #5
 80010d0:	f7ff fdaa 	bl	8000c28 <Set_Brightness>
	  		  WS2812_Send();
 80010d4:	f7ff fe2a 	bl	8000d2c <WS2812_Send>
	  		  HAL_Delay (100);
 80010d8:	2064      	movs	r0, #100	@ 0x64
 80010da:	f000 fc2d 	bl	8001938 <HAL_Delay>
	  		  state++;
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <main+0x1fc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <main+0x1fc>)
 80010e6:	6013      	str	r3, [r2, #0]
	  shiftActive();
 80010e8:	f7ff fee0 	bl	8000eac <shiftActive>
	  for (int i = 0; i<MAX_LED; i++)
 80010ec:	e74f      	b.n	8000f8e <main+0x86>
 80010ee:	bf00      	nop
 80010f0:	200001b8 	.word	0x200001b8
 80010f4:	08006c48 	.word	0x08006c48
 80010f8:	08006c4c 	.word	0x08006c4c
 80010fc:	08006c50 	.word	0x08006c50
 8001100:	200001cc 	.word	0x200001cc
 8001104:	20000208 	.word	0x20000208

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b09c      	sub	sp, #112	@ 0x70
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001112:	2228      	movs	r2, #40	@ 0x28
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f004 fccd 	bl	8005ab6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800112c:	463b      	mov	r3, r7
 800112e:	2234      	movs	r2, #52	@ 0x34
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f004 fcbf 	bl	8005ab6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001138:	2301      	movs	r3, #1
 800113a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800113c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001140:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001146:	2301      	movs	r3, #1
 8001148:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114a:	2302      	movs	r3, #2
 800114c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800114e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001152:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001154:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001158:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800115e:	4618      	mov	r0, r3
 8001160:	f001 f87e 	bl	8002260 <HAL_RCC_OscConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800116a:	f000 f9d7 	bl	800151c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116e:	230f      	movs	r3, #15
 8001170:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001172:	2302      	movs	r3, #2
 8001174:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800117e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001184:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001188:	2102      	movs	r1, #2
 800118a:	4618      	mov	r0, r3
 800118c:	f002 f8a6 	bl	80032dc <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001196:	f000 f9c1 	bl	800151c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800119a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 face 	bl	8003748 <HAL_RCCEx_PeriphCLKConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011b2:	f000 f9b3 	bl	800151c <Error_Handler>
  }
}
 80011b6:	bf00      	nop
 80011b8:	3770      	adds	r7, #112	@ 0x70
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <MX_SPI3_Init+0x74>)
 80011c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001238 <MX_SPI3_Init+0x78>)
 80011c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <MX_SPI3_Init+0x74>)
 80011cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011d2:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <MX_SPI3_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d8:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <MX_SPI3_Init+0x74>)
 80011da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e0:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <MX_SPI3_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e6:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <MX_SPI3_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <MX_SPI3_Init+0x74>)
 80011ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <MX_SPI3_Init+0x74>)
 80011f6:	2230      	movs	r2, #48	@ 0x30
 80011f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <MX_SPI3_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <MX_SPI3_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <MX_SPI3_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800120c:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <MX_SPI3_Init+0x74>)
 800120e:	2207      	movs	r2, #7
 8001210:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001212:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <MX_SPI3_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <MX_SPI3_Init+0x74>)
 800121a:	2208      	movs	r2, #8
 800121c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <MX_SPI3_Init+0x74>)
 8001220:	f002 fc24 	bl	8003a6c <HAL_SPI_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800122a:	f000 f977 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000003c 	.word	0x2000003c
 8001238:	40003c00 	.word	0x40003c00

0800123c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b09a      	sub	sp, #104	@ 0x68
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
 800126c:	615a      	str	r2, [r3, #20]
 800126e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	222c      	movs	r2, #44	@ 0x2c
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f004 fc1d 	bl	8005ab6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800127c:	4b43      	ldr	r3, [pc, #268]	@ (800138c <MX_TIM1_Init+0x150>)
 800127e:	4a44      	ldr	r2, [pc, #272]	@ (8001390 <MX_TIM1_Init+0x154>)
 8001280:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001282:	4b42      	ldr	r3, [pc, #264]	@ (800138c <MX_TIM1_Init+0x150>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b40      	ldr	r3, [pc, #256]	@ (800138c <MX_TIM1_Init+0x150>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 72-1;
 800128e:	4b3f      	ldr	r3, [pc, #252]	@ (800138c <MX_TIM1_Init+0x150>)
 8001290:	2247      	movs	r2, #71	@ 0x47
 8001292:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b3d      	ldr	r3, [pc, #244]	@ (800138c <MX_TIM1_Init+0x150>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800129a:	4b3c      	ldr	r3, [pc, #240]	@ (800138c <MX_TIM1_Init+0x150>)
 800129c:	2200      	movs	r2, #0
 800129e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a0:	4b3a      	ldr	r3, [pc, #232]	@ (800138c <MX_TIM1_Init+0x150>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012a6:	4839      	ldr	r0, [pc, #228]	@ (800138c <MX_TIM1_Init+0x150>)
 80012a8:	f002 fc8b 	bl	8003bc2 <HAL_TIM_Base_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012b2:	f000 f933 	bl	800151c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012bc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80012c0:	4619      	mov	r1, r3
 80012c2:	4832      	ldr	r0, [pc, #200]	@ (800138c <MX_TIM1_Init+0x150>)
 80012c4:	f003 f938 	bl	8004538 <HAL_TIM_ConfigClockSource>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012ce:	f000 f925 	bl	800151c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012d2:	482e      	ldr	r0, [pc, #184]	@ (800138c <MX_TIM1_Init+0x150>)
 80012d4:	f002 fccc 	bl	8003c70 <HAL_TIM_PWM_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012de:	f000 f91d 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80012f2:	4619      	mov	r1, r3
 80012f4:	4825      	ldr	r0, [pc, #148]	@ (800138c <MX_TIM1_Init+0x150>)
 80012f6:	f003 fea1 	bl	800503c <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001300:	f000 f90c 	bl	800151c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001304:	2360      	movs	r3, #96	@ 0x60
 8001306:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130c:	2300      	movs	r3, #0
 800130e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001320:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	4818      	ldr	r0, [pc, #96]	@ (800138c <MX_TIM1_Init+0x150>)
 800132a:	f002 fff1 	bl	8004310 <HAL_TIM_PWM_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001334:	f000 f8f2 	bl	800151c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800134c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001350:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800135a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4619      	mov	r1, r3
 800136c:	4807      	ldr	r0, [pc, #28]	@ (800138c <MX_TIM1_Init+0x150>)
 800136e:	f003 fecb 	bl	8005108 <HAL_TIMEx_ConfigBreakDeadTime>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001378:	f000 f8d0 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800137c:	4803      	ldr	r0, [pc, #12]	@ (800138c <MX_TIM1_Init+0x150>)
 800137e:	f000 f985 	bl	800168c <HAL_TIM_MspPostInit>

}
 8001382:	bf00      	nop
 8001384:	3768      	adds	r7, #104	@ 0x68
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200000a0 	.word	0x200000a0
 8001390:	40012c00 	.word	0x40012c00

08001394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 800139a:	4a15      	ldr	r2, [pc, #84]	@ (80013f0 <MX_USART2_UART_Init+0x5c>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800139e:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013a0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_USART2_UART_Init+0x58>)
 80013d8:	f003 ff0e 	bl	80051f8 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013e2:	f000 f89b 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000130 	.word	0x20000130
 80013f0:	40004400 	.word	0x40004400

080013f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013fa:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <MX_DMA_Init+0x38>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	4a0b      	ldr	r2, [pc, #44]	@ (800142c <MX_DMA_Init+0x38>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6153      	str	r3, [r2, #20]
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <MX_DMA_Init+0x38>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	200c      	movs	r0, #12
 8001418:	f000 fb8d 	bl	8001b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800141c:	200c      	movs	r0, #12
 800141e:	f000 fba6 	bl	8001b6e <HAL_NVIC_EnableIRQ>

}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	4b32      	ldr	r3, [pc, #200]	@ (8001510 <MX_GPIO_Init+0xe0>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	4a31      	ldr	r2, [pc, #196]	@ (8001510 <MX_GPIO_Init+0xe0>)
 800144c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001450:	6153      	str	r3, [r2, #20]
 8001452:	4b2f      	ldr	r3, [pc, #188]	@ (8001510 <MX_GPIO_Init+0xe0>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800145e:	4b2c      	ldr	r3, [pc, #176]	@ (8001510 <MX_GPIO_Init+0xe0>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	4a2b      	ldr	r2, [pc, #172]	@ (8001510 <MX_GPIO_Init+0xe0>)
 8001464:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001468:	6153      	str	r3, [r2, #20]
 800146a:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <MX_GPIO_Init+0xe0>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	4b26      	ldr	r3, [pc, #152]	@ (8001510 <MX_GPIO_Init+0xe0>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	4a25      	ldr	r2, [pc, #148]	@ (8001510 <MX_GPIO_Init+0xe0>)
 800147c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001480:	6153      	str	r3, [r2, #20]
 8001482:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <MX_GPIO_Init+0xe0>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <MX_GPIO_Init+0xe0>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	4a1f      	ldr	r2, [pc, #124]	@ (8001510 <MX_GPIO_Init+0xe0>)
 8001494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001498:	6153      	str	r3, [r2, #20]
 800149a:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <MX_GPIO_Init+0xe0>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f242 0102 	movw	r1, #8194	@ 0x2002
 80014ac:	4819      	ldr	r0, [pc, #100]	@ (8001514 <MX_GPIO_Init+0xe4>)
 80014ae:	f000 febf 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	4813      	ldr	r0, [pc, #76]	@ (8001518 <MX_GPIO_Init+0xe8>)
 80014ca:	f000 fd3f 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_Pin */
  GPIO_InitStruct.Pin = DATA_Pin;
 80014ce:	2310      	movs	r3, #16
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	480d      	ldr	r0, [pc, #52]	@ (8001518 <MX_GPIO_Init+0xe8>)
 80014e4:	f000 fd32 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LD2_Pin;
 80014e8:	f242 0302 	movw	r3, #8194	@ 0x2002
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4804      	ldr	r0, [pc, #16]	@ (8001514 <MX_GPIO_Init+0xe4>)
 8001502:	f000 fd23 	bl	8001f4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	@ 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000
 8001514:	48000400 	.word	0x48000400
 8001518:	48000800 	.word	0x48000800

0800151c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <Error_Handler+0x8>

08001528 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <HAL_MspInit+0x44>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	4a0e      	ldr	r2, [pc, #56]	@ (800156c <HAL_MspInit+0x44>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6193      	str	r3, [r2, #24]
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <HAL_MspInit+0x44>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <HAL_MspInit+0x44>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a08      	ldr	r2, [pc, #32]	@ (800156c <HAL_MspInit+0x44>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001550:	61d3      	str	r3, [r2, #28]
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_MspInit+0x44>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800155e:	2007      	movs	r0, #7
 8001560:	f000 fade 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021000 	.word	0x40021000

08001570 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	@ 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a17      	ldr	r2, [pc, #92]	@ (80015ec <HAL_SPI_MspInit+0x7c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d128      	bne.n	80015e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001592:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <HAL_SPI_MspInit+0x80>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4a16      	ldr	r2, [pc, #88]	@ (80015f0 <HAL_SPI_MspInit+0x80>)
 8001598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800159c:	61d3      	str	r3, [r2, #28]
 800159e:	4b14      	ldr	r3, [pc, #80]	@ (80015f0 <HAL_SPI_MspInit+0x80>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015aa:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <HAL_SPI_MspInit+0x80>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	4a10      	ldr	r2, [pc, #64]	@ (80015f0 <HAL_SPI_MspInit+0x80>)
 80015b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015b4:	6153      	str	r3, [r2, #20]
 80015b6:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <HAL_SPI_MspInit+0x80>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80015c2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015d4:	2306      	movs	r3, #6
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <HAL_SPI_MspInit+0x84>)
 80015e0:	f000 fcb4 	bl	8001f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	@ 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40003c00 	.word	0x40003c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	48000800 	.word	0x48000800

080015f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1d      	ldr	r2, [pc, #116]	@ (800167c <HAL_TIM_Base_MspInit+0x84>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d133      	bne.n	8001672 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800160a:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <HAL_TIM_Base_MspInit+0x88>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	4a1c      	ldr	r2, [pc, #112]	@ (8001680 <HAL_TIM_Base_MspInit+0x88>)
 8001610:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001614:	6193      	str	r3, [r2, #24]
 8001616:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <HAL_TIM_Base_MspInit+0x88>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001622:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <HAL_TIM_Base_MspInit+0x8c>)
 8001624:	4a18      	ldr	r2, [pc, #96]	@ (8001688 <HAL_TIM_Base_MspInit+0x90>)
 8001626:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001628:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <HAL_TIM_Base_MspInit+0x8c>)
 800162a:	2210      	movs	r2, #16
 800162c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <HAL_TIM_Base_MspInit+0x8c>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001634:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <HAL_TIM_Base_MspInit+0x8c>)
 8001636:	2280      	movs	r2, #128	@ 0x80
 8001638:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800163a:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <HAL_TIM_Base_MspInit+0x8c>)
 800163c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001640:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <HAL_TIM_Base_MspInit+0x8c>)
 8001644:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001648:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <HAL_TIM_Base_MspInit+0x8c>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <HAL_TIM_Base_MspInit+0x8c>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001656:	480b      	ldr	r0, [pc, #44]	@ (8001684 <HAL_TIM_Base_MspInit+0x8c>)
 8001658:	f000 faa3 	bl	8001ba2 <HAL_DMA_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001662:	f7ff ff5b 	bl	800151c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a06      	ldr	r2, [pc, #24]	@ (8001684 <HAL_TIM_Base_MspInit+0x8c>)
 800166a:	625a      	str	r2, [r3, #36]	@ 0x24
 800166c:	4a05      	ldr	r2, [pc, #20]	@ (8001684 <HAL_TIM_Base_MspInit+0x8c>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40012c00 	.word	0x40012c00
 8001680:	40021000 	.word	0x40021000
 8001684:	200000ec 	.word	0x200000ec
 8001688:	4002001c 	.word	0x4002001c

0800168c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a11      	ldr	r2, [pc, #68]	@ (80016f0 <HAL_TIM_MspPostInit+0x64>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d11b      	bne.n	80016e6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <HAL_TIM_MspPostInit+0x68>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	4a10      	ldr	r2, [pc, #64]	@ (80016f4 <HAL_TIM_MspPostInit+0x68>)
 80016b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016b8:	6153      	str	r3, [r2, #20]
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <HAL_TIM_MspPostInit+0x68>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016c6:	2301      	movs	r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80016d6:	2302      	movs	r3, #2
 80016d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	@ (80016f8 <HAL_TIM_MspPostInit+0x6c>)
 80016e2:	f000 fc33 	bl	8001f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3720      	adds	r7, #32
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40012c00 	.word	0x40012c00
 80016f4:	40021000 	.word	0x40021000
 80016f8:	48000800 	.word	0x48000800

080016fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	@ 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a17      	ldr	r2, [pc, #92]	@ (8001778 <HAL_UART_MspInit+0x7c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d128      	bne.n	8001770 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800171e:	4b17      	ldr	r3, [pc, #92]	@ (800177c <HAL_UART_MspInit+0x80>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a16      	ldr	r2, [pc, #88]	@ (800177c <HAL_UART_MspInit+0x80>)
 8001724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <HAL_UART_MspInit+0x80>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <HAL_UART_MspInit+0x80>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	4a10      	ldr	r2, [pc, #64]	@ (800177c <HAL_UART_MspInit+0x80>)
 800173c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001740:	6153      	str	r3, [r2, #20]
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <HAL_UART_MspInit+0x80>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800174e:	230c      	movs	r3, #12
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800175e:	2307      	movs	r3, #7
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800176c:	f000 fbee 	bl	8001f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	@ 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40004400 	.word	0x40004400
 800177c:	40021000 	.word	0x40021000

08001780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <NMI_Handler+0x4>

08001788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <MemManage_Handler+0x4>

08001798 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d6:	f000 f88f 	bl	80018f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80017e4:	4802      	ldr	r0, [pc, #8]	@ (80017f0 <DMA1_Channel2_IRQHandler+0x10>)
 80017e6:	f000 fac0 	bl	8001d6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200000ec 	.word	0x200000ec

080017f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001850 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800181c:	f7ff ffea 	bl	80017f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001820:	480c      	ldr	r0, [pc, #48]	@ (8001854 <LoopForever+0x6>)
  ldr r1, =_edata
 8001822:	490d      	ldr	r1, [pc, #52]	@ (8001858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001824:	4a0d      	ldr	r2, [pc, #52]	@ (800185c <LoopForever+0xe>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001828:	e002      	b.n	8001830 <LoopCopyDataInit>

0800182a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800182c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182e:	3304      	adds	r3, #4

08001830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001834:	d3f9      	bcc.n	800182a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001836:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001838:	4c0a      	ldr	r4, [pc, #40]	@ (8001864 <LoopForever+0x16>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800183c:	e001      	b.n	8001842 <LoopFillZerobss>

0800183e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001840:	3204      	adds	r2, #4

08001842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001844:	d3fb      	bcc.n	800183e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001846:	f004 f93f 	bl	8005ac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800184a:	f7ff fb5d 	bl	8000f08 <main>

0800184e <LoopForever>:

LoopForever:
    b LoopForever
 800184e:	e7fe      	b.n	800184e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001850:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800185c:	08006e70 	.word	0x08006e70
  ldr r2, =_sbss
 8001860:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001864:	20002e4c 	.word	0x20002e4c

08001868 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC1_IRQHandler>
	...

0800186c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001870:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <HAL_Init+0x28>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a07      	ldr	r2, [pc, #28]	@ (8001894 <HAL_Init+0x28>)
 8001876:	f043 0310 	orr.w	r3, r3, #16
 800187a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187c:	2003      	movs	r0, #3
 800187e:	f000 f94f 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001882:	2000      	movs	r0, #0
 8001884:	f000 f808 	bl	8001898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001888:	f7ff fe4e 	bl	8001528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40022000 	.word	0x40022000

08001898 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a0:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_InitTick+0x54>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_InitTick+0x58>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f967 	bl	8001b8a <HAL_SYSTICK_Config>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00e      	b.n	80018e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b0f      	cmp	r3, #15
 80018ca:	d80a      	bhi.n	80018e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018cc:	2200      	movs	r2, #0
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f000 f92f 	bl	8001b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d8:	4a06      	ldr	r2, [pc, #24]	@ (80018f4 <HAL_InitTick+0x5c>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000008 	.word	0x20000008
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_IncTick+0x20>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_IncTick+0x24>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4413      	add	r3, r2
 8001908:	4a04      	ldr	r2, [pc, #16]	@ (800191c <HAL_IncTick+0x24>)
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000008 	.word	0x20000008
 800191c:	20002e34 	.word	0x20002e34

08001920 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return uwTick;  
 8001924:	4b03      	ldr	r3, [pc, #12]	@ (8001934 <HAL_GetTick+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20002e34 	.word	0x20002e34

08001938 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001940:	f7ff ffee 	bl	8001920 <HAL_GetTick>
 8001944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001950:	d005      	beq.n	800195e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001952:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <HAL_Delay+0x44>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800195e:	bf00      	nop
 8001960:	f7ff ffde 	bl	8001920 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	429a      	cmp	r2, r3
 800196e:	d8f7      	bhi.n	8001960 <HAL_Delay+0x28>
  {
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000008 	.word	0x20000008

08001980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800199c:	4013      	ands	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b2:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	60d3      	str	r3, [r2, #12]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019cc:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	f003 0307 	and.w	r3, r3, #7
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	db0b      	blt.n	8001a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	f003 021f 	and.w	r2, r3, #31
 80019fc:	4907      	ldr	r1, [pc, #28]	@ (8001a1c <__NVIC_EnableIRQ+0x38>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	2001      	movs	r0, #1
 8001a06:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	@ (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	@ (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	@ 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f1c3 0307 	rsb	r3, r3, #7
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf28      	it	cs
 8001a92:	2304      	movcs	r3, #4
 8001a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d902      	bls.n	8001aa4 <NVIC_EncodePriority+0x30>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3b03      	subs	r3, #3
 8001aa2:	e000      	b.n	8001aa6 <NVIC_EncodePriority+0x32>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	4313      	orrs	r3, r2
         );
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	@ 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aec:	d301      	bcc.n	8001af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00f      	b.n	8001b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b1c <SysTick_Config+0x40>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afa:	210f      	movs	r1, #15
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f7ff ff8e 	bl	8001a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <SysTick_Config+0x40>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0a:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <SysTick_Config+0x40>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff29 	bl	8001980 <__NVIC_SetPriorityGrouping>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b48:	f7ff ff3e 	bl	80019c8 <__NVIC_GetPriorityGrouping>
 8001b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	6978      	ldr	r0, [r7, #20]
 8001b54:	f7ff ff8e 	bl	8001a74 <NVIC_EncodePriority>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff5d 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff31 	bl	80019e4 <__NVIC_EnableIRQ>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ffa2 	bl	8001adc <SysTick_Config>
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e037      	b.n	8001c28 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001bce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001bd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f97e 	bl	8001f0c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}  
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_DMA_Start_IT+0x20>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e04a      	b.n	8001ce6 <HAL_DMA_Start_IT+0xb6>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d13a      	bne.n	8001cd8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2202      	movs	r2, #2
 8001c66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f912 	bl	8001eb0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 020e 	orr.w	r2, r2, #14
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e00f      	b.n	8001cc6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 020a 	orr.w	r2, r2, #10
 8001cb4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0204 	bic.w	r2, r2, #4
 8001cc4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0201 	orr.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e005      	b.n	8001ce4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d005      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2204      	movs	r2, #4
 8001d08:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	e027      	b.n	8001d60 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 020e 	bic.w	r2, r2, #14
 8001d1e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d38:	2101      	movs	r1, #1
 8001d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	4798      	blx	r3
    } 
  }
  return status;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	2204      	movs	r2, #4
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d024      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x72>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d01f      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0320 	and.w	r3, r3, #32
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d107      	bne.n	8001dba <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0204 	bic.w	r2, r2, #4
 8001db8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d06a      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001dda:	e065      	b.n	8001ea8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	2202      	movs	r2, #2
 8001de2:	409a      	lsls	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d02c      	beq.n	8001e46 <HAL_DMA_IRQHandler+0xdc>
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d027      	beq.n	8001e46 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10b      	bne.n	8001e1c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 020a 	bic.w	r2, r2, #10
 8001e12:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e24:	2102      	movs	r1, #2
 8001e26:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d035      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001e44:	e030      	b.n	8001ea8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d028      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x13e>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d023      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 020e 	bic.w	r2, r2, #14
 8001e6e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e78:	2101      	movs	r1, #1
 8001e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4798      	blx	r3
    }
  }
}  
 8001ea6:	e7ff      	b.n	8001ea8 <HAL_DMA_IRQHandler+0x13e>
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ecc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b10      	cmp	r3, #16
 8001edc:	d108      	bne.n	8001ef0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001eee:	e007      	b.n	8001f00 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	60da      	str	r2, [r3, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <DMA_CalcBaseAndBitshift+0x34>)
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4a09      	ldr	r2, [pc, #36]	@ (8001f44 <DMA_CalcBaseAndBitshift+0x38>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	009a      	lsls	r2, r3, #2
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a06      	ldr	r2, [pc, #24]	@ (8001f48 <DMA_CalcBaseAndBitshift+0x3c>)
 8001f30:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	bffdfff8 	.word	0xbffdfff8
 8001f44:	cccccccd 	.word	0xcccccccd
 8001f48:	40020000 	.word	0x40020000

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5a:	e14e      	b.n	80021fa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2101      	movs	r1, #1
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8140 	beq.w	80021f4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d005      	beq.n	8001f8c <HAL_GPIO_Init+0x40>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d130      	bne.n	8001fee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	091b      	lsrs	r3, r3, #4
 8001fd8:	f003 0201 	and.w	r2, r3, #1
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d017      	beq.n	800202a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	2203      	movs	r2, #3
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d123      	bne.n	800207e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	08da      	lsrs	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3208      	adds	r2, #8
 800203e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002042:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	08da      	lsrs	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3208      	adds	r2, #8
 8002078:	6939      	ldr	r1, [r7, #16]
 800207a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0203 	and.w	r2, r3, #3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 809a 	beq.w	80021f4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c0:	4b55      	ldr	r3, [pc, #340]	@ (8002218 <HAL_GPIO_Init+0x2cc>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	4a54      	ldr	r2, [pc, #336]	@ (8002218 <HAL_GPIO_Init+0x2cc>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6193      	str	r3, [r2, #24]
 80020cc:	4b52      	ldr	r3, [pc, #328]	@ (8002218 <HAL_GPIO_Init+0x2cc>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020d8:	4a50      	ldr	r2, [pc, #320]	@ (800221c <HAL_GPIO_Init+0x2d0>)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002102:	d013      	beq.n	800212c <HAL_GPIO_Init+0x1e0>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a46      	ldr	r2, [pc, #280]	@ (8002220 <HAL_GPIO_Init+0x2d4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00d      	beq.n	8002128 <HAL_GPIO_Init+0x1dc>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a45      	ldr	r2, [pc, #276]	@ (8002224 <HAL_GPIO_Init+0x2d8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d007      	beq.n	8002124 <HAL_GPIO_Init+0x1d8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a44      	ldr	r2, [pc, #272]	@ (8002228 <HAL_GPIO_Init+0x2dc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d101      	bne.n	8002120 <HAL_GPIO_Init+0x1d4>
 800211c:	2303      	movs	r3, #3
 800211e:	e006      	b.n	800212e <HAL_GPIO_Init+0x1e2>
 8002120:	2305      	movs	r3, #5
 8002122:	e004      	b.n	800212e <HAL_GPIO_Init+0x1e2>
 8002124:	2302      	movs	r3, #2
 8002126:	e002      	b.n	800212e <HAL_GPIO_Init+0x1e2>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_GPIO_Init+0x1e2>
 800212c:	2300      	movs	r3, #0
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	f002 0203 	and.w	r2, r2, #3
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	4093      	lsls	r3, r2
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800213e:	4937      	ldr	r1, [pc, #220]	@ (800221c <HAL_GPIO_Init+0x2d0>)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800214c:	4b37      	ldr	r3, [pc, #220]	@ (800222c <HAL_GPIO_Init+0x2e0>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002170:	4a2e      	ldr	r2, [pc, #184]	@ (800222c <HAL_GPIO_Init+0x2e0>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002176:	4b2d      	ldr	r3, [pc, #180]	@ (800222c <HAL_GPIO_Init+0x2e0>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800219a:	4a24      	ldr	r2, [pc, #144]	@ (800222c <HAL_GPIO_Init+0x2e0>)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021a0:	4b22      	ldr	r3, [pc, #136]	@ (800222c <HAL_GPIO_Init+0x2e0>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021c4:	4a19      	ldr	r2, [pc, #100]	@ (800222c <HAL_GPIO_Init+0x2e0>)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ca:	4b18      	ldr	r3, [pc, #96]	@ (800222c <HAL_GPIO_Init+0x2e0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021ee:	4a0f      	ldr	r2, [pc, #60]	@ (800222c <HAL_GPIO_Init+0x2e0>)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3301      	adds	r3, #1
 80021f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	f47f aea9 	bne.w	8001f5c <HAL_GPIO_Init+0x10>
  }
}
 800220a:	bf00      	nop
 800220c:	bf00      	nop
 800220e:	371c      	adds	r7, #28
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	40021000 	.word	0x40021000
 800221c:	40010000 	.word	0x40010000
 8002220:	48000400 	.word	0x48000400
 8002224:	48000800 	.word	0x48000800
 8002228:	48000c00 	.word	0x48000c00
 800222c:	40010400 	.word	0x40010400

08002230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800224c:	e002      	b.n	8002254 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002266:	af00      	add	r7, sp, #0
 8002268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002270:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002276:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	f001 b823 	b.w	80032cc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 817d 	beq.w	8002596 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800229c:	4bbc      	ldr	r3, [pc, #752]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d00c      	beq.n	80022c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022a8:	4bb9      	ldr	r3, [pc, #740]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d15c      	bne.n	800236e <HAL_RCC_OscConfig+0x10e>
 80022b4:	4bb6      	ldr	r3, [pc, #728]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c0:	d155      	bne.n	800236e <HAL_RCC_OscConfig+0x10e>
 80022c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022c6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d102      	bne.n	80022f4 <HAL_RCC_OscConfig+0x94>
 80022ee:	4ba8      	ldr	r3, [pc, #672]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	e015      	b.n	8002320 <HAL_RCC_OscConfig+0xc0>
 80022f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022f8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002308:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800230c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002310:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800231c:	4b9c      	ldr	r3, [pc, #624]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 800231e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002320:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002324:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002328:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800232c:	fa92 f2a2 	rbit	r2, r2
 8002330:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002334:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002338:	fab2 f282 	clz	r2, r2
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	f042 0220 	orr.w	r2, r2, #32
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	f002 021f 	and.w	r2, r2, #31
 8002348:	2101      	movs	r1, #1
 800234a:	fa01 f202 	lsl.w	r2, r1, r2
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 811f 	beq.w	8002594 <HAL_RCC_OscConfig+0x334>
 8002356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f040 8116 	bne.w	8002594 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	f000 bfaf 	b.w	80032cc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002372:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x12e>
 8002380:	4b83      	ldr	r3, [pc, #524]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a82      	ldr	r2, [pc, #520]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 8002386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	e036      	b.n	80023fc <HAL_RCC_OscConfig+0x19c>
 800238e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002392:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x158>
 800239e:	4b7c      	ldr	r3, [pc, #496]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a7b      	ldr	r2, [pc, #492]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80023a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b79      	ldr	r3, [pc, #484]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a78      	ldr	r2, [pc, #480]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80023b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e021      	b.n	80023fc <HAL_RCC_OscConfig+0x19c>
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x184>
 80023ca:	4b71      	ldr	r3, [pc, #452]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a70      	ldr	r2, [pc, #448]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80023d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a6d      	ldr	r2, [pc, #436]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e00b      	b.n	80023fc <HAL_RCC_OscConfig+0x19c>
 80023e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a69      	ldr	r2, [pc, #420]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b67      	ldr	r3, [pc, #412]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a66      	ldr	r2, [pc, #408]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80023f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023fa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023fc:	4b64      	ldr	r3, [pc, #400]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	f023 020f 	bic.w	r2, r3, #15
 8002404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002408:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	495f      	ldr	r1, [pc, #380]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 8002412:	4313      	orrs	r3, r2
 8002414:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d059      	beq.n	80024da <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7ff fa7b 	bl	8001920 <HAL_GetTick>
 800242a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	e00a      	b.n	8002446 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002430:	f7ff fa76 	bl	8001920 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b64      	cmp	r3, #100	@ 0x64
 800243e:	d902      	bls.n	8002446 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	f000 bf43 	b.w	80032cc <HAL_RCC_OscConfig+0x106c>
 8002446:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800244a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800245a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d102      	bne.n	8002478 <HAL_RCC_OscConfig+0x218>
 8002472:	4b47      	ldr	r3, [pc, #284]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	e015      	b.n	80024a4 <HAL_RCC_OscConfig+0x244>
 8002478:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800247c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800248c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002490:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002494:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80024a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 80024a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024a8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80024ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80024b0:	fa92 f2a2 	rbit	r2, r2
 80024b4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80024b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80024bc:	fab2 f282 	clz	r2, r2
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	f042 0220 	orr.w	r2, r2, #32
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	f002 021f 	and.w	r2, r2, #31
 80024cc:	2101      	movs	r1, #1
 80024ce:	fa01 f202 	lsl.w	r2, r1, r2
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ab      	beq.n	8002430 <HAL_RCC_OscConfig+0x1d0>
 80024d8:	e05d      	b.n	8002596 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7ff fa21 	bl	8001920 <HAL_GetTick>
 80024de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e4:	f7ff fa1c 	bl	8001920 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b64      	cmp	r3, #100	@ 0x64
 80024f2:	d902      	bls.n	80024fa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	f000 bee9 	b.w	80032cc <HAL_RCC_OscConfig+0x106c>
 80024fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024fe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800250e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	b2db      	uxtb	r3, r3
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b01      	cmp	r3, #1
 8002524:	d102      	bne.n	800252c <HAL_RCC_OscConfig+0x2cc>
 8002526:	4b1a      	ldr	r3, [pc, #104]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	e015      	b.n	8002558 <HAL_RCC_OscConfig+0x2f8>
 800252c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002530:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002540:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002544:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002548:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002554:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <HAL_RCC_OscConfig+0x330>)
 8002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002558:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800255c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002560:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002564:	fa92 f2a2 	rbit	r2, r2
 8002568:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800256c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002570:	fab2 f282 	clz	r2, r2
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	f042 0220 	orr.w	r2, r2, #32
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	f002 021f 	and.w	r2, r2, #31
 8002580:	2101      	movs	r1, #1
 8002582:	fa01 f202 	lsl.w	r2, r1, r2
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1ab      	bne.n	80024e4 <HAL_RCC_OscConfig+0x284>
 800258c:	e003      	b.n	8002596 <HAL_RCC_OscConfig+0x336>
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 817d 	beq.w	80028a6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025ac:	4ba6      	ldr	r3, [pc, #664]	@ (8002848 <HAL_RCC_OscConfig+0x5e8>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00b      	beq.n	80025d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025b8:	4ba3      	ldr	r3, [pc, #652]	@ (8002848 <HAL_RCC_OscConfig+0x5e8>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d172      	bne.n	80026aa <HAL_RCC_OscConfig+0x44a>
 80025c4:	4ba0      	ldr	r3, [pc, #640]	@ (8002848 <HAL_RCC_OscConfig+0x5e8>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d16c      	bne.n	80026aa <HAL_RCC_OscConfig+0x44a>
 80025d0:	2302      	movs	r3, #2
 80025d2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80025e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d102      	bne.n	8002600 <HAL_RCC_OscConfig+0x3a0>
 80025fa:	4b93      	ldr	r3, [pc, #588]	@ (8002848 <HAL_RCC_OscConfig+0x5e8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	e013      	b.n	8002628 <HAL_RCC_OscConfig+0x3c8>
 8002600:	2302      	movs	r3, #2
 8002602:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002612:	2302      	movs	r3, #2
 8002614:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002618:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002624:	4b88      	ldr	r3, [pc, #544]	@ (8002848 <HAL_RCC_OscConfig+0x5e8>)
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	2202      	movs	r2, #2
 800262a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800262e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002632:	fa92 f2a2 	rbit	r2, r2
 8002636:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800263a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800263e:	fab2 f282 	clz	r2, r2
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	f042 0220 	orr.w	r2, r2, #32
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	f002 021f 	and.w	r2, r2, #31
 800264e:	2101      	movs	r1, #1
 8002650:	fa01 f202 	lsl.w	r2, r1, r2
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_RCC_OscConfig+0x410>
 800265a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d002      	beq.n	8002670 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	f000 be2e 	b.w	80032cc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002670:	4b75      	ldr	r3, [pc, #468]	@ (8002848 <HAL_RCC_OscConfig+0x5e8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	21f8      	movs	r1, #248	@ 0xf8
 8002686:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800268e:	fa91 f1a1 	rbit	r1, r1
 8002692:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002696:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800269a:	fab1 f181 	clz	r1, r1
 800269e:	b2c9      	uxtb	r1, r1
 80026a0:	408b      	lsls	r3, r1
 80026a2:	4969      	ldr	r1, [pc, #420]	@ (8002848 <HAL_RCC_OscConfig+0x5e8>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a8:	e0fd      	b.n	80028a6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8088 	beq.w	80027cc <HAL_RCC_OscConfig+0x56c>
 80026bc:	2301      	movs	r3, #1
 80026be:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80026ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026dc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	461a      	mov	r2, r3
 80026e4:	2301      	movs	r3, #1
 80026e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7ff f91a 	bl	8001920 <HAL_GetTick>
 80026ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f2:	f7ff f915 	bl	8001920 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d902      	bls.n	8002708 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	f000 bde2 	b.w	80032cc <HAL_RCC_OscConfig+0x106c>
 8002708:	2302      	movs	r3, #2
 800270a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800271a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_RCC_OscConfig+0x4d8>
 8002732:	4b45      	ldr	r3, [pc, #276]	@ (8002848 <HAL_RCC_OscConfig+0x5e8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e013      	b.n	8002760 <HAL_RCC_OscConfig+0x500>
 8002738:	2302      	movs	r3, #2
 800273a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800274a:	2302      	movs	r3, #2
 800274c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002750:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800275c:	4b3a      	ldr	r3, [pc, #232]	@ (8002848 <HAL_RCC_OscConfig+0x5e8>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002760:	2202      	movs	r2, #2
 8002762:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002766:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800276a:	fa92 f2a2 	rbit	r2, r2
 800276e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002772:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002776:	fab2 f282 	clz	r2, r2
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	f042 0220 	orr.w	r2, r2, #32
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	f002 021f 	and.w	r2, r2, #31
 8002786:	2101      	movs	r1, #1
 8002788:	fa01 f202 	lsl.w	r2, r1, r2
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0af      	beq.n	80026f2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002792:	4b2d      	ldr	r3, [pc, #180]	@ (8002848 <HAL_RCC_OscConfig+0x5e8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800279a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	21f8      	movs	r1, #248	@ 0xf8
 80027a8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80027b0:	fa91 f1a1 	rbit	r1, r1
 80027b4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80027b8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80027bc:	fab1 f181 	clz	r1, r1
 80027c0:	b2c9      	uxtb	r1, r1
 80027c2:	408b      	lsls	r3, r1
 80027c4:	4920      	ldr	r1, [pc, #128]	@ (8002848 <HAL_RCC_OscConfig+0x5e8>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
 80027ca:	e06c      	b.n	80028a6 <HAL_RCC_OscConfig+0x646>
 80027cc:	2301      	movs	r3, #1
 80027ce:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80027de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	461a      	mov	r2, r3
 80027f4:	2300      	movs	r3, #0
 80027f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7ff f892 	bl	8001920 <HAL_GetTick>
 80027fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002802:	f7ff f88d 	bl	8001920 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d902      	bls.n	8002818 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	f000 bd5a 	b.w	80032cc <HAL_RCC_OscConfig+0x106c>
 8002818:	2302      	movs	r3, #2
 800281a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800282a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d104      	bne.n	800284c <HAL_RCC_OscConfig+0x5ec>
 8002842:	4b01      	ldr	r3, [pc, #4]	@ (8002848 <HAL_RCC_OscConfig+0x5e8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	e015      	b.n	8002874 <HAL_RCC_OscConfig+0x614>
 8002848:	40021000 	.word	0x40021000
 800284c:	2302      	movs	r3, #2
 800284e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800285e:	2302      	movs	r3, #2
 8002860:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002864:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002870:	4bc8      	ldr	r3, [pc, #800]	@ (8002b94 <HAL_RCC_OscConfig+0x934>)
 8002872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002874:	2202      	movs	r2, #2
 8002876:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800287a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800287e:	fa92 f2a2 	rbit	r2, r2
 8002882:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002886:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800288a:	fab2 f282 	clz	r2, r2
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	f042 0220 	orr.w	r2, r2, #32
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	f002 021f 	and.w	r2, r2, #31
 800289a:	2101      	movs	r1, #1
 800289c:	fa01 f202 	lsl.w	r2, r1, r2
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1ad      	bne.n	8002802 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 8110 	beq.w	8002adc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d079      	beq.n	80029c0 <HAL_RCC_OscConfig+0x760>
 80028cc:	2301      	movs	r3, #1
 80028ce:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80028de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	4bab      	ldr	r3, [pc, #684]	@ (8002b98 <HAL_RCC_OscConfig+0x938>)
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	461a      	mov	r2, r3
 80028f2:	2301      	movs	r3, #1
 80028f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f6:	f7ff f813 	bl	8001920 <HAL_GetTick>
 80028fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002900:	f7ff f80e 	bl	8001920 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d902      	bls.n	8002916 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	f000 bcdb 	b.w	80032cc <HAL_RCC_OscConfig+0x106c>
 8002916:	2302      	movs	r3, #2
 8002918:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002920:	fa93 f3a3 	rbit	r3, r3
 8002924:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002930:	2202      	movs	r2, #2
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002938:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fa93 f2a3 	rbit	r2, r3
 8002942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002946:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002954:	2202      	movs	r2, #2
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	fa93 f2a3 	rbit	r2, r3
 8002966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800296e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002970:	4b88      	ldr	r3, [pc, #544]	@ (8002b94 <HAL_RCC_OscConfig+0x934>)
 8002972:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002978:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800297c:	2102      	movs	r1, #2
 800297e:	6019      	str	r1, [r3, #0]
 8002980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002984:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	fa93 f1a3 	rbit	r1, r3
 800298e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002992:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002996:	6019      	str	r1, [r3, #0]
  return result;
 8002998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2101      	movs	r1, #1
 80029b4:	fa01 f303 	lsl.w	r3, r1, r3
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0a0      	beq.n	8002900 <HAL_RCC_OscConfig+0x6a0>
 80029be:	e08d      	b.n	8002adc <HAL_RCC_OscConfig+0x87c>
 80029c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	fa93 f2a3 	rbit	r2, r3
 80029da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029e2:	601a      	str	r2, [r3, #0]
  return result;
 80029e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ee:	fab3 f383 	clz	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	4b68      	ldr	r3, [pc, #416]	@ (8002b98 <HAL_RCC_OscConfig+0x938>)
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	461a      	mov	r2, r3
 80029fe:	2300      	movs	r3, #0
 8002a00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a02:	f7fe ff8d 	bl	8001920 <HAL_GetTick>
 8002a06:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0c:	f7fe ff88 	bl	8001920 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d902      	bls.n	8002a22 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	f000 bc55 	b.w	80032cc <HAL_RCC_OscConfig+0x106c>
 8002a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a26:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a32:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fa93 f2a3 	rbit	r2, r3
 8002a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a40:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a4e:	2202      	movs	r2, #2
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a56:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	fa93 f2a3 	rbit	r2, r3
 8002a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a72:	2202      	movs	r2, #2
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	fa93 f2a3 	rbit	r2, r3
 8002a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a88:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002a8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8e:	4b41      	ldr	r3, [pc, #260]	@ (8002b94 <HAL_RCC_OscConfig+0x934>)
 8002a90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a96:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	6019      	str	r1, [r3, #0]
 8002a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	fa93 f1a3 	rbit	r1, r3
 8002aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ab4:	6019      	str	r1, [r3, #0]
  return result;
 8002ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	fab3 f383 	clz	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d197      	bne.n	8002a0c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 81a1 	beq.w	8002e34 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af8:	4b26      	ldr	r3, [pc, #152]	@ (8002b94 <HAL_RCC_OscConfig+0x934>)
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d116      	bne.n	8002b32 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b04:	4b23      	ldr	r3, [pc, #140]	@ (8002b94 <HAL_RCC_OscConfig+0x934>)
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	4a22      	ldr	r2, [pc, #136]	@ (8002b94 <HAL_RCC_OscConfig+0x934>)
 8002b0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b0e:	61d3      	str	r3, [r2, #28]
 8002b10:	4b20      	ldr	r3, [pc, #128]	@ (8002b94 <HAL_RCC_OscConfig+0x934>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b26:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002b2a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b32:	4b1a      	ldr	r3, [pc, #104]	@ (8002b9c <HAL_RCC_OscConfig+0x93c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d11a      	bne.n	8002b74 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3e:	4b17      	ldr	r3, [pc, #92]	@ (8002b9c <HAL_RCC_OscConfig+0x93c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a16      	ldr	r2, [pc, #88]	@ (8002b9c <HAL_RCC_OscConfig+0x93c>)
 8002b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4a:	f7fe fee9 	bl	8001920 <HAL_GetTick>
 8002b4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b52:	e009      	b.n	8002b68 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b54:	f7fe fee4 	bl	8001920 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b64      	cmp	r3, #100	@ 0x64
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e3b1      	b.n	80032cc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b68:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <HAL_RCC_OscConfig+0x93c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ef      	beq.n	8002b54 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d10d      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x940>
 8002b84:	4b03      	ldr	r3, [pc, #12]	@ (8002b94 <HAL_RCC_OscConfig+0x934>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4a02      	ldr	r2, [pc, #8]	@ (8002b94 <HAL_RCC_OscConfig+0x934>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6213      	str	r3, [r2, #32]
 8002b90:	e03c      	b.n	8002c0c <HAL_RCC_OscConfig+0x9ac>
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	10908120 	.word	0x10908120
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10c      	bne.n	8002bca <HAL_RCC_OscConfig+0x96a>
 8002bb0:	4bc1      	ldr	r3, [pc, #772]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	4ac0      	ldr	r2, [pc, #768]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	6213      	str	r3, [r2, #32]
 8002bbc:	4bbe      	ldr	r3, [pc, #760]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	4abd      	ldr	r2, [pc, #756]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002bc2:	f023 0304 	bic.w	r3, r3, #4
 8002bc6:	6213      	str	r3, [r2, #32]
 8002bc8:	e020      	b.n	8002c0c <HAL_RCC_OscConfig+0x9ac>
 8002bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b05      	cmp	r3, #5
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x994>
 8002bda:	4bb7      	ldr	r3, [pc, #732]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4ab6      	ldr	r2, [pc, #728]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002be0:	f043 0304 	orr.w	r3, r3, #4
 8002be4:	6213      	str	r3, [r2, #32]
 8002be6:	4bb4      	ldr	r3, [pc, #720]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4ab3      	ldr	r2, [pc, #716]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6213      	str	r3, [r2, #32]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0x9ac>
 8002bf4:	4bb0      	ldr	r3, [pc, #704]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4aaf      	ldr	r2, [pc, #700]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	6213      	str	r3, [r2, #32]
 8002c00:	4bad      	ldr	r3, [pc, #692]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4aac      	ldr	r2, [pc, #688]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002c06:	f023 0304 	bic.w	r3, r3, #4
 8002c0a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8081 	beq.w	8002d20 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1e:	f7fe fe7f 	bl	8001920 <HAL_GetTick>
 8002c22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c28:	f7fe fe7a 	bl	8001920 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e345      	b.n	80032cc <HAL_RCC_OscConfig+0x106c>
 8002c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c44:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c48:	2202      	movs	r2, #2
 8002c4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c50:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	fa93 f2a3 	rbit	r2, r3
 8002c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c68:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c74:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	fa93 f2a3 	rbit	r2, r3
 8002c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c82:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002c86:	601a      	str	r2, [r3, #0]
  return result;
 8002c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c8c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002c90:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f043 0302 	orr.w	r3, r3, #2
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d102      	bne.n	8002cac <HAL_RCC_OscConfig+0xa4c>
 8002ca6:	4b84      	ldr	r3, [pc, #528]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	e013      	b.n	8002cd4 <HAL_RCC_OscConfig+0xa74>
 8002cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cbc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	fa93 f2a3 	rbit	r2, r3
 8002cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	4b79      	ldr	r3, [pc, #484]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cd8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002cdc:	2102      	movs	r1, #2
 8002cde:	6011      	str	r1, [r2, #0]
 8002ce0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ce4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	fa92 f1a2 	rbit	r1, r2
 8002cee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cf2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002cf6:	6011      	str	r1, [r2, #0]
  return result;
 8002cf8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cfc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	fab2 f282 	clz	r2, r2
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	f002 021f 	and.w	r2, r2, #31
 8002d12:	2101      	movs	r1, #1
 8002d14:	fa01 f202 	lsl.w	r2, r1, r2
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d084      	beq.n	8002c28 <HAL_RCC_OscConfig+0x9c8>
 8002d1e:	e07f      	b.n	8002e20 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d20:	f7fe fdfe 	bl	8001920 <HAL_GetTick>
 8002d24:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d28:	e00b      	b.n	8002d42 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fe fdf9 	bl	8001920 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e2c4      	b.n	80032cc <HAL_RCC_OscConfig+0x106c>
 8002d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d46:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d52:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	fa93 f2a3 	rbit	r2, r3
 8002d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d60:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d6e:	2202      	movs	r2, #2
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d76:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	fa93 f2a3 	rbit	r2, r3
 8002d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d84:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d88:	601a      	str	r2, [r3, #0]
  return result;
 8002d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d92:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f043 0302 	orr.w	r3, r3, #2
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d102      	bne.n	8002dae <HAL_RCC_OscConfig+0xb4e>
 8002da8:	4b43      	ldr	r3, [pc, #268]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	e013      	b.n	8002dd6 <HAL_RCC_OscConfig+0xb76>
 8002dae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002db6:	2202      	movs	r2, #2
 8002db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	fa93 f2a3 	rbit	r2, r3
 8002dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dcc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	4b39      	ldr	r3, [pc, #228]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dda:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002dde:	2102      	movs	r1, #2
 8002de0:	6011      	str	r1, [r2, #0]
 8002de2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002de6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	fa92 f1a2 	rbit	r1, r2
 8002df0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002df4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002df8:	6011      	str	r1, [r2, #0]
  return result;
 8002dfa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dfe:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	fab2 f282 	clz	r2, r2
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	f002 021f 	and.w	r2, r2, #31
 8002e14:	2101      	movs	r1, #1
 8002e16:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d184      	bne.n	8002d2a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e20:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e28:	4b23      	ldr	r3, [pc, #140]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	4a22      	ldr	r2, [pc, #136]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8242 	beq.w	80032ca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e46:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb8 <HAL_RCC_OscConfig+0xc58>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	f000 8213 	beq.w	800327a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	f040 8162 	bne.w	800312a <HAL_RCC_OscConfig+0xeca>
 8002e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002e6e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e78:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	fa93 f2a3 	rbit	r2, r3
 8002e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e86:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002e8a:	601a      	str	r2, [r3, #0]
  return result;
 8002e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e90:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002e94:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ea0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe fd38 	bl	8001920 <HAL_GetTick>
 8002eb0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb4:	e00c      	b.n	8002ed0 <HAL_RCC_OscConfig+0xc70>
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fe fd30 	bl	8001920 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e1fd      	b.n	80032cc <HAL_RCC_OscConfig+0x106c>
 8002ed0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002ed8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	fa93 f2a3 	rbit	r2, r3
 8002eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ef4:	601a      	str	r2, [r3, #0]
  return result;
 8002ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002efe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f00:	fab3 f383 	clz	r3, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d102      	bne.n	8002f1a <HAL_RCC_OscConfig+0xcba>
 8002f14:	4bb0      	ldr	r3, [pc, #704]	@ (80031d8 <HAL_RCC_OscConfig+0xf78>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	e027      	b.n	8002f6a <HAL_RCC_OscConfig+0xd0a>
 8002f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	fa93 f2a3 	rbit	r2, r3
 8002f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f44:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f52:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	fa93 f2a3 	rbit	r2, r3
 8002f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f60:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	4b9c      	ldr	r3, [pc, #624]	@ (80031d8 <HAL_RCC_OscConfig+0xf78>)
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f6e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f72:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f76:	6011      	str	r1, [r2, #0]
 8002f78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f7c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	fa92 f1a2 	rbit	r1, r2
 8002f86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f8a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002f8e:	6011      	str	r1, [r2, #0]
  return result;
 8002f90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f94:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	fab2 f282 	clz	r2, r2
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	f042 0220 	orr.w	r2, r2, #32
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	f002 021f 	and.w	r2, r2, #31
 8002faa:	2101      	movs	r1, #1
 8002fac:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d182      	bne.n	8002ebc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb6:	4b88      	ldr	r3, [pc, #544]	@ (80031d8 <HAL_RCC_OscConfig+0xf78>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	497f      	ldr	r1, [pc, #508]	@ (80031d8 <HAL_RCC_OscConfig+0xf78>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
 8002fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002fe6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	fa93 f2a3 	rbit	r2, r3
 8002ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003002:	601a      	str	r2, [r3, #0]
  return result;
 8003004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003008:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800300c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003018:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	461a      	mov	r2, r3
 8003020:	2301      	movs	r3, #1
 8003022:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fe fc7c 	bl	8001920 <HAL_GetTick>
 8003028:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800302c:	e009      	b.n	8003042 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302e:	f7fe fc77 	bl	8001920 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e144      	b.n	80032cc <HAL_RCC_OscConfig+0x106c>
 8003042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003046:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800304a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800304e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003054:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	fa93 f2a3 	rbit	r2, r3
 800305e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003062:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003066:	601a      	str	r2, [r3, #0]
  return result;
 8003068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003070:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d102      	bne.n	800308c <HAL_RCC_OscConfig+0xe2c>
 8003086:	4b54      	ldr	r3, [pc, #336]	@ (80031d8 <HAL_RCC_OscConfig+0xf78>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	e027      	b.n	80030dc <HAL_RCC_OscConfig+0xe7c>
 800308c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003090:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003094:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	fa93 f2a3 	rbit	r2, r3
 80030a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80030ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	fa93 f2a3 	rbit	r2, r3
 80030ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	4b3f      	ldr	r3, [pc, #252]	@ (80031d8 <HAL_RCC_OscConfig+0xf78>)
 80030da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030e0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80030e4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80030e8:	6011      	str	r1, [r2, #0]
 80030ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030ee:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	fa92 f1a2 	rbit	r1, r2
 80030f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030fc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003100:	6011      	str	r1, [r2, #0]
  return result;
 8003102:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003106:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	fab2 f282 	clz	r2, r2
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	f042 0220 	orr.w	r2, r2, #32
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	f002 021f 	and.w	r2, r2, #31
 800311c:	2101      	movs	r1, #1
 800311e:	fa01 f202 	lsl.w	r2, r1, r2
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d082      	beq.n	800302e <HAL_RCC_OscConfig+0xdce>
 8003128:	e0cf      	b.n	80032ca <HAL_RCC_OscConfig+0x106a>
 800312a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003132:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	fa93 f2a3 	rbit	r2, r3
 8003146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800314e:	601a      	str	r2, [r3, #0]
  return result;
 8003150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003154:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003158:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003164:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	461a      	mov	r2, r3
 800316c:	2300      	movs	r3, #0
 800316e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fe fbd6 	bl	8001920 <HAL_GetTick>
 8003174:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003178:	e009      	b.n	800318e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317a:	f7fe fbd1 	bl	8001920 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e09e      	b.n	80032cc <HAL_RCC_OscConfig+0x106c>
 800318e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003192:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003196:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800319a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	fa93 f2a3 	rbit	r2, r3
 80031aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ae:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80031b2:	601a      	str	r2, [r3, #0]
  return result;
 80031b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80031bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d104      	bne.n	80031dc <HAL_RCC_OscConfig+0xf7c>
 80031d2:	4b01      	ldr	r3, [pc, #4]	@ (80031d8 <HAL_RCC_OscConfig+0xf78>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	e029      	b.n	800322c <HAL_RCC_OscConfig+0xfcc>
 80031d8:	40021000 	.word	0x40021000
 80031dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80031e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ee:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	fa93 f2a3 	rbit	r2, r3
 80031f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003206:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800320a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003214:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	fa93 f2a3 	rbit	r2, r3
 800321e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003222:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	4b2b      	ldr	r3, [pc, #172]	@ (80032d8 <HAL_RCC_OscConfig+0x1078>)
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003230:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003234:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003238:	6011      	str	r1, [r2, #0]
 800323a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800323e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	fa92 f1a2 	rbit	r1, r2
 8003248:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800324c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003250:	6011      	str	r1, [r2, #0]
  return result;
 8003252:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003256:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	fab2 f282 	clz	r2, r2
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	f042 0220 	orr.w	r2, r2, #32
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	f002 021f 	and.w	r2, r2, #31
 800326c:	2101      	movs	r1, #1
 800326e:	fa01 f202 	lsl.w	r2, r1, r2
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d180      	bne.n	800317a <HAL_RCC_OscConfig+0xf1a>
 8003278:	e027      	b.n	80032ca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800327a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e01e      	b.n	80032cc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800328e:	4b12      	ldr	r3, [pc, #72]	@ (80032d8 <HAL_RCC_OscConfig+0x1078>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003296:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800329a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800329e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d10b      	bne.n	80032c6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80032ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80032b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d001      	beq.n	80032ca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40021000 	.word	0x40021000

080032dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b09e      	sub	sp, #120	@ 0x78
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e162      	b.n	80035ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032f4:	4b90      	ldr	r3, [pc, #576]	@ (8003538 <HAL_RCC_ClockConfig+0x25c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d910      	bls.n	8003324 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4b8d      	ldr	r3, [pc, #564]	@ (8003538 <HAL_RCC_ClockConfig+0x25c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 0207 	bic.w	r2, r3, #7
 800330a:	498b      	ldr	r1, [pc, #556]	@ (8003538 <HAL_RCC_ClockConfig+0x25c>)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b89      	ldr	r3, [pc, #548]	@ (8003538 <HAL_RCC_ClockConfig+0x25c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e14a      	b.n	80035ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003330:	4b82      	ldr	r3, [pc, #520]	@ (800353c <HAL_RCC_ClockConfig+0x260>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	497f      	ldr	r1, [pc, #508]	@ (800353c <HAL_RCC_ClockConfig+0x260>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 80dc 	beq.w	8003508 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d13c      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xf6>
 8003358:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800335c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003360:	fa93 f3a3 	rbit	r3, r3
 8003364:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003366:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003368:	fab3 f383 	clz	r3, r3
 800336c:	b2db      	uxtb	r3, r3
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d102      	bne.n	8003382 <HAL_RCC_ClockConfig+0xa6>
 800337c:	4b6f      	ldr	r3, [pc, #444]	@ (800353c <HAL_RCC_ClockConfig+0x260>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	e00f      	b.n	80033a2 <HAL_RCC_ClockConfig+0xc6>
 8003382:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003386:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003390:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003394:	663b      	str	r3, [r7, #96]	@ 0x60
 8003396:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800339e:	4b67      	ldr	r3, [pc, #412]	@ (800353c <HAL_RCC_ClockConfig+0x260>)
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80033a6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033aa:	fa92 f2a2 	rbit	r2, r2
 80033ae:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80033b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80033b2:	fab2 f282 	clz	r2, r2
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	f042 0220 	orr.w	r2, r2, #32
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	f002 021f 	and.w	r2, r2, #31
 80033c2:	2101      	movs	r1, #1
 80033c4:	fa01 f202 	lsl.w	r2, r1, r2
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d17b      	bne.n	80034c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e0f3      	b.n	80035ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d13c      	bne.n	8003454 <HAL_RCC_ClockConfig+0x178>
 80033da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80033e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d102      	bne.n	8003404 <HAL_RCC_ClockConfig+0x128>
 80033fe:	4b4f      	ldr	r3, [pc, #316]	@ (800353c <HAL_RCC_ClockConfig+0x260>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	e00f      	b.n	8003424 <HAL_RCC_ClockConfig+0x148>
 8003404:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003408:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800340c:	fa93 f3a3 	rbit	r3, r3
 8003410:	647b      	str	r3, [r7, #68]	@ 0x44
 8003412:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003416:	643b      	str	r3, [r7, #64]	@ 0x40
 8003418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003420:	4b46      	ldr	r3, [pc, #280]	@ (800353c <HAL_RCC_ClockConfig+0x260>)
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003428:	63ba      	str	r2, [r7, #56]	@ 0x38
 800342a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800342c:	fa92 f2a2 	rbit	r2, r2
 8003430:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003432:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003434:	fab2 f282 	clz	r2, r2
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	f042 0220 	orr.w	r2, r2, #32
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	f002 021f 	and.w	r2, r2, #31
 8003444:	2101      	movs	r1, #1
 8003446:	fa01 f202 	lsl.w	r2, r1, r2
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d13a      	bne.n	80034c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0b2      	b.n	80035ba <HAL_RCC_ClockConfig+0x2de>
 8003454:	2302      	movs	r3, #2
 8003456:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d102      	bne.n	800347c <HAL_RCC_ClockConfig+0x1a0>
 8003476:	4b31      	ldr	r3, [pc, #196]	@ (800353c <HAL_RCC_ClockConfig+0x260>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	e00d      	b.n	8003498 <HAL_RCC_ClockConfig+0x1bc>
 800347c:	2302      	movs	r3, #2
 800347e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	627b      	str	r3, [r7, #36]	@ 0x24
 8003488:	2302      	movs	r3, #2
 800348a:	623b      	str	r3, [r7, #32]
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	61fb      	str	r3, [r7, #28]
 8003494:	4b29      	ldr	r3, [pc, #164]	@ (800353c <HAL_RCC_ClockConfig+0x260>)
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	2202      	movs	r2, #2
 800349a:	61ba      	str	r2, [r7, #24]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	fa92 f2a2 	rbit	r2, r2
 80034a2:	617a      	str	r2, [r7, #20]
  return result;
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	fab2 f282 	clz	r2, r2
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	f042 0220 	orr.w	r2, r2, #32
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	f002 021f 	and.w	r2, r2, #31
 80034b6:	2101      	movs	r1, #1
 80034b8:	fa01 f202 	lsl.w	r2, r1, r2
 80034bc:	4013      	ands	r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e079      	b.n	80035ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034c6:	4b1d      	ldr	r3, [pc, #116]	@ (800353c <HAL_RCC_ClockConfig+0x260>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f023 0203 	bic.w	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	491a      	ldr	r1, [pc, #104]	@ (800353c <HAL_RCC_ClockConfig+0x260>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d8:	f7fe fa22 	bl	8001920 <HAL_GetTick>
 80034dc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e0:	f7fe fa1e 	bl	8001920 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e061      	b.n	80035ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	4b11      	ldr	r3, [pc, #68]	@ (800353c <HAL_RCC_ClockConfig+0x260>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 020c 	and.w	r2, r3, #12
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	429a      	cmp	r2, r3
 8003506:	d1eb      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003508:	4b0b      	ldr	r3, [pc, #44]	@ (8003538 <HAL_RCC_ClockConfig+0x25c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d214      	bcs.n	8003540 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b08      	ldr	r3, [pc, #32]	@ (8003538 <HAL_RCC_ClockConfig+0x25c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 0207 	bic.w	r2, r3, #7
 800351e:	4906      	ldr	r1, [pc, #24]	@ (8003538 <HAL_RCC_ClockConfig+0x25c>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b04      	ldr	r3, [pc, #16]	@ (8003538 <HAL_RCC_ClockConfig+0x25c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d005      	beq.n	8003540 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e040      	b.n	80035ba <HAL_RCC_ClockConfig+0x2de>
 8003538:	40022000 	.word	0x40022000
 800353c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800354c:	4b1d      	ldr	r3, [pc, #116]	@ (80035c4 <HAL_RCC_ClockConfig+0x2e8>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	491a      	ldr	r1, [pc, #104]	@ (80035c4 <HAL_RCC_ClockConfig+0x2e8>)
 800355a:	4313      	orrs	r3, r2
 800355c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d009      	beq.n	800357e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800356a:	4b16      	ldr	r3, [pc, #88]	@ (80035c4 <HAL_RCC_ClockConfig+0x2e8>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4912      	ldr	r1, [pc, #72]	@ (80035c4 <HAL_RCC_ClockConfig+0x2e8>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800357e:	f000 f829 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8003582:	4601      	mov	r1, r0
 8003584:	4b0f      	ldr	r3, [pc, #60]	@ (80035c4 <HAL_RCC_ClockConfig+0x2e8>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800358c:	22f0      	movs	r2, #240	@ 0xf0
 800358e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	fa92 f2a2 	rbit	r2, r2
 8003596:	60fa      	str	r2, [r7, #12]
  return result;
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	fab2 f282 	clz	r2, r2
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	40d3      	lsrs	r3, r2
 80035a2:	4a09      	ldr	r2, [pc, #36]	@ (80035c8 <HAL_RCC_ClockConfig+0x2ec>)
 80035a4:	5cd3      	ldrb	r3, [r2, r3]
 80035a6:	fa21 f303 	lsr.w	r3, r1, r3
 80035aa:	4a08      	ldr	r2, [pc, #32]	@ (80035cc <HAL_RCC_ClockConfig+0x2f0>)
 80035ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035ae:	4b08      	ldr	r3, [pc, #32]	@ (80035d0 <HAL_RCC_ClockConfig+0x2f4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe f970 	bl	8001898 <HAL_InitTick>
  
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3778      	adds	r7, #120	@ 0x78
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000
 80035c8:	08006c54 	.word	0x08006c54
 80035cc:	20000000 	.word	0x20000000
 80035d0:	20000004 	.word	0x20000004

080035d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b08b      	sub	sp, #44	@ 0x2c
 80035d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	2300      	movs	r3, #0
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80035ee:	4b29      	ldr	r3, [pc, #164]	@ (8003694 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d002      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x30>
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d003      	beq.n	800360a <HAL_RCC_GetSysClockFreq+0x36>
 8003602:	e03c      	b.n	800367e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003604:	4b24      	ldr	r3, [pc, #144]	@ (8003698 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003606:	623b      	str	r3, [r7, #32]
      break;
 8003608:	e03c      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003610:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003614:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	fa92 f2a2 	rbit	r2, r2
 800361c:	607a      	str	r2, [r7, #4]
  return result;
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	fab2 f282 	clz	r2, r2
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	40d3      	lsrs	r3, r2
 8003628:	4a1c      	ldr	r2, [pc, #112]	@ (800369c <HAL_RCC_GetSysClockFreq+0xc8>)
 800362a:	5cd3      	ldrb	r3, [r2, r3]
 800362c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800362e:	4b19      	ldr	r3, [pc, #100]	@ (8003694 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	220f      	movs	r2, #15
 8003638:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	fa92 f2a2 	rbit	r2, r2
 8003640:	60fa      	str	r2, [r7, #12]
  return result;
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	fab2 f282 	clz	r2, r2
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	40d3      	lsrs	r3, r2
 800364c:	4a14      	ldr	r2, [pc, #80]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800364e:	5cd3      	ldrb	r3, [r2, r3]
 8003650:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800365c:	4a0e      	ldr	r2, [pc, #56]	@ (8003698 <HAL_RCC_GetSysClockFreq+0xc4>)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	fbb2 f2f3 	udiv	r2, r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	fb02 f303 	mul.w	r3, r2, r3
 800366a:	627b      	str	r3, [r7, #36]	@ 0x24
 800366c:	e004      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	4a0c      	ldr	r2, [pc, #48]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003672:	fb02 f303 	mul.w	r3, r2, r3
 8003676:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	623b      	str	r3, [r7, #32]
      break;
 800367c:	e002      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800367e:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003680:	623b      	str	r3, [r7, #32]
      break;
 8003682:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003684:	6a3b      	ldr	r3, [r7, #32]
}
 8003686:	4618      	mov	r0, r3
 8003688:	372c      	adds	r7, #44	@ 0x2c
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000
 8003698:	007a1200 	.word	0x007a1200
 800369c:	08006c6c 	.word	0x08006c6c
 80036a0:	08006c7c 	.word	0x08006c7c
 80036a4:	003d0900 	.word	0x003d0900

080036a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000000 	.word	0x20000000

080036c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80036c6:	f7ff ffef 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036ca:	4601      	mov	r1, r0
 80036cc:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036d4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80036d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	fa92 f2a2 	rbit	r2, r2
 80036e0:	603a      	str	r2, [r7, #0]
  return result;
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	fab2 f282 	clz	r2, r2
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	40d3      	lsrs	r3, r2
 80036ec:	4a04      	ldr	r2, [pc, #16]	@ (8003700 <HAL_RCC_GetPCLK1Freq+0x40>)
 80036ee:	5cd3      	ldrb	r3, [r2, r3]
 80036f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80036f4:	4618      	mov	r0, r3
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40021000 	.word	0x40021000
 8003700:	08006c64 	.word	0x08006c64

08003704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800370a:	f7ff ffcd 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 800370e:	4601      	mov	r1, r0
 8003710:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003718:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800371c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	fa92 f2a2 	rbit	r2, r2
 8003724:	603a      	str	r2, [r7, #0]
  return result;
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	fab2 f282 	clz	r2, r2
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	40d3      	lsrs	r3, r2
 8003730:	4a04      	ldr	r2, [pc, #16]	@ (8003744 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003732:	5cd3      	ldrb	r3, [r2, r3]
 8003734:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000
 8003744:	08006c64 	.word	0x08006c64

08003748 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b092      	sub	sp, #72	@ 0x48
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003758:	2300      	movs	r3, #0
 800375a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80d4 	beq.w	8003914 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376c:	4b4e      	ldr	r3, [pc, #312]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10e      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003778:	4b4b      	ldr	r3, [pc, #300]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	4a4a      	ldr	r2, [pc, #296]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003782:	61d3      	str	r3, [r2, #28]
 8003784:	4b48      	ldr	r3, [pc, #288]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003796:	4b45      	ldr	r3, [pc, #276]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d118      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a2:	4b42      	ldr	r3, [pc, #264]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a41      	ldr	r2, [pc, #260]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ae:	f7fe f8b7 	bl	8001920 <HAL_GetTick>
 80037b2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	e008      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b6:	f7fe f8b3 	bl	8001920 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b64      	cmp	r3, #100	@ 0x64
 80037c2:	d901      	bls.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e14b      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c8:	4b38      	ldr	r3, [pc, #224]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037d4:	4b34      	ldr	r3, [pc, #208]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8084 	beq.w	80038ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d07c      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037f4:	4b2c      	ldr	r3, [pc, #176]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003802:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800380c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	4b26      	ldr	r3, [pc, #152]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	461a      	mov	r2, r3
 800381e:	2301      	movs	r3, #1
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003826:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	4b1d      	ldr	r3, [pc, #116]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	461a      	mov	r2, r3
 8003842:	2300      	movs	r3, #0
 8003844:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003846:	4a18      	ldr	r2, [pc, #96]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800384a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800384c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d04b      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003856:	f7fe f863 	bl	8001920 <HAL_GetTick>
 800385a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385c:	e00a      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385e:	f7fe f85f 	bl	8001920 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e0f5      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003874:	2302      	movs	r3, #2
 8003876:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003880:	2302      	movs	r3, #2
 8003882:	623b      	str	r3, [r7, #32]
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	fa93 f3a3 	rbit	r3, r3
 800388a:	61fb      	str	r3, [r7, #28]
  return result;
 800388c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388e:	fab3 f383 	clz	r3, r3
 8003892:	b2db      	uxtb	r3, r3
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f043 0302 	orr.w	r3, r3, #2
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d108      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80038a2:	4b01      	ldr	r3, [pc, #4]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	e00d      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40007000 	.word	0x40007000
 80038b0:	10908100 	.word	0x10908100
 80038b4:	2302      	movs	r3, #2
 80038b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	4b69      	ldr	r3, [pc, #420]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	2202      	movs	r2, #2
 80038c6:	613a      	str	r2, [r7, #16]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	fa92 f2a2 	rbit	r2, r2
 80038ce:	60fa      	str	r2, [r7, #12]
  return result;
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	fab2 f282 	clz	r2, r2
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	f002 021f 	and.w	r2, r2, #31
 80038e2:	2101      	movs	r1, #1
 80038e4:	fa01 f202 	lsl.w	r2, r1, r2
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0b7      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80038ee:	4b5e      	ldr	r3, [pc, #376]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	495b      	ldr	r1, [pc, #364]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003900:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003904:	2b01      	cmp	r3, #1
 8003906:	d105      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003908:	4b57      	ldr	r3, [pc, #348]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	4a56      	ldr	r2, [pc, #344]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800390e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003912:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003920:	4b51      	ldr	r3, [pc, #324]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003924:	f023 0203 	bic.w	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	494e      	ldr	r1, [pc, #312]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800392e:	4313      	orrs	r3, r2
 8003930:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d008      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800393e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003942:	f023 0210 	bic.w	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	4947      	ldr	r1, [pc, #284]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800394c:	4313      	orrs	r3, r2
 800394e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800395c:	4b42      	ldr	r3, [pc, #264]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003968:	493f      	ldr	r1, [pc, #252]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800396a:	4313      	orrs	r3, r2
 800396c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800397a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397e:	f023 0220 	bic.w	r2, r3, #32
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	4938      	ldr	r1, [pc, #224]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003988:	4313      	orrs	r3, r2
 800398a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003998:	4b33      	ldr	r3, [pc, #204]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	4930      	ldr	r1, [pc, #192]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	4929      	ldr	r1, [pc, #164]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80039d4:	4b24      	ldr	r3, [pc, #144]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d8:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	4921      	ldr	r1, [pc, #132]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80039f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	491a      	ldr	r1, [pc, #104]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003a10:	4b15      	ldr	r3, [pc, #84]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a14:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	4912      	ldr	r1, [pc, #72]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a32:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3a:	490b      	ldr	r1, [pc, #44]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003a4c:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a58:	4903      	ldr	r1, [pc, #12]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3748      	adds	r7, #72	@ 0x48
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000

08003a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e09d      	b.n	8003bba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d108      	bne.n	8003a98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a8e:	d009      	beq.n	8003aa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	61da      	str	r2, [r3, #28]
 8003a96:	e005      	b.n	8003aa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd fd56 	bl	8001570 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ada:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ae4:	d902      	bls.n	8003aec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	e002      	b.n	8003af2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003aec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003af0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003afa:	d007      	beq.n	8003b0c <HAL_SPI_Init+0xa0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b04:	d002      	beq.n	8003b0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4e:	ea42 0103 	orr.w	r1, r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b56:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	0c1b      	lsrs	r3, r3, #16
 8003b68:	f003 0204 	and.w	r2, r3, #4
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b88:	ea42 0103 	orr.w	r1, r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ba8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e049      	b.n	8003c68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7fd fd05 	bl	80015f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4610      	mov	r0, r2
 8003c02:	f000 fe47 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e049      	b.n	8003d16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f841 	bl	8003d1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3304      	adds	r3, #4
 8003cac:	4619      	mov	r1, r3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	f000 fdf0 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	e03c      	b.n	8003dda <HAL_TIM_PWM_Start_DMA+0xa6>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d109      	bne.n	8003d7a <HAL_TIM_PWM_Start_DMA+0x46>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	bf0c      	ite	eq
 8003d72:	2301      	moveq	r3, #1
 8003d74:	2300      	movne	r3, #0
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	e02f      	b.n	8003dda <HAL_TIM_PWM_Start_DMA+0xa6>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d109      	bne.n	8003d94 <HAL_TIM_PWM_Start_DMA+0x60>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	e022      	b.n	8003dda <HAL_TIM_PWM_Start_DMA+0xa6>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b0c      	cmp	r3, #12
 8003d98:	d109      	bne.n	8003dae <HAL_TIM_PWM_Start_DMA+0x7a>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	bf0c      	ite	eq
 8003da6:	2301      	moveq	r3, #1
 8003da8:	2300      	movne	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	e015      	b.n	8003dda <HAL_TIM_PWM_Start_DMA+0xa6>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d109      	bne.n	8003dc8 <HAL_TIM_PWM_Start_DMA+0x94>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	e008      	b.n	8003dda <HAL_TIM_PWM_Start_DMA+0xa6>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	bf0c      	ite	eq
 8003dd4:	2301      	moveq	r3, #1
 8003dd6:	2300      	movne	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003dde:	2302      	movs	r3, #2
 8003de0:	e192      	b.n	8004108 <HAL_TIM_PWM_Start_DMA+0x3d4>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d109      	bne.n	8003dfc <HAL_TIM_PWM_Start_DMA+0xc8>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	bf0c      	ite	eq
 8003df4:	2301      	moveq	r3, #1
 8003df6:	2300      	movne	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	e03c      	b.n	8003e76 <HAL_TIM_PWM_Start_DMA+0x142>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d109      	bne.n	8003e16 <HAL_TIM_PWM_Start_DMA+0xe2>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	bf0c      	ite	eq
 8003e0e:	2301      	moveq	r3, #1
 8003e10:	2300      	movne	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	e02f      	b.n	8003e76 <HAL_TIM_PWM_Start_DMA+0x142>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d109      	bne.n	8003e30 <HAL_TIM_PWM_Start_DMA+0xfc>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	bf0c      	ite	eq
 8003e28:	2301      	moveq	r3, #1
 8003e2a:	2300      	movne	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	e022      	b.n	8003e76 <HAL_TIM_PWM_Start_DMA+0x142>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	d109      	bne.n	8003e4a <HAL_TIM_PWM_Start_DMA+0x116>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	bf0c      	ite	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	2300      	movne	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	e015      	b.n	8003e76 <HAL_TIM_PWM_Start_DMA+0x142>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d109      	bne.n	8003e64 <HAL_TIM_PWM_Start_DMA+0x130>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	e008      	b.n	8003e76 <HAL_TIM_PWM_Start_DMA+0x142>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d034      	beq.n	8003ee4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_TIM_PWM_Start_DMA+0x152>
 8003e80:	887b      	ldrh	r3, [r7, #2]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e13e      	b.n	8004108 <HAL_TIM_PWM_Start_DMA+0x3d4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d104      	bne.n	8003e9a <HAL_TIM_PWM_Start_DMA+0x166>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e98:	e026      	b.n	8003ee8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d104      	bne.n	8003eaa <HAL_TIM_PWM_Start_DMA+0x176>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ea8:	e01e      	b.n	8003ee8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d104      	bne.n	8003eba <HAL_TIM_PWM_Start_DMA+0x186>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eb8:	e016      	b.n	8003ee8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b0c      	cmp	r3, #12
 8003ebe:	d104      	bne.n	8003eca <HAL_TIM_PWM_Start_DMA+0x196>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ec8:	e00e      	b.n	8003ee8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b10      	cmp	r3, #16
 8003ece:	d104      	bne.n	8003eda <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ed8:	e006      	b.n	8003ee8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ee2:	e001      	b.n	8003ee8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e10f      	b.n	8004108 <HAL_TIM_PWM_Start_DMA+0x3d4>
  }

  switch (Channel)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b0c      	cmp	r3, #12
 8003eec:	f200 80ae 	bhi.w	800404c <HAL_TIM_PWM_Start_DMA+0x318>
 8003ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f2d 	.word	0x08003f2d
 8003efc:	0800404d 	.word	0x0800404d
 8003f00:	0800404d 	.word	0x0800404d
 8003f04:	0800404d 	.word	0x0800404d
 8003f08:	08003f75 	.word	0x08003f75
 8003f0c:	0800404d 	.word	0x0800404d
 8003f10:	0800404d 	.word	0x0800404d
 8003f14:	0800404d 	.word	0x0800404d
 8003f18:	08003fbd 	.word	0x08003fbd
 8003f1c:	0800404d 	.word	0x0800404d
 8003f20:	0800404d 	.word	0x0800404d
 8003f24:	0800404d 	.word	0x0800404d
 8003f28:	08004005 	.word	0x08004005
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	4a77      	ldr	r2, [pc, #476]	@ (8004110 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003f32:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	4a76      	ldr	r2, [pc, #472]	@ (8004114 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8003f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f40:	4a75      	ldr	r2, [pc, #468]	@ (8004118 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3334      	adds	r3, #52	@ 0x34
 8003f50:	461a      	mov	r2, r3
 8003f52:	887b      	ldrh	r3, [r7, #2]
 8003f54:	f7fd fe6c 	bl	8001c30 <HAL_DMA_Start_IT>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e0d2      	b.n	8004108 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f70:	60da      	str	r2, [r3, #12]
      break;
 8003f72:	e06e      	b.n	8004052 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f78:	4a65      	ldr	r2, [pc, #404]	@ (8004110 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003f7a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	4a64      	ldr	r2, [pc, #400]	@ (8004114 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8003f82:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f88:	4a63      	ldr	r2, [pc, #396]	@ (8004118 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003f8a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3338      	adds	r3, #56	@ 0x38
 8003f98:	461a      	mov	r2, r3
 8003f9a:	887b      	ldrh	r3, [r7, #2]
 8003f9c:	f7fd fe48 	bl	8001c30 <HAL_DMA_Start_IT>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e0ae      	b.n	8004108 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fb8:	60da      	str	r2, [r3, #12]
      break;
 8003fba:	e04a      	b.n	8004052 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc0:	4a53      	ldr	r2, [pc, #332]	@ (8004110 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003fc2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc8:	4a52      	ldr	r2, [pc, #328]	@ (8004114 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8003fca:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	4a51      	ldr	r2, [pc, #324]	@ (8004118 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003fd2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	333c      	adds	r3, #60	@ 0x3c
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	887b      	ldrh	r3, [r7, #2]
 8003fe4:	f7fd fe24 	bl	8001c30 <HAL_DMA_Start_IT>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e08a      	b.n	8004108 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004000:	60da      	str	r2, [r3, #12]
      break;
 8004002:	e026      	b.n	8004052 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004008:	4a41      	ldr	r2, [pc, #260]	@ (8004110 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800400a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004010:	4a40      	ldr	r2, [pc, #256]	@ (8004114 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004012:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	4a3f      	ldr	r2, [pc, #252]	@ (8004118 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800401a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3340      	adds	r3, #64	@ 0x40
 8004028:	461a      	mov	r2, r3
 800402a:	887b      	ldrh	r3, [r7, #2]
 800402c:	f7fd fe00 	bl	8001c30 <HAL_DMA_Start_IT>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e066      	b.n	8004108 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004048:	60da      	str	r2, [r3, #12]
      break;
 800404a:	e002      	b.n	8004052 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	75fb      	strb	r3, [r7, #23]
      break;
 8004050:	bf00      	nop
  }

  if (status == HAL_OK)
 8004052:	7dfb      	ldrb	r3, [r7, #23]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d156      	bne.n	8004106 <HAL_TIM_PWM_Start_DMA+0x3d2>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2201      	movs	r2, #1
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 ffc5 	bl	8004ff0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2c      	ldr	r2, [pc, #176]	@ (800411c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00e      	beq.n	800408e <HAL_TIM_PWM_Start_DMA+0x35a>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2a      	ldr	r2, [pc, #168]	@ (8004120 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d009      	beq.n	800408e <HAL_TIM_PWM_Start_DMA+0x35a>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a29      	ldr	r2, [pc, #164]	@ (8004124 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d004      	beq.n	800408e <HAL_TIM_PWM_Start_DMA+0x35a>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a27      	ldr	r2, [pc, #156]	@ (8004128 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d101      	bne.n	8004092 <HAL_TIM_PWM_Start_DMA+0x35e>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_TIM_PWM_Start_DMA+0x360>
 8004092:	2300      	movs	r3, #0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a1b      	ldr	r2, [pc, #108]	@ (800411c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d009      	beq.n	80040c6 <HAL_TIM_PWM_Start_DMA+0x392>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ba:	d004      	beq.n	80040c6 <HAL_TIM_PWM_Start_DMA+0x392>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a17      	ldr	r2, [pc, #92]	@ (8004120 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d115      	bne.n	80040f2 <HAL_TIM_PWM_Start_DMA+0x3be>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	4b17      	ldr	r3, [pc, #92]	@ (800412c <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2b06      	cmp	r3, #6
 80040d6:	d015      	beq.n	8004104 <HAL_TIM_PWM_Start_DMA+0x3d0>
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040de:	d011      	beq.n	8004104 <HAL_TIM_PWM_Start_DMA+0x3d0>
      {
        __HAL_TIM_ENABLE(htim);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f0:	e008      	b.n	8004104 <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0201 	orr.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	e000      	b.n	8004106 <HAL_TIM_PWM_Start_DMA+0x3d2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004104:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004106:	7dfb      	ldrb	r3, [r7, #23]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	08004785 	.word	0x08004785
 8004114:	0800482d 	.word	0x0800482d
 8004118:	080046f3 	.word	0x080046f3
 800411c:	40012c00 	.word	0x40012c00
 8004120:	40014000 	.word	0x40014000
 8004124:	40014400 	.word	0x40014400
 8004128:	40014800 	.word	0x40014800
 800412c:	00010007 	.word	0x00010007

08004130 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b0c      	cmp	r3, #12
 8004142:	d855      	bhi.n	80041f0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004144:	a201      	add	r2, pc, #4	@ (adr r2, 800414c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414a:	bf00      	nop
 800414c:	08004181 	.word	0x08004181
 8004150:	080041f1 	.word	0x080041f1
 8004154:	080041f1 	.word	0x080041f1
 8004158:	080041f1 	.word	0x080041f1
 800415c:	0800419d 	.word	0x0800419d
 8004160:	080041f1 	.word	0x080041f1
 8004164:	080041f1 	.word	0x080041f1
 8004168:	080041f1 	.word	0x080041f1
 800416c:	080041b9 	.word	0x080041b9
 8004170:	080041f1 	.word	0x080041f1
 8004174:	080041f1 	.word	0x080041f1
 8004178:	080041f1 	.word	0x080041f1
 800417c:	080041d5 	.word	0x080041d5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800418e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004194:	4618      	mov	r0, r3
 8004196:	f7fd fdaa 	bl	8001cee <HAL_DMA_Abort_IT>
      break;
 800419a:	e02c      	b.n	80041f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fd fd9c 	bl	8001cee <HAL_DMA_Abort_IT>
      break;
 80041b6:	e01e      	b.n	80041f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fd fd8e 	bl	8001cee <HAL_DMA_Abort_IT>
      break;
 80041d2:	e010      	b.n	80041f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fd fd80 	bl	8001cee <HAL_DMA_Abort_IT>
      break;
 80041ee:	e002      	b.n	80041f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      break;
 80041f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d17b      	bne.n	80042f4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2200      	movs	r2, #0
 8004202:	6839      	ldr	r1, [r7, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fef3 	bl	8004ff0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a3c      	ldr	r2, [pc, #240]	@ (8004300 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00e      	beq.n	8004232 <HAL_TIM_PWM_Stop_DMA+0x102>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a3a      	ldr	r2, [pc, #232]	@ (8004304 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d009      	beq.n	8004232 <HAL_TIM_PWM_Stop_DMA+0x102>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a39      	ldr	r2, [pc, #228]	@ (8004308 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d004      	beq.n	8004232 <HAL_TIM_PWM_Stop_DMA+0x102>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a37      	ldr	r2, [pc, #220]	@ (800430c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d101      	bne.n	8004236 <HAL_TIM_PWM_Stop_DMA+0x106>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <HAL_TIM_PWM_Stop_DMA+0x108>
 8004236:	2300      	movs	r3, #0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d017      	beq.n	800426c <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6a1a      	ldr	r2, [r3, #32]
 8004242:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10f      	bne.n	800426c <HAL_TIM_PWM_Stop_DMA+0x13c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6a1a      	ldr	r2, [r3, #32]
 8004252:	f240 4344 	movw	r3, #1092	@ 0x444
 8004256:	4013      	ands	r3, r2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d107      	bne.n	800426c <HAL_TIM_PWM_Stop_DMA+0x13c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800426a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6a1a      	ldr	r2, [r3, #32]
 8004272:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10f      	bne.n	800429c <HAL_TIM_PWM_Stop_DMA+0x16c>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6a1a      	ldr	r2, [r3, #32]
 8004282:	f240 4344 	movw	r3, #1092	@ 0x444
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d107      	bne.n	800429c <HAL_TIM_PWM_Stop_DMA+0x16c>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0201 	bic.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <HAL_TIM_PWM_Stop_DMA+0x17c>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042aa:	e023      	b.n	80042f4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d104      	bne.n	80042bc <HAL_TIM_PWM_Stop_DMA+0x18c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042ba:	e01b      	b.n	80042f4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d104      	bne.n	80042cc <HAL_TIM_PWM_Stop_DMA+0x19c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042ca:	e013      	b.n	80042f4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d104      	bne.n	80042dc <HAL_TIM_PWM_Stop_DMA+0x1ac>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042da:	e00b      	b.n	80042f4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b10      	cmp	r3, #16
 80042e0:	d104      	bne.n	80042ec <HAL_TIM_PWM_Stop_DMA+0x1bc>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042ea:	e003      	b.n	80042f4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40012c00 	.word	0x40012c00
 8004304:	40014000 	.word	0x40014000
 8004308:	40014400 	.word	0x40014400
 800430c:	40014800 	.word	0x40014800

08004310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800432a:	2302      	movs	r3, #2
 800432c:	e0ff      	b.n	800452e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b14      	cmp	r3, #20
 800433a:	f200 80f0 	bhi.w	800451e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800433e:	a201      	add	r2, pc, #4	@ (adr r2, 8004344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004344:	08004399 	.word	0x08004399
 8004348:	0800451f 	.word	0x0800451f
 800434c:	0800451f 	.word	0x0800451f
 8004350:	0800451f 	.word	0x0800451f
 8004354:	080043d9 	.word	0x080043d9
 8004358:	0800451f 	.word	0x0800451f
 800435c:	0800451f 	.word	0x0800451f
 8004360:	0800451f 	.word	0x0800451f
 8004364:	0800441b 	.word	0x0800441b
 8004368:	0800451f 	.word	0x0800451f
 800436c:	0800451f 	.word	0x0800451f
 8004370:	0800451f 	.word	0x0800451f
 8004374:	0800445b 	.word	0x0800445b
 8004378:	0800451f 	.word	0x0800451f
 800437c:	0800451f 	.word	0x0800451f
 8004380:	0800451f 	.word	0x0800451f
 8004384:	0800449d 	.word	0x0800449d
 8004388:	0800451f 	.word	0x0800451f
 800438c:	0800451f 	.word	0x0800451f
 8004390:	0800451f 	.word	0x0800451f
 8004394:	080044dd 	.word	0x080044dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fae6 	bl	8004970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0208 	orr.w	r2, r2, #8
 80043b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0204 	bic.w	r2, r2, #4
 80043c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6999      	ldr	r1, [r3, #24]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	619a      	str	r2, [r3, #24]
      break;
 80043d6:	e0a5      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fb4c 	bl	8004a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6999      	ldr	r1, [r3, #24]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	021a      	lsls	r2, r3, #8
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	619a      	str	r2, [r3, #24]
      break;
 8004418:	e084      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fbab 	bl	8004b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0208 	orr.w	r2, r2, #8
 8004434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0204 	bic.w	r2, r2, #4
 8004444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69d9      	ldr	r1, [r3, #28]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	61da      	str	r2, [r3, #28]
      break;
 8004458:	e064      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fc09 	bl	8004c78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69d9      	ldr	r1, [r3, #28]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	021a      	lsls	r2, r3, #8
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	61da      	str	r2, [r3, #28]
      break;
 800449a:	e043      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fc4c 	bl	8004d40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0208 	orr.w	r2, r2, #8
 80044b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0204 	bic.w	r2, r2, #4
 80044c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	691a      	ldr	r2, [r3, #16]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80044da:	e023      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fc8a 	bl	8004dfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004506:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	021a      	lsls	r2, r3, #8
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800451c:	e002      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
      break;
 8004522:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800452c:	7dfb      	ldrb	r3, [r7, #23]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop

08004538 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_TIM_ConfigClockSource+0x1c>
 8004550:	2302      	movs	r3, #2
 8004552:	e0b6      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x18a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004572:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800457e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004590:	d03e      	beq.n	8004610 <HAL_TIM_ConfigClockSource+0xd8>
 8004592:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004596:	f200 8087 	bhi.w	80046a8 <HAL_TIM_ConfigClockSource+0x170>
 800459a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800459e:	f000 8086 	beq.w	80046ae <HAL_TIM_ConfigClockSource+0x176>
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a6:	d87f      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x170>
 80045a8:	2b70      	cmp	r3, #112	@ 0x70
 80045aa:	d01a      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0xaa>
 80045ac:	2b70      	cmp	r3, #112	@ 0x70
 80045ae:	d87b      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x170>
 80045b0:	2b60      	cmp	r3, #96	@ 0x60
 80045b2:	d050      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x11e>
 80045b4:	2b60      	cmp	r3, #96	@ 0x60
 80045b6:	d877      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x170>
 80045b8:	2b50      	cmp	r3, #80	@ 0x50
 80045ba:	d03c      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0xfe>
 80045bc:	2b50      	cmp	r3, #80	@ 0x50
 80045be:	d873      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x170>
 80045c0:	2b40      	cmp	r3, #64	@ 0x40
 80045c2:	d058      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x13e>
 80045c4:	2b40      	cmp	r3, #64	@ 0x40
 80045c6:	d86f      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x170>
 80045c8:	2b30      	cmp	r3, #48	@ 0x30
 80045ca:	d064      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15e>
 80045cc:	2b30      	cmp	r3, #48	@ 0x30
 80045ce:	d86b      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x170>
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d060      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15e>
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d867      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x170>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d05c      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15e>
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d05a      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15e>
 80045e0:	e062      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045f2:	f000 fcdd 	bl	8004fb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	609a      	str	r2, [r3, #8]
      break;
 800460e:	e04f      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004620:	f000 fcc6 	bl	8004fb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004632:	609a      	str	r2, [r3, #8]
      break;
 8004634:	e03c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004642:	461a      	mov	r2, r3
 8004644:	f000 fc3a 	bl	8004ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2150      	movs	r1, #80	@ 0x50
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fc93 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 8004654:	e02c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004662:	461a      	mov	r2, r3
 8004664:	f000 fc59 	bl	8004f1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2160      	movs	r1, #96	@ 0x60
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fc83 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 8004674:	e01c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004682:	461a      	mov	r2, r3
 8004684:	f000 fc1a 	bl	8004ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2140      	movs	r1, #64	@ 0x40
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fc73 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 8004694:	e00c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f000 fc6a 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 80046a6:	e003      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
      break;
 80046ac:	e000      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80046ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	429a      	cmp	r2, r3
 8004708:	d107      	bne.n	800471a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004718:	e02a      	b.n	8004770 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	429a      	cmp	r2, r3
 8004722:	d107      	bne.n	8004734 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2202      	movs	r2, #2
 8004728:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004732:	e01d      	b.n	8004770 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d107      	bne.n	800474e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2204      	movs	r2, #4
 8004742:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800474c:	e010      	b.n	8004770 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	429a      	cmp	r2, r3
 8004756:	d107      	bne.n	8004768 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2208      	movs	r2, #8
 800475c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004766:	e003      	b.n	8004770 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff ffb4 	bl	80046de <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	771a      	strb	r2, [r3, #28]
}
 800477c:	bf00      	nop
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	429a      	cmp	r2, r3
 800479a:	d10b      	bne.n	80047b4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d136      	bne.n	8004818 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047b2:	e031      	b.n	8004818 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d10b      	bne.n	80047d6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2202      	movs	r2, #2
 80047c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d125      	bne.n	8004818 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047d4:	e020      	b.n	8004818 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d10b      	bne.n	80047f8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2204      	movs	r2, #4
 80047e4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d114      	bne.n	8004818 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047f6:	e00f      	b.n	8004818 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d10a      	bne.n	8004818 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2208      	movs	r2, #8
 8004806:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d103      	bne.n	8004818 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7fc faf5 	bl	8000e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	771a      	strb	r2, [r3, #28]
}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	d103      	bne.n	800484c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	771a      	strb	r2, [r3, #28]
 800484a:	e019      	b.n	8004880 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	429a      	cmp	r2, r3
 8004854:	d103      	bne.n	800485e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2202      	movs	r2, #2
 800485a:	771a      	strb	r2, [r3, #28]
 800485c:	e010      	b.n	8004880 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	429a      	cmp	r2, r3
 8004866:	d103      	bne.n	8004870 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2204      	movs	r2, #4
 800486c:	771a      	strb	r2, [r3, #28]
 800486e:	e007      	b.n	8004880 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	429a      	cmp	r2, r3
 8004878:	d102      	bne.n	8004880 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2208      	movs	r2, #8
 800487e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f7ff ff22 	bl	80046ca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	771a      	strb	r2, [r3, #28]
}
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a2e      	ldr	r2, [pc, #184]	@ (8004960 <TIM_Base_SetConfig+0xcc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d003      	beq.n	80048b4 <TIM_Base_SetConfig+0x20>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b2:	d108      	bne.n	80048c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a25      	ldr	r2, [pc, #148]	@ (8004960 <TIM_Base_SetConfig+0xcc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00f      	beq.n	80048ee <TIM_Base_SetConfig+0x5a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d4:	d00b      	beq.n	80048ee <TIM_Base_SetConfig+0x5a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a22      	ldr	r2, [pc, #136]	@ (8004964 <TIM_Base_SetConfig+0xd0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d007      	beq.n	80048ee <TIM_Base_SetConfig+0x5a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a21      	ldr	r2, [pc, #132]	@ (8004968 <TIM_Base_SetConfig+0xd4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d003      	beq.n	80048ee <TIM_Base_SetConfig+0x5a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a20      	ldr	r2, [pc, #128]	@ (800496c <TIM_Base_SetConfig+0xd8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d108      	bne.n	8004900 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a0e      	ldr	r2, [pc, #56]	@ (8004960 <TIM_Base_SetConfig+0xcc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00b      	beq.n	8004944 <TIM_Base_SetConfig+0xb0>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a0d      	ldr	r2, [pc, #52]	@ (8004964 <TIM_Base_SetConfig+0xd0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d007      	beq.n	8004944 <TIM_Base_SetConfig+0xb0>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a0c      	ldr	r2, [pc, #48]	@ (8004968 <TIM_Base_SetConfig+0xd4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d003      	beq.n	8004944 <TIM_Base_SetConfig+0xb0>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a0b      	ldr	r2, [pc, #44]	@ (800496c <TIM_Base_SetConfig+0xd8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d103      	bne.n	800494c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	615a      	str	r2, [r3, #20]
}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40012c00 	.word	0x40012c00
 8004964:	40014000 	.word	0x40014000
 8004968:	40014400 	.word	0x40014400
 800496c:	40014800 	.word	0x40014800

08004970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	f023 0201 	bic.w	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800499e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f023 0302 	bic.w	r3, r3, #2
 80049bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a28      	ldr	r2, [pc, #160]	@ (8004a6c <TIM_OC1_SetConfig+0xfc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00b      	beq.n	80049e8 <TIM_OC1_SetConfig+0x78>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a27      	ldr	r2, [pc, #156]	@ (8004a70 <TIM_OC1_SetConfig+0x100>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d007      	beq.n	80049e8 <TIM_OC1_SetConfig+0x78>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a26      	ldr	r2, [pc, #152]	@ (8004a74 <TIM_OC1_SetConfig+0x104>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d003      	beq.n	80049e8 <TIM_OC1_SetConfig+0x78>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a25      	ldr	r2, [pc, #148]	@ (8004a78 <TIM_OC1_SetConfig+0x108>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d10c      	bne.n	8004a02 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f023 0308 	bic.w	r3, r3, #8
 80049ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f023 0304 	bic.w	r3, r3, #4
 8004a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a19      	ldr	r2, [pc, #100]	@ (8004a6c <TIM_OC1_SetConfig+0xfc>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00b      	beq.n	8004a22 <TIM_OC1_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a18      	ldr	r2, [pc, #96]	@ (8004a70 <TIM_OC1_SetConfig+0x100>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <TIM_OC1_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a17      	ldr	r2, [pc, #92]	@ (8004a74 <TIM_OC1_SetConfig+0x104>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d003      	beq.n	8004a22 <TIM_OC1_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a16      	ldr	r2, [pc, #88]	@ (8004a78 <TIM_OC1_SetConfig+0x108>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d111      	bne.n	8004a46 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	621a      	str	r2, [r3, #32]
}
 8004a60:	bf00      	nop
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	40012c00 	.word	0x40012c00
 8004a70:	40014000 	.word	0x40014000
 8004a74:	40014400 	.word	0x40014400
 8004a78:	40014800 	.word	0x40014800

08004a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f023 0210 	bic.w	r2, r3, #16
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	021b      	lsls	r3, r3, #8
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0320 	bic.w	r3, r3, #32
 8004aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a24      	ldr	r2, [pc, #144]	@ (8004b6c <TIM_OC2_SetConfig+0xf0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10d      	bne.n	8004afc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004afa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a1b      	ldr	r2, [pc, #108]	@ (8004b6c <TIM_OC2_SetConfig+0xf0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00b      	beq.n	8004b1c <TIM_OC2_SetConfig+0xa0>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a1a      	ldr	r2, [pc, #104]	@ (8004b70 <TIM_OC2_SetConfig+0xf4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d007      	beq.n	8004b1c <TIM_OC2_SetConfig+0xa0>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a19      	ldr	r2, [pc, #100]	@ (8004b74 <TIM_OC2_SetConfig+0xf8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <TIM_OC2_SetConfig+0xa0>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a18      	ldr	r2, [pc, #96]	@ (8004b78 <TIM_OC2_SetConfig+0xfc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d113      	bne.n	8004b44 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b22:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b2a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	621a      	str	r2, [r3, #32]
}
 8004b5e:	bf00      	nop
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40014000 	.word	0x40014000
 8004b74:	40014400 	.word	0x40014400
 8004b78:	40014800 	.word	0x40014800

08004b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a23      	ldr	r2, [pc, #140]	@ (8004c68 <TIM_OC3_SetConfig+0xec>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d10d      	bne.n	8004bfa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bf8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8004c68 <TIM_OC3_SetConfig+0xec>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00b      	beq.n	8004c1a <TIM_OC3_SetConfig+0x9e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a19      	ldr	r2, [pc, #100]	@ (8004c6c <TIM_OC3_SetConfig+0xf0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d007      	beq.n	8004c1a <TIM_OC3_SetConfig+0x9e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a18      	ldr	r2, [pc, #96]	@ (8004c70 <TIM_OC3_SetConfig+0xf4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_OC3_SetConfig+0x9e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a17      	ldr	r2, [pc, #92]	@ (8004c74 <TIM_OC3_SetConfig+0xf8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d113      	bne.n	8004c42 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	40012c00 	.word	0x40012c00
 8004c6c:	40014000 	.word	0x40014000
 8004c70:	40014400 	.word	0x40014400
 8004c74:	40014800 	.word	0x40014800

08004c78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	021b      	lsls	r3, r3, #8
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	031b      	lsls	r3, r3, #12
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a16      	ldr	r2, [pc, #88]	@ (8004d30 <TIM_OC4_SetConfig+0xb8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00b      	beq.n	8004cf4 <TIM_OC4_SetConfig+0x7c>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a15      	ldr	r2, [pc, #84]	@ (8004d34 <TIM_OC4_SetConfig+0xbc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d007      	beq.n	8004cf4 <TIM_OC4_SetConfig+0x7c>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a14      	ldr	r2, [pc, #80]	@ (8004d38 <TIM_OC4_SetConfig+0xc0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d003      	beq.n	8004cf4 <TIM_OC4_SetConfig+0x7c>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a13      	ldr	r2, [pc, #76]	@ (8004d3c <TIM_OC4_SetConfig+0xc4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d109      	bne.n	8004d08 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	019b      	lsls	r3, r3, #6
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	621a      	str	r2, [r3, #32]
}
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40012c00 	.word	0x40012c00
 8004d34:	40014000 	.word	0x40014000
 8004d38:	40014400 	.word	0x40014400
 8004d3c:	40014800 	.word	0x40014800

08004d40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	041b      	lsls	r3, r3, #16
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a15      	ldr	r2, [pc, #84]	@ (8004dec <TIM_OC5_SetConfig+0xac>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00b      	beq.n	8004db2 <TIM_OC5_SetConfig+0x72>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a14      	ldr	r2, [pc, #80]	@ (8004df0 <TIM_OC5_SetConfig+0xb0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d007      	beq.n	8004db2 <TIM_OC5_SetConfig+0x72>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a13      	ldr	r2, [pc, #76]	@ (8004df4 <TIM_OC5_SetConfig+0xb4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d003      	beq.n	8004db2 <TIM_OC5_SetConfig+0x72>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a12      	ldr	r2, [pc, #72]	@ (8004df8 <TIM_OC5_SetConfig+0xb8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d109      	bne.n	8004dc6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004db8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	021b      	lsls	r3, r3, #8
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	621a      	str	r2, [r3, #32]
}
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40014400 	.word	0x40014400
 8004df8:	40014800 	.word	0x40014800

08004dfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	021b      	lsls	r3, r3, #8
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	051b      	lsls	r3, r3, #20
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a16      	ldr	r2, [pc, #88]	@ (8004eac <TIM_OC6_SetConfig+0xb0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00b      	beq.n	8004e70 <TIM_OC6_SetConfig+0x74>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a15      	ldr	r2, [pc, #84]	@ (8004eb0 <TIM_OC6_SetConfig+0xb4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d007      	beq.n	8004e70 <TIM_OC6_SetConfig+0x74>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a14      	ldr	r2, [pc, #80]	@ (8004eb4 <TIM_OC6_SetConfig+0xb8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_OC6_SetConfig+0x74>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a13      	ldr	r2, [pc, #76]	@ (8004eb8 <TIM_OC6_SetConfig+0xbc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d109      	bne.n	8004e84 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	029b      	lsls	r3, r3, #10
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	621a      	str	r2, [r3, #32]
}
 8004e9e:	bf00      	nop
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40012c00 	.word	0x40012c00
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40014400 	.word	0x40014400
 8004eb8:	40014800 	.word	0x40014800

08004ebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f023 0201 	bic.w	r2, r3, #1
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 030a 	bic.w	r3, r3, #10
 8004ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b087      	sub	sp, #28
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	f023 0210 	bic.w	r2, r3, #16
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	031b      	lsls	r3, r3, #12
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f043 0307 	orr.w	r3, r3, #7
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	609a      	str	r2, [r3, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	021a      	lsls	r2, r3, #8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	609a      	str	r2, [r3, #8]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	2201      	movs	r2, #1
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a1a      	ldr	r2, [r3, #32]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	43db      	mvns	r3, r3
 8005012:	401a      	ands	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a1a      	ldr	r2, [r3, #32]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f003 031f 	and.w	r3, r3, #31
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	fa01 f303 	lsl.w	r3, r1, r3
 8005028:	431a      	orrs	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	621a      	str	r2, [r3, #32]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005050:	2302      	movs	r3, #2
 8005052:	e04f      	b.n	80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a21      	ldr	r2, [pc, #132]	@ (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d108      	bne.n	8005090 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005084:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005096:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a14      	ldr	r2, [pc, #80]	@ (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d009      	beq.n	80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050bc:	d004      	beq.n	80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a10      	ldr	r2, [pc, #64]	@ (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d10c      	bne.n	80050e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	40012c00 	.word	0x40012c00
 8005104:	40014000 	.word	0x40014000

08005108 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005120:	2302      	movs	r3, #2
 8005122:	e060      	b.n	80051e6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	041b      	lsls	r3, r3, #16
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a14      	ldr	r2, [pc, #80]	@ (80051f4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d115      	bne.n	80051d4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b2:	051b      	lsls	r3, r3, #20
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40012c00 	.word	0x40012c00

080051f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e040      	b.n	800528c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fc fa6e 	bl	80016fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2224      	movs	r2, #36	@ 0x24
 8005224:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0201 	bic.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f82c 	bl	8005294 <UART_SetConfig>
 800523c:	4603      	mov	r3, r0
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e022      	b.n	800528c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f956 	bl	8005500 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005262:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005272:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f9dd 	bl	8005644 <UART_CheckIdleState>
 800528a:	4603      	mov	r3, r0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b8a      	ldr	r3, [pc, #552]	@ (80054e8 <UART_SetConfig+0x254>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6812      	ldr	r2, [r2, #0]
 80052c6:	6979      	ldr	r1, [r7, #20]
 80052c8:	430b      	orrs	r3, r1
 80052ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	430a      	orrs	r2, r1
 8005304:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a78      	ldr	r2, [pc, #480]	@ (80054ec <UART_SetConfig+0x258>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d120      	bne.n	8005352 <UART_SetConfig+0xbe>
 8005310:	4b77      	ldr	r3, [pc, #476]	@ (80054f0 <UART_SetConfig+0x25c>)
 8005312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005314:	f003 0303 	and.w	r3, r3, #3
 8005318:	2b03      	cmp	r3, #3
 800531a:	d817      	bhi.n	800534c <UART_SetConfig+0xb8>
 800531c:	a201      	add	r2, pc, #4	@ (adr r2, 8005324 <UART_SetConfig+0x90>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	08005335 	.word	0x08005335
 8005328:	08005341 	.word	0x08005341
 800532c:	08005347 	.word	0x08005347
 8005330:	0800533b 	.word	0x0800533b
 8005334:	2300      	movs	r3, #0
 8005336:	77fb      	strb	r3, [r7, #31]
 8005338:	e01d      	b.n	8005376 <UART_SetConfig+0xe2>
 800533a:	2302      	movs	r3, #2
 800533c:	77fb      	strb	r3, [r7, #31]
 800533e:	e01a      	b.n	8005376 <UART_SetConfig+0xe2>
 8005340:	2304      	movs	r3, #4
 8005342:	77fb      	strb	r3, [r7, #31]
 8005344:	e017      	b.n	8005376 <UART_SetConfig+0xe2>
 8005346:	2308      	movs	r3, #8
 8005348:	77fb      	strb	r3, [r7, #31]
 800534a:	e014      	b.n	8005376 <UART_SetConfig+0xe2>
 800534c:	2310      	movs	r3, #16
 800534e:	77fb      	strb	r3, [r7, #31]
 8005350:	e011      	b.n	8005376 <UART_SetConfig+0xe2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a67      	ldr	r2, [pc, #412]	@ (80054f4 <UART_SetConfig+0x260>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d102      	bne.n	8005362 <UART_SetConfig+0xce>
 800535c:	2300      	movs	r3, #0
 800535e:	77fb      	strb	r3, [r7, #31]
 8005360:	e009      	b.n	8005376 <UART_SetConfig+0xe2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a64      	ldr	r2, [pc, #400]	@ (80054f8 <UART_SetConfig+0x264>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d102      	bne.n	8005372 <UART_SetConfig+0xde>
 800536c:	2300      	movs	r3, #0
 800536e:	77fb      	strb	r3, [r7, #31]
 8005370:	e001      	b.n	8005376 <UART_SetConfig+0xe2>
 8005372:	2310      	movs	r3, #16
 8005374:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800537e:	d15a      	bne.n	8005436 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005380:	7ffb      	ldrb	r3, [r7, #31]
 8005382:	2b08      	cmp	r3, #8
 8005384:	d827      	bhi.n	80053d6 <UART_SetConfig+0x142>
 8005386:	a201      	add	r2, pc, #4	@ (adr r2, 800538c <UART_SetConfig+0xf8>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	080053b1 	.word	0x080053b1
 8005390:	080053b9 	.word	0x080053b9
 8005394:	080053c1 	.word	0x080053c1
 8005398:	080053d7 	.word	0x080053d7
 800539c:	080053c7 	.word	0x080053c7
 80053a0:	080053d7 	.word	0x080053d7
 80053a4:	080053d7 	.word	0x080053d7
 80053a8:	080053d7 	.word	0x080053d7
 80053ac:	080053cf 	.word	0x080053cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b0:	f7fe f986 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 80053b4:	61b8      	str	r0, [r7, #24]
        break;
 80053b6:	e013      	b.n	80053e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053b8:	f7fe f9a4 	bl	8003704 <HAL_RCC_GetPCLK2Freq>
 80053bc:	61b8      	str	r0, [r7, #24]
        break;
 80053be:	e00f      	b.n	80053e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c0:	4b4e      	ldr	r3, [pc, #312]	@ (80054fc <UART_SetConfig+0x268>)
 80053c2:	61bb      	str	r3, [r7, #24]
        break;
 80053c4:	e00c      	b.n	80053e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053c6:	f7fe f905 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 80053ca:	61b8      	str	r0, [r7, #24]
        break;
 80053cc:	e008      	b.n	80053e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053d2:	61bb      	str	r3, [r7, #24]
        break;
 80053d4:	e004      	b.n	80053e0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	77bb      	strb	r3, [r7, #30]
        break;
 80053de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d074      	beq.n	80054d0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	005a      	lsls	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	085b      	lsrs	r3, r3, #1
 80053f0:	441a      	add	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b0f      	cmp	r3, #15
 8005400:	d916      	bls.n	8005430 <UART_SetConfig+0x19c>
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005408:	d212      	bcs.n	8005430 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	b29b      	uxth	r3, r3
 800540e:	f023 030f 	bic.w	r3, r3, #15
 8005412:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	085b      	lsrs	r3, r3, #1
 8005418:	b29b      	uxth	r3, r3
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	b29a      	uxth	r2, r3
 8005420:	89fb      	ldrh	r3, [r7, #14]
 8005422:	4313      	orrs	r3, r2
 8005424:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	89fa      	ldrh	r2, [r7, #14]
 800542c:	60da      	str	r2, [r3, #12]
 800542e:	e04f      	b.n	80054d0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	77bb      	strb	r3, [r7, #30]
 8005434:	e04c      	b.n	80054d0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005436:	7ffb      	ldrb	r3, [r7, #31]
 8005438:	2b08      	cmp	r3, #8
 800543a:	d828      	bhi.n	800548e <UART_SetConfig+0x1fa>
 800543c:	a201      	add	r2, pc, #4	@ (adr r2, 8005444 <UART_SetConfig+0x1b0>)
 800543e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005442:	bf00      	nop
 8005444:	08005469 	.word	0x08005469
 8005448:	08005471 	.word	0x08005471
 800544c:	08005479 	.word	0x08005479
 8005450:	0800548f 	.word	0x0800548f
 8005454:	0800547f 	.word	0x0800547f
 8005458:	0800548f 	.word	0x0800548f
 800545c:	0800548f 	.word	0x0800548f
 8005460:	0800548f 	.word	0x0800548f
 8005464:	08005487 	.word	0x08005487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005468:	f7fe f92a 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 800546c:	61b8      	str	r0, [r7, #24]
        break;
 800546e:	e013      	b.n	8005498 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005470:	f7fe f948 	bl	8003704 <HAL_RCC_GetPCLK2Freq>
 8005474:	61b8      	str	r0, [r7, #24]
        break;
 8005476:	e00f      	b.n	8005498 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005478:	4b20      	ldr	r3, [pc, #128]	@ (80054fc <UART_SetConfig+0x268>)
 800547a:	61bb      	str	r3, [r7, #24]
        break;
 800547c:	e00c      	b.n	8005498 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800547e:	f7fe f8a9 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8005482:	61b8      	str	r0, [r7, #24]
        break;
 8005484:	e008      	b.n	8005498 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800548a:	61bb      	str	r3, [r7, #24]
        break;
 800548c:	e004      	b.n	8005498 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	77bb      	strb	r3, [r7, #30]
        break;
 8005496:	bf00      	nop
    }

    if (pclk != 0U)
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d018      	beq.n	80054d0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	085a      	lsrs	r2, r3, #1
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	441a      	add	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	2b0f      	cmp	r3, #15
 80054b6:	d909      	bls.n	80054cc <UART_SetConfig+0x238>
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054be:	d205      	bcs.n	80054cc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	60da      	str	r2, [r3, #12]
 80054ca:	e001      	b.n	80054d0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80054dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3720      	adds	r7, #32
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	efff69f3 	.word	0xefff69f3
 80054ec:	40013800 	.word	0x40013800
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40004400 	.word	0x40004400
 80054f8:	40004800 	.word	0x40004800
 80054fc:	007a1200 	.word	0x007a1200

08005500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00a      	beq.n	800556e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00a      	beq.n	80055b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01a      	beq.n	8005616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055fe:	d10a      	bne.n	8005616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	605a      	str	r2, [r3, #4]
  }
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b098      	sub	sp, #96	@ 0x60
 8005648:	af02      	add	r7, sp, #8
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005654:	f7fc f964 	bl	8001920 <HAL_GetTick>
 8005658:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b08      	cmp	r3, #8
 8005666:	d12e      	bne.n	80056c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005668:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005670:	2200      	movs	r2, #0
 8005672:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f88c 	bl	8005794 <UART_WaitOnFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d021      	beq.n	80056c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005692:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005696:	653b      	str	r3, [r7, #80]	@ 0x50
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e6      	bne.n	8005682 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2220      	movs	r2, #32
 80056b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e062      	b.n	800578c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d149      	bne.n	8005768 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056dc:	2200      	movs	r2, #0
 80056de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f856 	bl	8005794 <UART_WaitOnFlagUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d03c      	beq.n	8005768 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	623b      	str	r3, [r7, #32]
   return(result);
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800570c:	633b      	str	r3, [r7, #48]	@ 0x30
 800570e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800571a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e6      	bne.n	80056ee <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3308      	adds	r3, #8
 8005726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0301 	bic.w	r3, r3, #1
 8005736:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3308      	adds	r3, #8
 800573e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005740:	61fa      	str	r2, [r7, #28]
 8005742:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005744:	69b9      	ldr	r1, [r7, #24]
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	e841 2300 	strex	r3, r2, [r1]
 800574c:	617b      	str	r3, [r7, #20]
   return(result);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e5      	bne.n	8005720 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2220      	movs	r2, #32
 8005758:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e011      	b.n	800578c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2220      	movs	r2, #32
 800576c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3758      	adds	r7, #88	@ 0x58
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	603b      	str	r3, [r7, #0]
 80057a0:	4613      	mov	r3, r2
 80057a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a4:	e049      	b.n	800583a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ac:	d045      	beq.n	800583a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ae:	f7fc f8b7 	bl	8001920 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d302      	bcc.n	80057c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e048      	b.n	800585a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d031      	beq.n	800583a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	f003 0308 	and.w	r3, r3, #8
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d110      	bne.n	8005806 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2208      	movs	r2, #8
 80057ea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f838 	bl	8005862 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2208      	movs	r2, #8
 80057f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e029      	b.n	800585a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005814:	d111      	bne.n	800583a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800581e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f81e 	bl	8005862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2220      	movs	r2, #32
 800582a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e00f      	b.n	800585a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69da      	ldr	r2, [r3, #28]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4013      	ands	r3, r2
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	429a      	cmp	r2, r3
 8005848:	bf0c      	ite	eq
 800584a:	2301      	moveq	r3, #1
 800584c:	2300      	movne	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	461a      	mov	r2, r3
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	429a      	cmp	r2, r3
 8005856:	d0a6      	beq.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005862:	b480      	push	{r7}
 8005864:	b095      	sub	sp, #84	@ 0x54
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800587e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	461a      	mov	r2, r3
 8005886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005888:	643b      	str	r3, [r7, #64]	@ 0x40
 800588a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800588e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e6      	bne.n	800586a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3308      	adds	r3, #8
 80058a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f023 0301 	bic.w	r3, r3, #1
 80058b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3308      	adds	r3, #8
 80058ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e5      	bne.n	800589c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d118      	bne.n	800590a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f023 0310 	bic.w	r3, r3, #16
 80058ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058f6:	61bb      	str	r3, [r7, #24]
 80058f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6979      	ldr	r1, [r7, #20]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	613b      	str	r3, [r7, #16]
   return(result);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e6      	bne.n	80058d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800591e:	bf00      	nop
 8005920:	3754      	adds	r7, #84	@ 0x54
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005930:	4904      	ldr	r1, [pc, #16]	@ (8005944 <MX_FATFS_Init+0x18>)
 8005932:	4805      	ldr	r0, [pc, #20]	@ (8005948 <MX_FATFS_Init+0x1c>)
 8005934:	f000 f8b0 	bl	8005a98 <FATFS_LinkDriver>
 8005938:	4603      	mov	r3, r0
 800593a:	461a      	mov	r2, r3
 800593c:	4b03      	ldr	r3, [pc, #12]	@ (800594c <MX_FATFS_Init+0x20>)
 800593e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005940:	bf00      	nop
 8005942:	bd80      	pop	{r7, pc}
 8005944:	20002e3c 	.word	0x20002e3c
 8005948:	2000000c 	.word	0x2000000c
 800594c:	20002e38 	.word	0x20002e38

08005950 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800595a:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <USER_initialize+0x24>)
 800595c:	2201      	movs	r2, #1
 800595e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005960:	4b04      	ldr	r3, [pc, #16]	@ (8005974 <USER_initialize+0x24>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005966:	4618      	mov	r0, r3
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20000009 	.word	0x20000009

08005978 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	4603      	mov	r3, r0
 8005980:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005982:	4b06      	ldr	r3, [pc, #24]	@ (800599c <USER_status+0x24>)
 8005984:	2201      	movs	r2, #1
 8005986:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005988:	4b04      	ldr	r3, [pc, #16]	@ (800599c <USER_status+0x24>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	20000009 	.word	0x20000009

080059a0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	4603      	mov	r3, r0
 80059ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80059b0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80059be:	b480      	push	{r7}
 80059c0:	b085      	sub	sp, #20
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
 80059ca:	4603      	mov	r3, r0
 80059cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80059ce:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	4603      	mov	r3, r0
 80059e4:	603a      	str	r2, [r7, #0]
 80059e6:	71fb      	strb	r3, [r7, #7]
 80059e8:	460b      	mov	r3, r1
 80059ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
    return res;
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
	...

08005a00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005a12:	2300      	movs	r3, #0
 8005a14:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8005a16:	4b1f      	ldr	r3, [pc, #124]	@ (8005a94 <FATFS_LinkDriverEx+0x94>)
 8005a18:	7a5b      	ldrb	r3, [r3, #9]
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d831      	bhi.n	8005a84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005a20:	4b1c      	ldr	r3, [pc, #112]	@ (8005a94 <FATFS_LinkDriverEx+0x94>)
 8005a22:	7a5b      	ldrb	r3, [r3, #9]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	4b1a      	ldr	r3, [pc, #104]	@ (8005a94 <FATFS_LinkDriverEx+0x94>)
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8005a2e:	4b19      	ldr	r3, [pc, #100]	@ (8005a94 <FATFS_LinkDriverEx+0x94>)
 8005a30:	7a5b      	ldrb	r3, [r3, #9]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	4a17      	ldr	r2, [pc, #92]	@ (8005a94 <FATFS_LinkDriverEx+0x94>)
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8005a3e:	4b15      	ldr	r3, [pc, #84]	@ (8005a94 <FATFS_LinkDriverEx+0x94>)
 8005a40:	7a5b      	ldrb	r3, [r3, #9]
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	461a      	mov	r2, r3
 8005a46:	4b13      	ldr	r3, [pc, #76]	@ (8005a94 <FATFS_LinkDriverEx+0x94>)
 8005a48:	4413      	add	r3, r2
 8005a4a:	79fa      	ldrb	r2, [r7, #7]
 8005a4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005a4e:	4b11      	ldr	r3, [pc, #68]	@ (8005a94 <FATFS_LinkDriverEx+0x94>)
 8005a50:	7a5b      	ldrb	r3, [r3, #9]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	b2d1      	uxtb	r1, r2
 8005a58:	4a0e      	ldr	r2, [pc, #56]	@ (8005a94 <FATFS_LinkDriverEx+0x94>)
 8005a5a:	7251      	strb	r1, [r2, #9]
 8005a5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005a5e:	7dbb      	ldrb	r3, [r7, #22]
 8005a60:	3330      	adds	r3, #48	@ 0x30
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	223a      	movs	r2, #58	@ 0x3a
 8005a6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	3302      	adds	r3, #2
 8005a74:	222f      	movs	r2, #47	@ 0x2f
 8005a76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	3303      	adds	r3, #3
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005a80:	2300      	movs	r3, #0
 8005a82:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	20002e40 	.word	0x20002e40

08005a98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	6839      	ldr	r1, [r7, #0]
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff ffaa 	bl	8005a00 <FATFS_LinkDriverEx>
 8005aac:	4603      	mov	r3, r0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <memset>:
 8005ab6:	4402      	add	r2, r0
 8005ab8:	4603      	mov	r3, r0
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d100      	bne.n	8005ac0 <memset+0xa>
 8005abe:	4770      	bx	lr
 8005ac0:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac4:	e7f9      	b.n	8005aba <memset+0x4>
	...

08005ac8 <__libc_init_array>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	4d0d      	ldr	r5, [pc, #52]	@ (8005b00 <__libc_init_array+0x38>)
 8005acc:	4c0d      	ldr	r4, [pc, #52]	@ (8005b04 <__libc_init_array+0x3c>)
 8005ace:	1b64      	subs	r4, r4, r5
 8005ad0:	10a4      	asrs	r4, r4, #2
 8005ad2:	2600      	movs	r6, #0
 8005ad4:	42a6      	cmp	r6, r4
 8005ad6:	d109      	bne.n	8005aec <__libc_init_array+0x24>
 8005ad8:	4d0b      	ldr	r5, [pc, #44]	@ (8005b08 <__libc_init_array+0x40>)
 8005ada:	4c0c      	ldr	r4, [pc, #48]	@ (8005b0c <__libc_init_array+0x44>)
 8005adc:	f001 f8a8 	bl	8006c30 <_init>
 8005ae0:	1b64      	subs	r4, r4, r5
 8005ae2:	10a4      	asrs	r4, r4, #2
 8005ae4:	2600      	movs	r6, #0
 8005ae6:	42a6      	cmp	r6, r4
 8005ae8:	d105      	bne.n	8005af6 <__libc_init_array+0x2e>
 8005aea:	bd70      	pop	{r4, r5, r6, pc}
 8005aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af0:	4798      	blx	r3
 8005af2:	3601      	adds	r6, #1
 8005af4:	e7ee      	b.n	8005ad4 <__libc_init_array+0xc>
 8005af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afa:	4798      	blx	r3
 8005afc:	3601      	adds	r6, #1
 8005afe:	e7f2      	b.n	8005ae6 <__libc_init_array+0x1e>
 8005b00:	08006e68 	.word	0x08006e68
 8005b04:	08006e68 	.word	0x08006e68
 8005b08:	08006e68 	.word	0x08006e68
 8005b0c:	08006e6c 	.word	0x08006e6c

08005b10 <tan>:
 8005b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b12:	ec53 2b10 	vmov	r2, r3, d0
 8005b16:	4816      	ldr	r0, [pc, #88]	@ (8005b70 <tan+0x60>)
 8005b18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005b1c:	4281      	cmp	r1, r0
 8005b1e:	d807      	bhi.n	8005b30 <tan+0x20>
 8005b20:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8005b68 <tan+0x58>
 8005b24:	2001      	movs	r0, #1
 8005b26:	b005      	add	sp, #20
 8005b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b2c:	f000 b824 	b.w	8005b78 <__kernel_tan>
 8005b30:	4810      	ldr	r0, [pc, #64]	@ (8005b74 <tan+0x64>)
 8005b32:	4281      	cmp	r1, r0
 8005b34:	d908      	bls.n	8005b48 <tan+0x38>
 8005b36:	4610      	mov	r0, r2
 8005b38:	4619      	mov	r1, r3
 8005b3a:	f7fa fb49 	bl	80001d0 <__aeabi_dsub>
 8005b3e:	ec41 0b10 	vmov	d0, r0, r1
 8005b42:	b005      	add	sp, #20
 8005b44:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b48:	4668      	mov	r0, sp
 8005b4a:	f000 fa19 	bl	8005f80 <__ieee754_rem_pio2>
 8005b4e:	0040      	lsls	r0, r0, #1
 8005b50:	f000 0002 	and.w	r0, r0, #2
 8005b54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b58:	ed9d 0b00 	vldr	d0, [sp]
 8005b5c:	f1c0 0001 	rsb	r0, r0, #1
 8005b60:	f000 f80a 	bl	8005b78 <__kernel_tan>
 8005b64:	e7ed      	b.n	8005b42 <tan+0x32>
 8005b66:	bf00      	nop
	...
 8005b70:	3fe921fb 	.word	0x3fe921fb
 8005b74:	7fefffff 	.word	0x7fefffff

08005b78 <__kernel_tan>:
 8005b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7c:	ec5b ab10 	vmov	sl, fp, d0
 8005b80:	4bdb      	ldr	r3, [pc, #876]	@ (8005ef0 <__kernel_tan+0x378>)
 8005b82:	b089      	sub	sp, #36	@ 0x24
 8005b84:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 8005b88:	429f      	cmp	r7, r3
 8005b8a:	ec59 8b11 	vmov	r8, r9, d1
 8005b8e:	4606      	mov	r6, r0
 8005b90:	f8cd b008 	str.w	fp, [sp, #8]
 8005b94:	d85d      	bhi.n	8005c52 <__kernel_tan+0xda>
 8005b96:	4650      	mov	r0, sl
 8005b98:	4659      	mov	r1, fp
 8005b9a:	f7fa ff6b 	bl	8000a74 <__aeabi_d2iz>
 8005b9e:	4605      	mov	r5, r0
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d17c      	bne.n	8005c9e <__kernel_tan+0x126>
 8005ba4:	1c73      	adds	r3, r6, #1
 8005ba6:	4652      	mov	r2, sl
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	433b      	orrs	r3, r7
 8005bac:	d110      	bne.n	8005bd0 <__kernel_tan+0x58>
 8005bae:	ec4b ab10 	vmov	d0, sl, fp
 8005bb2:	f000 fbe1 	bl	8006378 <fabs>
 8005bb6:	49cf      	ldr	r1, [pc, #828]	@ (8005ef4 <__kernel_tan+0x37c>)
 8005bb8:	ec53 2b10 	vmov	r2, r3, d0
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	f7fa fde9 	bl	8000794 <__aeabi_ddiv>
 8005bc2:	4682      	mov	sl, r0
 8005bc4:	468b      	mov	fp, r1
 8005bc6:	ec4b ab10 	vmov	d0, sl, fp
 8005bca:	b009      	add	sp, #36	@ 0x24
 8005bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd0:	2e01      	cmp	r6, #1
 8005bd2:	d0f8      	beq.n	8005bc6 <__kernel_tan+0x4e>
 8005bd4:	4642      	mov	r2, r8
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	4650      	mov	r0, sl
 8005bda:	4659      	mov	r1, fp
 8005bdc:	f7fa fafa 	bl	80001d4 <__adddf3>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	460f      	mov	r7, r1
 8005be6:	2000      	movs	r0, #0
 8005be8:	49c3      	ldr	r1, [pc, #780]	@ (8005ef8 <__kernel_tan+0x380>)
 8005bea:	f7fa fdd3 	bl	8000794 <__aeabi_ddiv>
 8005bee:	e9cd 0100 	strd	r0, r1, [sp]
 8005bf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bf6:	462e      	mov	r6, r5
 8005bf8:	4652      	mov	r2, sl
 8005bfa:	462c      	mov	r4, r5
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	461d      	mov	r5, r3
 8005c00:	4639      	mov	r1, r7
 8005c02:	465b      	mov	r3, fp
 8005c04:	f7fa fae4 	bl	80001d0 <__aeabi_dsub>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4640      	mov	r0, r8
 8005c0e:	4649      	mov	r1, r9
 8005c10:	f7fa fade 	bl	80001d0 <__aeabi_dsub>
 8005c14:	4632      	mov	r2, r6
 8005c16:	462b      	mov	r3, r5
 8005c18:	f7fa fc92 	bl	8000540 <__aeabi_dmul>
 8005c1c:	4632      	mov	r2, r6
 8005c1e:	4682      	mov	sl, r0
 8005c20:	468b      	mov	fp, r1
 8005c22:	462b      	mov	r3, r5
 8005c24:	4630      	mov	r0, r6
 8005c26:	4639      	mov	r1, r7
 8005c28:	f7fa fc8a 	bl	8000540 <__aeabi_dmul>
 8005c2c:	4bb1      	ldr	r3, [pc, #708]	@ (8005ef4 <__kernel_tan+0x37c>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f7fa fad0 	bl	80001d4 <__adddf3>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4650      	mov	r0, sl
 8005c3a:	4659      	mov	r1, fp
 8005c3c:	f7fa faca 	bl	80001d4 <__adddf3>
 8005c40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c44:	f7fa fc7c 	bl	8000540 <__aeabi_dmul>
 8005c48:	4622      	mov	r2, r4
 8005c4a:	462b      	mov	r3, r5
 8005c4c:	f7fa fac2 	bl	80001d4 <__adddf3>
 8005c50:	e7b7      	b.n	8005bc2 <__kernel_tan+0x4a>
 8005c52:	4baa      	ldr	r3, [pc, #680]	@ (8005efc <__kernel_tan+0x384>)
 8005c54:	429f      	cmp	r7, r3
 8005c56:	d922      	bls.n	8005c9e <__kernel_tan+0x126>
 8005c58:	9b02      	ldr	r3, [sp, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	da05      	bge.n	8005c6a <__kernel_tan+0xf2>
 8005c5e:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005c62:	469b      	mov	fp, r3
 8005c64:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005c68:	4699      	mov	r9, r3
 8005c6a:	4652      	mov	r2, sl
 8005c6c:	465b      	mov	r3, fp
 8005c6e:	a182      	add	r1, pc, #520	@ (adr r1, 8005e78 <__kernel_tan+0x300>)
 8005c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c74:	f7fa faac 	bl	80001d0 <__aeabi_dsub>
 8005c78:	4642      	mov	r2, r8
 8005c7a:	464b      	mov	r3, r9
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	460d      	mov	r5, r1
 8005c80:	a17f      	add	r1, pc, #508	@ (adr r1, 8005e80 <__kernel_tan+0x308>)
 8005c82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c86:	f7fa faa3 	bl	80001d0 <__aeabi_dsub>
 8005c8a:	4622      	mov	r2, r4
 8005c8c:	462b      	mov	r3, r5
 8005c8e:	f7fa faa1 	bl	80001d4 <__adddf3>
 8005c92:	f04f 0800 	mov.w	r8, #0
 8005c96:	4682      	mov	sl, r0
 8005c98:	468b      	mov	fp, r1
 8005c9a:	f04f 0900 	mov.w	r9, #0
 8005c9e:	4652      	mov	r2, sl
 8005ca0:	465b      	mov	r3, fp
 8005ca2:	4650      	mov	r0, sl
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	f7fa fc4b 	bl	8000540 <__aeabi_dmul>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	e9cd 2300 	strd	r2, r3, [sp]
 8005cb2:	f7fa fc45 	bl	8000540 <__aeabi_dmul>
 8005cb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cba:	4604      	mov	r4, r0
 8005cbc:	460d      	mov	r5, r1
 8005cbe:	4650      	mov	r0, sl
 8005cc0:	4659      	mov	r1, fp
 8005cc2:	f7fa fc3d 	bl	8000540 <__aeabi_dmul>
 8005cc6:	a370      	add	r3, pc, #448	@ (adr r3, 8005e88 <__kernel_tan+0x310>)
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	f7fa fc34 	bl	8000540 <__aeabi_dmul>
 8005cd8:	a36d      	add	r3, pc, #436	@ (adr r3, 8005e90 <__kernel_tan+0x318>)
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f7fa fa79 	bl	80001d4 <__adddf3>
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	f7fa fc2b 	bl	8000540 <__aeabi_dmul>
 8005cea:	a36b      	add	r3, pc, #428	@ (adr r3, 8005e98 <__kernel_tan+0x320>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa fa70 	bl	80001d4 <__adddf3>
 8005cf4:	4622      	mov	r2, r4
 8005cf6:	462b      	mov	r3, r5
 8005cf8:	f7fa fc22 	bl	8000540 <__aeabi_dmul>
 8005cfc:	a368      	add	r3, pc, #416	@ (adr r3, 8005ea0 <__kernel_tan+0x328>)
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	f7fa fa67 	bl	80001d4 <__adddf3>
 8005d06:	4622      	mov	r2, r4
 8005d08:	462b      	mov	r3, r5
 8005d0a:	f7fa fc19 	bl	8000540 <__aeabi_dmul>
 8005d0e:	a366      	add	r3, pc, #408	@ (adr r3, 8005ea8 <__kernel_tan+0x330>)
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f7fa fa5e 	bl	80001d4 <__adddf3>
 8005d18:	4622      	mov	r2, r4
 8005d1a:	462b      	mov	r3, r5
 8005d1c:	f7fa fc10 	bl	8000540 <__aeabi_dmul>
 8005d20:	a363      	add	r3, pc, #396	@ (adr r3, 8005eb0 <__kernel_tan+0x338>)
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	f7fa fa55 	bl	80001d4 <__adddf3>
 8005d2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d2e:	f7fa fc07 	bl	8000540 <__aeabi_dmul>
 8005d32:	a361      	add	r3, pc, #388	@ (adr r3, 8005eb8 <__kernel_tan+0x340>)
 8005d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d38:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	4629      	mov	r1, r5
 8005d40:	f7fa fbfe 	bl	8000540 <__aeabi_dmul>
 8005d44:	a35e      	add	r3, pc, #376	@ (adr r3, 8005ec0 <__kernel_tan+0x348>)
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	f7fa fa43 	bl	80001d4 <__adddf3>
 8005d4e:	4622      	mov	r2, r4
 8005d50:	462b      	mov	r3, r5
 8005d52:	f7fa fbf5 	bl	8000540 <__aeabi_dmul>
 8005d56:	a35c      	add	r3, pc, #368	@ (adr r3, 8005ec8 <__kernel_tan+0x350>)
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	f7fa fa3a 	bl	80001d4 <__adddf3>
 8005d60:	4622      	mov	r2, r4
 8005d62:	462b      	mov	r3, r5
 8005d64:	f7fa fbec 	bl	8000540 <__aeabi_dmul>
 8005d68:	a359      	add	r3, pc, #356	@ (adr r3, 8005ed0 <__kernel_tan+0x358>)
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	f7fa fa31 	bl	80001d4 <__adddf3>
 8005d72:	4622      	mov	r2, r4
 8005d74:	462b      	mov	r3, r5
 8005d76:	f7fa fbe3 	bl	8000540 <__aeabi_dmul>
 8005d7a:	a357      	add	r3, pc, #348	@ (adr r3, 8005ed8 <__kernel_tan+0x360>)
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	f7fa fa28 	bl	80001d4 <__adddf3>
 8005d84:	4622      	mov	r2, r4
 8005d86:	462b      	mov	r3, r5
 8005d88:	f7fa fbda 	bl	8000540 <__aeabi_dmul>
 8005d8c:	a354      	add	r3, pc, #336	@ (adr r3, 8005ee0 <__kernel_tan+0x368>)
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	f7fa fa1f 	bl	80001d4 <__adddf3>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d9e:	f7fa fa19 	bl	80001d4 <__adddf3>
 8005da2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005da6:	f7fa fbcb 	bl	8000540 <__aeabi_dmul>
 8005daa:	4642      	mov	r2, r8
 8005dac:	464b      	mov	r3, r9
 8005dae:	f7fa fa11 	bl	80001d4 <__adddf3>
 8005db2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005db6:	f7fa fbc3 	bl	8000540 <__aeabi_dmul>
 8005dba:	4642      	mov	r2, r8
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	f7fa fa09 	bl	80001d4 <__adddf3>
 8005dc2:	a349      	add	r3, pc, #292	@ (adr r3, 8005ee8 <__kernel_tan+0x370>)
 8005dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc8:	4604      	mov	r4, r0
 8005dca:	460d      	mov	r5, r1
 8005dcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dd0:	f7fa fbb6 	bl	8000540 <__aeabi_dmul>
 8005dd4:	4622      	mov	r2, r4
 8005dd6:	462b      	mov	r3, r5
 8005dd8:	f7fa f9fc 	bl	80001d4 <__adddf3>
 8005ddc:	e9cd 0100 	strd	r0, r1, [sp]
 8005de0:	460b      	mov	r3, r1
 8005de2:	4602      	mov	r2, r0
 8005de4:	4659      	mov	r1, fp
 8005de6:	4650      	mov	r0, sl
 8005de8:	f7fa f9f4 	bl	80001d4 <__adddf3>
 8005dec:	4b43      	ldr	r3, [pc, #268]	@ (8005efc <__kernel_tan+0x384>)
 8005dee:	429f      	cmp	r7, r3
 8005df0:	4604      	mov	r4, r0
 8005df2:	460d      	mov	r5, r1
 8005df4:	f240 8084 	bls.w	8005f00 <__kernel_tan+0x388>
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f7fa fb37 	bl	800046c <__aeabi_i2d>
 8005dfe:	4622      	mov	r2, r4
 8005e00:	4680      	mov	r8, r0
 8005e02:	4689      	mov	r9, r1
 8005e04:	462b      	mov	r3, r5
 8005e06:	4620      	mov	r0, r4
 8005e08:	4629      	mov	r1, r5
 8005e0a:	f7fa fb99 	bl	8000540 <__aeabi_dmul>
 8005e0e:	4642      	mov	r2, r8
 8005e10:	4606      	mov	r6, r0
 8005e12:	460f      	mov	r7, r1
 8005e14:	464b      	mov	r3, r9
 8005e16:	4620      	mov	r0, r4
 8005e18:	4629      	mov	r1, r5
 8005e1a:	f7fa f9db 	bl	80001d4 <__adddf3>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	4630      	mov	r0, r6
 8005e24:	4639      	mov	r1, r7
 8005e26:	f7fa fcb5 	bl	8000794 <__aeabi_ddiv>
 8005e2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e2e:	f7fa f9cf 	bl	80001d0 <__aeabi_dsub>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4650      	mov	r0, sl
 8005e38:	4659      	mov	r1, fp
 8005e3a:	f7fa f9c9 	bl	80001d0 <__aeabi_dsub>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	f7fa f9c7 	bl	80001d4 <__adddf3>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	f7fa f9bf 	bl	80001d0 <__aeabi_dsub>
 8005e52:	9b02      	ldr	r3, [sp, #8]
 8005e54:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8005e58:	f00a 0a02 	and.w	sl, sl, #2
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	f1ca 0001 	rsb	r0, sl, #1
 8005e62:	460d      	mov	r5, r1
 8005e64:	f7fa fb02 	bl	800046c <__aeabi_i2d>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	4629      	mov	r1, r5
 8005e70:	f7fa fb66 	bl	8000540 <__aeabi_dmul>
 8005e74:	e6a5      	b.n	8005bc2 <__kernel_tan+0x4a>
 8005e76:	bf00      	nop
 8005e78:	54442d18 	.word	0x54442d18
 8005e7c:	3fe921fb 	.word	0x3fe921fb
 8005e80:	33145c07 	.word	0x33145c07
 8005e84:	3c81a626 	.word	0x3c81a626
 8005e88:	74bf7ad4 	.word	0x74bf7ad4
 8005e8c:	3efb2a70 	.word	0x3efb2a70
 8005e90:	32f0a7e9 	.word	0x32f0a7e9
 8005e94:	3f12b80f 	.word	0x3f12b80f
 8005e98:	1a8d1068 	.word	0x1a8d1068
 8005e9c:	3f3026f7 	.word	0x3f3026f7
 8005ea0:	fee08315 	.word	0xfee08315
 8005ea4:	3f57dbc8 	.word	0x3f57dbc8
 8005ea8:	e96e8493 	.word	0xe96e8493
 8005eac:	3f8226e3 	.word	0x3f8226e3
 8005eb0:	1bb341fe 	.word	0x1bb341fe
 8005eb4:	3faba1ba 	.word	0x3faba1ba
 8005eb8:	db605373 	.word	0xdb605373
 8005ebc:	bef375cb 	.word	0xbef375cb
 8005ec0:	a03792a6 	.word	0xa03792a6
 8005ec4:	3f147e88 	.word	0x3f147e88
 8005ec8:	f2f26501 	.word	0xf2f26501
 8005ecc:	3f4344d8 	.word	0x3f4344d8
 8005ed0:	c9560328 	.word	0xc9560328
 8005ed4:	3f6d6d22 	.word	0x3f6d6d22
 8005ed8:	8406d637 	.word	0x8406d637
 8005edc:	3f9664f4 	.word	0x3f9664f4
 8005ee0:	1110fe7a 	.word	0x1110fe7a
 8005ee4:	3fc11111 	.word	0x3fc11111
 8005ee8:	55555563 	.word	0x55555563
 8005eec:	3fd55555 	.word	0x3fd55555
 8005ef0:	3e2fffff 	.word	0x3e2fffff
 8005ef4:	3ff00000 	.word	0x3ff00000
 8005ef8:	bff00000 	.word	0xbff00000
 8005efc:	3fe59427 	.word	0x3fe59427
 8005f00:	2e01      	cmp	r6, #1
 8005f02:	d033      	beq.n	8005f6c <__kernel_tan+0x3f4>
 8005f04:	f04f 0800 	mov.w	r8, #0
 8005f08:	4689      	mov	r9, r1
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	2000      	movs	r0, #0
 8005f10:	4918      	ldr	r1, [pc, #96]	@ (8005f74 <__kernel_tan+0x3fc>)
 8005f12:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005f16:	f7fa fc3d 	bl	8000794 <__aeabi_ddiv>
 8005f1a:	4652      	mov	r2, sl
 8005f1c:	460f      	mov	r7, r1
 8005f1e:	465b      	mov	r3, fp
 8005f20:	4606      	mov	r6, r0
 8005f22:	460d      	mov	r5, r1
 8005f24:	4640      	mov	r0, r8
 8005f26:	4649      	mov	r1, r9
 8005f28:	f7fa f952 	bl	80001d0 <__aeabi_dsub>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f34:	f7fa f94c 	bl	80001d0 <__aeabi_dsub>
 8005f38:	4642      	mov	r2, r8
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	f7fa fb00 	bl	8000540 <__aeabi_dmul>
 8005f40:	4642      	mov	r2, r8
 8005f42:	4682      	mov	sl, r0
 8005f44:	468b      	mov	fp, r1
 8005f46:	463b      	mov	r3, r7
 8005f48:	4640      	mov	r0, r8
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	f7fa faf8 	bl	8000540 <__aeabi_dmul>
 8005f50:	4b09      	ldr	r3, [pc, #36]	@ (8005f78 <__kernel_tan+0x400>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	f7fa f93e 	bl	80001d4 <__adddf3>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4650      	mov	r0, sl
 8005f5e:	4659      	mov	r1, fp
 8005f60:	f7fa f938 	bl	80001d4 <__adddf3>
 8005f64:	4644      	mov	r4, r8
 8005f66:	4632      	mov	r2, r6
 8005f68:	463b      	mov	r3, r7
 8005f6a:	e66b      	b.n	8005c44 <__kernel_tan+0xcc>
 8005f6c:	4682      	mov	sl, r0
 8005f6e:	468b      	mov	fp, r1
 8005f70:	e629      	b.n	8005bc6 <__kernel_tan+0x4e>
 8005f72:	bf00      	nop
 8005f74:	bff00000 	.word	0xbff00000
 8005f78:	3ff00000 	.word	0x3ff00000
 8005f7c:	00000000 	.word	0x00000000

08005f80 <__ieee754_rem_pio2>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	ec57 6b10 	vmov	r6, r7, d0
 8005f88:	4bc5      	ldr	r3, [pc, #788]	@ (80062a0 <__ieee754_rem_pio2+0x320>)
 8005f8a:	b08d      	sub	sp, #52	@ 0x34
 8005f8c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005f90:	4598      	cmp	r8, r3
 8005f92:	4604      	mov	r4, r0
 8005f94:	9704      	str	r7, [sp, #16]
 8005f96:	d807      	bhi.n	8005fa8 <__ieee754_rem_pio2+0x28>
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	ed80 0b00 	vstr	d0, [r0]
 8005fa0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005fa4:	2500      	movs	r5, #0
 8005fa6:	e028      	b.n	8005ffa <__ieee754_rem_pio2+0x7a>
 8005fa8:	4bbe      	ldr	r3, [pc, #760]	@ (80062a4 <__ieee754_rem_pio2+0x324>)
 8005faa:	4598      	cmp	r8, r3
 8005fac:	d878      	bhi.n	80060a0 <__ieee754_rem_pio2+0x120>
 8005fae:	9b04      	ldr	r3, [sp, #16]
 8005fb0:	4dbd      	ldr	r5, [pc, #756]	@ (80062a8 <__ieee754_rem_pio2+0x328>)
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006268 <__ieee754_rem_pio2+0x2e8>)
 8005fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbc:	4639      	mov	r1, r7
 8005fbe:	dd38      	ble.n	8006032 <__ieee754_rem_pio2+0xb2>
 8005fc0:	f7fa f906 	bl	80001d0 <__aeabi_dsub>
 8005fc4:	45a8      	cmp	r8, r5
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	460f      	mov	r7, r1
 8005fca:	d01a      	beq.n	8006002 <__ieee754_rem_pio2+0x82>
 8005fcc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006270 <__ieee754_rem_pio2+0x2f0>)
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f7fa f8fd 	bl	80001d0 <__aeabi_dsub>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4680      	mov	r8, r0
 8005fdc:	4689      	mov	r9, r1
 8005fde:	4630      	mov	r0, r6
 8005fe0:	4639      	mov	r1, r7
 8005fe2:	f7fa f8f5 	bl	80001d0 <__aeabi_dsub>
 8005fe6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006270 <__ieee754_rem_pio2+0x2f0>)
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	f7fa f8f0 	bl	80001d0 <__aeabi_dsub>
 8005ff0:	e9c4 8900 	strd	r8, r9, [r4]
 8005ff4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005ff8:	2501      	movs	r5, #1
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	b00d      	add	sp, #52	@ 0x34
 8005ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006002:	a39d      	add	r3, pc, #628	@ (adr r3, 8006278 <__ieee754_rem_pio2+0x2f8>)
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f7fa f8e2 	bl	80001d0 <__aeabi_dsub>
 800600c:	a39c      	add	r3, pc, #624	@ (adr r3, 8006280 <__ieee754_rem_pio2+0x300>)
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	4606      	mov	r6, r0
 8006014:	460f      	mov	r7, r1
 8006016:	f7fa f8db 	bl	80001d0 <__aeabi_dsub>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4680      	mov	r8, r0
 8006020:	4689      	mov	r9, r1
 8006022:	4630      	mov	r0, r6
 8006024:	4639      	mov	r1, r7
 8006026:	f7fa f8d3 	bl	80001d0 <__aeabi_dsub>
 800602a:	a395      	add	r3, pc, #596	@ (adr r3, 8006280 <__ieee754_rem_pio2+0x300>)
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	e7dc      	b.n	8005fec <__ieee754_rem_pio2+0x6c>
 8006032:	f7fa f8cf 	bl	80001d4 <__adddf3>
 8006036:	45a8      	cmp	r8, r5
 8006038:	4606      	mov	r6, r0
 800603a:	460f      	mov	r7, r1
 800603c:	d018      	beq.n	8006070 <__ieee754_rem_pio2+0xf0>
 800603e:	a38c      	add	r3, pc, #560	@ (adr r3, 8006270 <__ieee754_rem_pio2+0x2f0>)
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f7fa f8c6 	bl	80001d4 <__adddf3>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	4680      	mov	r8, r0
 800604e:	4689      	mov	r9, r1
 8006050:	4630      	mov	r0, r6
 8006052:	4639      	mov	r1, r7
 8006054:	f7fa f8bc 	bl	80001d0 <__aeabi_dsub>
 8006058:	a385      	add	r3, pc, #532	@ (adr r3, 8006270 <__ieee754_rem_pio2+0x2f0>)
 800605a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605e:	f7fa f8b9 	bl	80001d4 <__adddf3>
 8006062:	f04f 35ff 	mov.w	r5, #4294967295
 8006066:	e9c4 8900 	strd	r8, r9, [r4]
 800606a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800606e:	e7c4      	b.n	8005ffa <__ieee754_rem_pio2+0x7a>
 8006070:	a381      	add	r3, pc, #516	@ (adr r3, 8006278 <__ieee754_rem_pio2+0x2f8>)
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	f7fa f8ad 	bl	80001d4 <__adddf3>
 800607a:	a381      	add	r3, pc, #516	@ (adr r3, 8006280 <__ieee754_rem_pio2+0x300>)
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	4606      	mov	r6, r0
 8006082:	460f      	mov	r7, r1
 8006084:	f7fa f8a6 	bl	80001d4 <__adddf3>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4680      	mov	r8, r0
 800608e:	4689      	mov	r9, r1
 8006090:	4630      	mov	r0, r6
 8006092:	4639      	mov	r1, r7
 8006094:	f7fa f89c 	bl	80001d0 <__aeabi_dsub>
 8006098:	a379      	add	r3, pc, #484	@ (adr r3, 8006280 <__ieee754_rem_pio2+0x300>)
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	e7de      	b.n	800605e <__ieee754_rem_pio2+0xde>
 80060a0:	4b82      	ldr	r3, [pc, #520]	@ (80062ac <__ieee754_rem_pio2+0x32c>)
 80060a2:	4598      	cmp	r8, r3
 80060a4:	f200 80d1 	bhi.w	800624a <__ieee754_rem_pio2+0x2ca>
 80060a8:	f000 f966 	bl	8006378 <fabs>
 80060ac:	ec57 6b10 	vmov	r6, r7, d0
 80060b0:	a375      	add	r3, pc, #468	@ (adr r3, 8006288 <__ieee754_rem_pio2+0x308>)
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	4630      	mov	r0, r6
 80060b8:	4639      	mov	r1, r7
 80060ba:	f7fa fa41 	bl	8000540 <__aeabi_dmul>
 80060be:	4b7c      	ldr	r3, [pc, #496]	@ (80062b0 <__ieee754_rem_pio2+0x330>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	f7fa f887 	bl	80001d4 <__adddf3>
 80060c6:	f7fa fcd5 	bl	8000a74 <__aeabi_d2iz>
 80060ca:	4605      	mov	r5, r0
 80060cc:	f7fa f9ce 	bl	800046c <__aeabi_i2d>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060d8:	a363      	add	r3, pc, #396	@ (adr r3, 8006268 <__ieee754_rem_pio2+0x2e8>)
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	f7fa fa2f 	bl	8000540 <__aeabi_dmul>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4630      	mov	r0, r6
 80060e8:	4639      	mov	r1, r7
 80060ea:	f7fa f871 	bl	80001d0 <__aeabi_dsub>
 80060ee:	a360      	add	r3, pc, #384	@ (adr r3, 8006270 <__ieee754_rem_pio2+0x2f0>)
 80060f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f4:	4682      	mov	sl, r0
 80060f6:	468b      	mov	fp, r1
 80060f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060fc:	f7fa fa20 	bl	8000540 <__aeabi_dmul>
 8006100:	2d1f      	cmp	r5, #31
 8006102:	4606      	mov	r6, r0
 8006104:	460f      	mov	r7, r1
 8006106:	dc0c      	bgt.n	8006122 <__ieee754_rem_pio2+0x1a2>
 8006108:	4b6a      	ldr	r3, [pc, #424]	@ (80062b4 <__ieee754_rem_pio2+0x334>)
 800610a:	1e6a      	subs	r2, r5, #1
 800610c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006110:	4543      	cmp	r3, r8
 8006112:	d006      	beq.n	8006122 <__ieee754_rem_pio2+0x1a2>
 8006114:	4632      	mov	r2, r6
 8006116:	463b      	mov	r3, r7
 8006118:	4650      	mov	r0, sl
 800611a:	4659      	mov	r1, fp
 800611c:	f7fa f858 	bl	80001d0 <__aeabi_dsub>
 8006120:	e00e      	b.n	8006140 <__ieee754_rem_pio2+0x1c0>
 8006122:	463b      	mov	r3, r7
 8006124:	4632      	mov	r2, r6
 8006126:	4650      	mov	r0, sl
 8006128:	4659      	mov	r1, fp
 800612a:	f7fa f851 	bl	80001d0 <__aeabi_dsub>
 800612e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006132:	9305      	str	r3, [sp, #20]
 8006134:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006138:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800613c:	2b10      	cmp	r3, #16
 800613e:	dc02      	bgt.n	8006146 <__ieee754_rem_pio2+0x1c6>
 8006140:	e9c4 0100 	strd	r0, r1, [r4]
 8006144:	e039      	b.n	80061ba <__ieee754_rem_pio2+0x23a>
 8006146:	a34c      	add	r3, pc, #304	@ (adr r3, 8006278 <__ieee754_rem_pio2+0x2f8>)
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006150:	f7fa f9f6 	bl	8000540 <__aeabi_dmul>
 8006154:	4606      	mov	r6, r0
 8006156:	460f      	mov	r7, r1
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4650      	mov	r0, sl
 800615e:	4659      	mov	r1, fp
 8006160:	f7fa f836 	bl	80001d0 <__aeabi_dsub>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4680      	mov	r8, r0
 800616a:	4689      	mov	r9, r1
 800616c:	4650      	mov	r0, sl
 800616e:	4659      	mov	r1, fp
 8006170:	f7fa f82e 	bl	80001d0 <__aeabi_dsub>
 8006174:	4632      	mov	r2, r6
 8006176:	463b      	mov	r3, r7
 8006178:	f7fa f82a 	bl	80001d0 <__aeabi_dsub>
 800617c:	a340      	add	r3, pc, #256	@ (adr r3, 8006280 <__ieee754_rem_pio2+0x300>)
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	4606      	mov	r6, r0
 8006184:	460f      	mov	r7, r1
 8006186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800618a:	f7fa f9d9 	bl	8000540 <__aeabi_dmul>
 800618e:	4632      	mov	r2, r6
 8006190:	463b      	mov	r3, r7
 8006192:	f7fa f81d 	bl	80001d0 <__aeabi_dsub>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4606      	mov	r6, r0
 800619c:	460f      	mov	r7, r1
 800619e:	4640      	mov	r0, r8
 80061a0:	4649      	mov	r1, r9
 80061a2:	f7fa f815 	bl	80001d0 <__aeabi_dsub>
 80061a6:	9a05      	ldr	r2, [sp, #20]
 80061a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b31      	cmp	r3, #49	@ 0x31
 80061b0:	dc20      	bgt.n	80061f4 <__ieee754_rem_pio2+0x274>
 80061b2:	e9c4 0100 	strd	r0, r1, [r4]
 80061b6:	46c2      	mov	sl, r8
 80061b8:	46cb      	mov	fp, r9
 80061ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80061be:	4650      	mov	r0, sl
 80061c0:	4642      	mov	r2, r8
 80061c2:	464b      	mov	r3, r9
 80061c4:	4659      	mov	r1, fp
 80061c6:	f7fa f803 	bl	80001d0 <__aeabi_dsub>
 80061ca:	463b      	mov	r3, r7
 80061cc:	4632      	mov	r2, r6
 80061ce:	f7f9 ffff 	bl	80001d0 <__aeabi_dsub>
 80061d2:	9b04      	ldr	r3, [sp, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80061da:	f6bf af0e 	bge.w	8005ffa <__ieee754_rem_pio2+0x7a>
 80061de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80061e2:	6063      	str	r3, [r4, #4]
 80061e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80061e8:	f8c4 8000 	str.w	r8, [r4]
 80061ec:	60a0      	str	r0, [r4, #8]
 80061ee:	60e3      	str	r3, [r4, #12]
 80061f0:	426d      	negs	r5, r5
 80061f2:	e702      	b.n	8005ffa <__ieee754_rem_pio2+0x7a>
 80061f4:	a326      	add	r3, pc, #152	@ (adr r3, 8006290 <__ieee754_rem_pio2+0x310>)
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061fe:	f7fa f99f 	bl	8000540 <__aeabi_dmul>
 8006202:	4606      	mov	r6, r0
 8006204:	460f      	mov	r7, r1
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4640      	mov	r0, r8
 800620c:	4649      	mov	r1, r9
 800620e:	f7f9 ffdf 	bl	80001d0 <__aeabi_dsub>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4682      	mov	sl, r0
 8006218:	468b      	mov	fp, r1
 800621a:	4640      	mov	r0, r8
 800621c:	4649      	mov	r1, r9
 800621e:	f7f9 ffd7 	bl	80001d0 <__aeabi_dsub>
 8006222:	4632      	mov	r2, r6
 8006224:	463b      	mov	r3, r7
 8006226:	f7f9 ffd3 	bl	80001d0 <__aeabi_dsub>
 800622a:	a31b      	add	r3, pc, #108	@ (adr r3, 8006298 <__ieee754_rem_pio2+0x318>)
 800622c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006230:	4606      	mov	r6, r0
 8006232:	460f      	mov	r7, r1
 8006234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006238:	f7fa f982 	bl	8000540 <__aeabi_dmul>
 800623c:	4632      	mov	r2, r6
 800623e:	463b      	mov	r3, r7
 8006240:	f7f9 ffc6 	bl	80001d0 <__aeabi_dsub>
 8006244:	4606      	mov	r6, r0
 8006246:	460f      	mov	r7, r1
 8006248:	e764      	b.n	8006114 <__ieee754_rem_pio2+0x194>
 800624a:	4b1b      	ldr	r3, [pc, #108]	@ (80062b8 <__ieee754_rem_pio2+0x338>)
 800624c:	4598      	cmp	r8, r3
 800624e:	d935      	bls.n	80062bc <__ieee754_rem_pio2+0x33c>
 8006250:	4632      	mov	r2, r6
 8006252:	463b      	mov	r3, r7
 8006254:	4630      	mov	r0, r6
 8006256:	4639      	mov	r1, r7
 8006258:	f7f9 ffba 	bl	80001d0 <__aeabi_dsub>
 800625c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006260:	e9c4 0100 	strd	r0, r1, [r4]
 8006264:	e69e      	b.n	8005fa4 <__ieee754_rem_pio2+0x24>
 8006266:	bf00      	nop
 8006268:	54400000 	.word	0x54400000
 800626c:	3ff921fb 	.word	0x3ff921fb
 8006270:	1a626331 	.word	0x1a626331
 8006274:	3dd0b461 	.word	0x3dd0b461
 8006278:	1a600000 	.word	0x1a600000
 800627c:	3dd0b461 	.word	0x3dd0b461
 8006280:	2e037073 	.word	0x2e037073
 8006284:	3ba3198a 	.word	0x3ba3198a
 8006288:	6dc9c883 	.word	0x6dc9c883
 800628c:	3fe45f30 	.word	0x3fe45f30
 8006290:	2e000000 	.word	0x2e000000
 8006294:	3ba3198a 	.word	0x3ba3198a
 8006298:	252049c1 	.word	0x252049c1
 800629c:	397b839a 	.word	0x397b839a
 80062a0:	3fe921fb 	.word	0x3fe921fb
 80062a4:	4002d97b 	.word	0x4002d97b
 80062a8:	3ff921fb 	.word	0x3ff921fb
 80062ac:	413921fb 	.word	0x413921fb
 80062b0:	3fe00000 	.word	0x3fe00000
 80062b4:	08006c8c 	.word	0x08006c8c
 80062b8:	7fefffff 	.word	0x7fefffff
 80062bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80062c0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80062c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80062c8:	4630      	mov	r0, r6
 80062ca:	460f      	mov	r7, r1
 80062cc:	f7fa fbd2 	bl	8000a74 <__aeabi_d2iz>
 80062d0:	f7fa f8cc 	bl	800046c <__aeabi_i2d>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4630      	mov	r0, r6
 80062da:	4639      	mov	r1, r7
 80062dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80062e0:	f7f9 ff76 	bl	80001d0 <__aeabi_dsub>
 80062e4:	4b22      	ldr	r3, [pc, #136]	@ (8006370 <__ieee754_rem_pio2+0x3f0>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	f7fa f92a 	bl	8000540 <__aeabi_dmul>
 80062ec:	460f      	mov	r7, r1
 80062ee:	4606      	mov	r6, r0
 80062f0:	f7fa fbc0 	bl	8000a74 <__aeabi_d2iz>
 80062f4:	f7fa f8ba 	bl	800046c <__aeabi_i2d>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4630      	mov	r0, r6
 80062fe:	4639      	mov	r1, r7
 8006300:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006304:	f7f9 ff64 	bl	80001d0 <__aeabi_dsub>
 8006308:	4b19      	ldr	r3, [pc, #100]	@ (8006370 <__ieee754_rem_pio2+0x3f0>)
 800630a:	2200      	movs	r2, #0
 800630c:	f7fa f918 	bl	8000540 <__aeabi_dmul>
 8006310:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8006314:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006318:	f04f 0803 	mov.w	r8, #3
 800631c:	2600      	movs	r6, #0
 800631e:	2700      	movs	r7, #0
 8006320:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006324:	4632      	mov	r2, r6
 8006326:	463b      	mov	r3, r7
 8006328:	46c2      	mov	sl, r8
 800632a:	f108 38ff 	add.w	r8, r8, #4294967295
 800632e:	f7fa fb6f 	bl	8000a10 <__aeabi_dcmpeq>
 8006332:	2800      	cmp	r0, #0
 8006334:	d1f4      	bne.n	8006320 <__ieee754_rem_pio2+0x3a0>
 8006336:	4b0f      	ldr	r3, [pc, #60]	@ (8006374 <__ieee754_rem_pio2+0x3f4>)
 8006338:	9301      	str	r3, [sp, #4]
 800633a:	2302      	movs	r3, #2
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	462a      	mov	r2, r5
 8006340:	4653      	mov	r3, sl
 8006342:	4621      	mov	r1, r4
 8006344:	a806      	add	r0, sp, #24
 8006346:	f000 f81f 	bl	8006388 <__kernel_rem_pio2>
 800634a:	9b04      	ldr	r3, [sp, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	4605      	mov	r5, r0
 8006350:	f6bf ae53 	bge.w	8005ffa <__ieee754_rem_pio2+0x7a>
 8006354:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006358:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800635c:	e9c4 2300 	strd	r2, r3, [r4]
 8006360:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006364:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006368:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800636c:	e740      	b.n	80061f0 <__ieee754_rem_pio2+0x270>
 800636e:	bf00      	nop
 8006370:	41700000 	.word	0x41700000
 8006374:	08006d0c 	.word	0x08006d0c

08006378 <fabs>:
 8006378:	ec51 0b10 	vmov	r0, r1, d0
 800637c:	4602      	mov	r2, r0
 800637e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006382:	ec43 2b10 	vmov	d0, r2, r3
 8006386:	4770      	bx	lr

08006388 <__kernel_rem_pio2>:
 8006388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638c:	ed2d 8b02 	vpush	{d8}
 8006390:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006394:	f112 0f14 	cmn.w	r2, #20
 8006398:	9306      	str	r3, [sp, #24]
 800639a:	9104      	str	r1, [sp, #16]
 800639c:	4bbe      	ldr	r3, [pc, #760]	@ (8006698 <__kernel_rem_pio2+0x310>)
 800639e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80063a0:	9008      	str	r0, [sp, #32]
 80063a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	9b06      	ldr	r3, [sp, #24]
 80063aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80063ae:	bfa8      	it	ge
 80063b0:	1ed4      	subge	r4, r2, #3
 80063b2:	9305      	str	r3, [sp, #20]
 80063b4:	bfb2      	itee	lt
 80063b6:	2400      	movlt	r4, #0
 80063b8:	2318      	movge	r3, #24
 80063ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80063be:	f06f 0317 	mvn.w	r3, #23
 80063c2:	fb04 3303 	mla	r3, r4, r3, r3
 80063c6:	eb03 0b02 	add.w	fp, r3, r2
 80063ca:	9b00      	ldr	r3, [sp, #0]
 80063cc:	9a05      	ldr	r2, [sp, #20]
 80063ce:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006688 <__kernel_rem_pio2+0x300>
 80063d2:	eb03 0802 	add.w	r8, r3, r2
 80063d6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80063d8:	1aa7      	subs	r7, r4, r2
 80063da:	ae20      	add	r6, sp, #128	@ 0x80
 80063dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80063e0:	2500      	movs	r5, #0
 80063e2:	4545      	cmp	r5, r8
 80063e4:	dd13      	ble.n	800640e <__kernel_rem_pio2+0x86>
 80063e6:	9b06      	ldr	r3, [sp, #24]
 80063e8:	aa20      	add	r2, sp, #128	@ 0x80
 80063ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80063ee:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80063f2:	f04f 0800 	mov.w	r8, #0
 80063f6:	9b00      	ldr	r3, [sp, #0]
 80063f8:	4598      	cmp	r8, r3
 80063fa:	dc31      	bgt.n	8006460 <__kernel_rem_pio2+0xd8>
 80063fc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006688 <__kernel_rem_pio2+0x300>
 8006400:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006404:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006408:	462f      	mov	r7, r5
 800640a:	2600      	movs	r6, #0
 800640c:	e01b      	b.n	8006446 <__kernel_rem_pio2+0xbe>
 800640e:	42ef      	cmn	r7, r5
 8006410:	d407      	bmi.n	8006422 <__kernel_rem_pio2+0x9a>
 8006412:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006416:	f7fa f829 	bl	800046c <__aeabi_i2d>
 800641a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800641e:	3501      	adds	r5, #1
 8006420:	e7df      	b.n	80063e2 <__kernel_rem_pio2+0x5a>
 8006422:	ec51 0b18 	vmov	r0, r1, d8
 8006426:	e7f8      	b.n	800641a <__kernel_rem_pio2+0x92>
 8006428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800642c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006430:	f7fa f886 	bl	8000540 <__aeabi_dmul>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800643c:	f7f9 feca 	bl	80001d4 <__adddf3>
 8006440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006444:	3601      	adds	r6, #1
 8006446:	9b05      	ldr	r3, [sp, #20]
 8006448:	429e      	cmp	r6, r3
 800644a:	f1a7 0708 	sub.w	r7, r7, #8
 800644e:	ddeb      	ble.n	8006428 <__kernel_rem_pio2+0xa0>
 8006450:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006454:	f108 0801 	add.w	r8, r8, #1
 8006458:	ecaa 7b02 	vstmia	sl!, {d7}
 800645c:	3508      	adds	r5, #8
 800645e:	e7ca      	b.n	80063f6 <__kernel_rem_pio2+0x6e>
 8006460:	9b00      	ldr	r3, [sp, #0]
 8006462:	f8dd 8000 	ldr.w	r8, [sp]
 8006466:	aa0c      	add	r2, sp, #48	@ 0x30
 8006468:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800646c:	930a      	str	r3, [sp, #40]	@ 0x28
 800646e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006470:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006474:	9309      	str	r3, [sp, #36]	@ 0x24
 8006476:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800647a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800647c:	ab98      	add	r3, sp, #608	@ 0x260
 800647e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006482:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8006486:	ed8d 7b02 	vstr	d7, [sp, #8]
 800648a:	ac0c      	add	r4, sp, #48	@ 0x30
 800648c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800648e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8006492:	46a1      	mov	r9, r4
 8006494:	46c2      	mov	sl, r8
 8006496:	f1ba 0f00 	cmp.w	sl, #0
 800649a:	f1a5 0508 	sub.w	r5, r5, #8
 800649e:	dc77      	bgt.n	8006590 <__kernel_rem_pio2+0x208>
 80064a0:	4658      	mov	r0, fp
 80064a2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80064a6:	f000 fac7 	bl	8006a38 <scalbn>
 80064aa:	ec57 6b10 	vmov	r6, r7, d0
 80064ae:	2200      	movs	r2, #0
 80064b0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80064b4:	4630      	mov	r0, r6
 80064b6:	4639      	mov	r1, r7
 80064b8:	f7fa f842 	bl	8000540 <__aeabi_dmul>
 80064bc:	ec41 0b10 	vmov	d0, r0, r1
 80064c0:	f000 fb3a 	bl	8006b38 <floor>
 80064c4:	4b75      	ldr	r3, [pc, #468]	@ (800669c <__kernel_rem_pio2+0x314>)
 80064c6:	ec51 0b10 	vmov	r0, r1, d0
 80064ca:	2200      	movs	r2, #0
 80064cc:	f7fa f838 	bl	8000540 <__aeabi_dmul>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4630      	mov	r0, r6
 80064d6:	4639      	mov	r1, r7
 80064d8:	f7f9 fe7a 	bl	80001d0 <__aeabi_dsub>
 80064dc:	460f      	mov	r7, r1
 80064de:	4606      	mov	r6, r0
 80064e0:	f7fa fac8 	bl	8000a74 <__aeabi_d2iz>
 80064e4:	9002      	str	r0, [sp, #8]
 80064e6:	f7f9 ffc1 	bl	800046c <__aeabi_i2d>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4630      	mov	r0, r6
 80064f0:	4639      	mov	r1, r7
 80064f2:	f7f9 fe6d 	bl	80001d0 <__aeabi_dsub>
 80064f6:	f1bb 0f00 	cmp.w	fp, #0
 80064fa:	4606      	mov	r6, r0
 80064fc:	460f      	mov	r7, r1
 80064fe:	dd6c      	ble.n	80065da <__kernel_rem_pio2+0x252>
 8006500:	f108 31ff 	add.w	r1, r8, #4294967295
 8006504:	ab0c      	add	r3, sp, #48	@ 0x30
 8006506:	9d02      	ldr	r5, [sp, #8]
 8006508:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800650c:	f1cb 0018 	rsb	r0, fp, #24
 8006510:	fa43 f200 	asr.w	r2, r3, r0
 8006514:	4415      	add	r5, r2
 8006516:	4082      	lsls	r2, r0
 8006518:	1a9b      	subs	r3, r3, r2
 800651a:	aa0c      	add	r2, sp, #48	@ 0x30
 800651c:	9502      	str	r5, [sp, #8]
 800651e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006522:	f1cb 0217 	rsb	r2, fp, #23
 8006526:	fa43 f902 	asr.w	r9, r3, r2
 800652a:	f1b9 0f00 	cmp.w	r9, #0
 800652e:	dd64      	ble.n	80065fa <__kernel_rem_pio2+0x272>
 8006530:	9b02      	ldr	r3, [sp, #8]
 8006532:	2200      	movs	r2, #0
 8006534:	3301      	adds	r3, #1
 8006536:	9302      	str	r3, [sp, #8]
 8006538:	4615      	mov	r5, r2
 800653a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800653e:	4590      	cmp	r8, r2
 8006540:	f300 80b8 	bgt.w	80066b4 <__kernel_rem_pio2+0x32c>
 8006544:	f1bb 0f00 	cmp.w	fp, #0
 8006548:	dd07      	ble.n	800655a <__kernel_rem_pio2+0x1d2>
 800654a:	f1bb 0f01 	cmp.w	fp, #1
 800654e:	f000 80bf 	beq.w	80066d0 <__kernel_rem_pio2+0x348>
 8006552:	f1bb 0f02 	cmp.w	fp, #2
 8006556:	f000 80c6 	beq.w	80066e6 <__kernel_rem_pio2+0x35e>
 800655a:	f1b9 0f02 	cmp.w	r9, #2
 800655e:	d14c      	bne.n	80065fa <__kernel_rem_pio2+0x272>
 8006560:	4632      	mov	r2, r6
 8006562:	463b      	mov	r3, r7
 8006564:	494e      	ldr	r1, [pc, #312]	@ (80066a0 <__kernel_rem_pio2+0x318>)
 8006566:	2000      	movs	r0, #0
 8006568:	f7f9 fe32 	bl	80001d0 <__aeabi_dsub>
 800656c:	4606      	mov	r6, r0
 800656e:	460f      	mov	r7, r1
 8006570:	2d00      	cmp	r5, #0
 8006572:	d042      	beq.n	80065fa <__kernel_rem_pio2+0x272>
 8006574:	4658      	mov	r0, fp
 8006576:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006690 <__kernel_rem_pio2+0x308>
 800657a:	f000 fa5d 	bl	8006a38 <scalbn>
 800657e:	4630      	mov	r0, r6
 8006580:	4639      	mov	r1, r7
 8006582:	ec53 2b10 	vmov	r2, r3, d0
 8006586:	f7f9 fe23 	bl	80001d0 <__aeabi_dsub>
 800658a:	4606      	mov	r6, r0
 800658c:	460f      	mov	r7, r1
 800658e:	e034      	b.n	80065fa <__kernel_rem_pio2+0x272>
 8006590:	4b44      	ldr	r3, [pc, #272]	@ (80066a4 <__kernel_rem_pio2+0x31c>)
 8006592:	2200      	movs	r2, #0
 8006594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006598:	f7f9 ffd2 	bl	8000540 <__aeabi_dmul>
 800659c:	f7fa fa6a 	bl	8000a74 <__aeabi_d2iz>
 80065a0:	f7f9 ff64 	bl	800046c <__aeabi_i2d>
 80065a4:	4b40      	ldr	r3, [pc, #256]	@ (80066a8 <__kernel_rem_pio2+0x320>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	4606      	mov	r6, r0
 80065aa:	460f      	mov	r7, r1
 80065ac:	f7f9 ffc8 	bl	8000540 <__aeabi_dmul>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065b8:	f7f9 fe0a 	bl	80001d0 <__aeabi_dsub>
 80065bc:	f7fa fa5a 	bl	8000a74 <__aeabi_d2iz>
 80065c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065c4:	f849 0b04 	str.w	r0, [r9], #4
 80065c8:	4639      	mov	r1, r7
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7f9 fe02 	bl	80001d4 <__adddf3>
 80065d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065d8:	e75d      	b.n	8006496 <__kernel_rem_pio2+0x10e>
 80065da:	d107      	bne.n	80065ec <__kernel_rem_pio2+0x264>
 80065dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80065e0:	aa0c      	add	r2, sp, #48	@ 0x30
 80065e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065e6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80065ea:	e79e      	b.n	800652a <__kernel_rem_pio2+0x1a2>
 80065ec:	4b2f      	ldr	r3, [pc, #188]	@ (80066ac <__kernel_rem_pio2+0x324>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	f7fa fa2c 	bl	8000a4c <__aeabi_dcmpge>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d143      	bne.n	8006680 <__kernel_rem_pio2+0x2f8>
 80065f8:	4681      	mov	r9, r0
 80065fa:	2200      	movs	r2, #0
 80065fc:	2300      	movs	r3, #0
 80065fe:	4630      	mov	r0, r6
 8006600:	4639      	mov	r1, r7
 8006602:	f7fa fa05 	bl	8000a10 <__aeabi_dcmpeq>
 8006606:	2800      	cmp	r0, #0
 8006608:	f000 80bf 	beq.w	800678a <__kernel_rem_pio2+0x402>
 800660c:	f108 33ff 	add.w	r3, r8, #4294967295
 8006610:	2200      	movs	r2, #0
 8006612:	9900      	ldr	r1, [sp, #0]
 8006614:	428b      	cmp	r3, r1
 8006616:	da6e      	bge.n	80066f6 <__kernel_rem_pio2+0x36e>
 8006618:	2a00      	cmp	r2, #0
 800661a:	f000 8089 	beq.w	8006730 <__kernel_rem_pio2+0x3a8>
 800661e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006622:	ab0c      	add	r3, sp, #48	@ 0x30
 8006624:	f1ab 0b18 	sub.w	fp, fp, #24
 8006628:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0f6      	beq.n	800661e <__kernel_rem_pio2+0x296>
 8006630:	4658      	mov	r0, fp
 8006632:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006690 <__kernel_rem_pio2+0x308>
 8006636:	f000 f9ff 	bl	8006a38 <scalbn>
 800663a:	f108 0301 	add.w	r3, r8, #1
 800663e:	00da      	lsls	r2, r3, #3
 8006640:	9205      	str	r2, [sp, #20]
 8006642:	ec55 4b10 	vmov	r4, r5, d0
 8006646:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006648:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80066a4 <__kernel_rem_pio2+0x31c>
 800664c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006650:	4646      	mov	r6, r8
 8006652:	f04f 0a00 	mov.w	sl, #0
 8006656:	2e00      	cmp	r6, #0
 8006658:	f280 80cf 	bge.w	80067fa <__kernel_rem_pio2+0x472>
 800665c:	4644      	mov	r4, r8
 800665e:	2c00      	cmp	r4, #0
 8006660:	f2c0 80fd 	blt.w	800685e <__kernel_rem_pio2+0x4d6>
 8006664:	4b12      	ldr	r3, [pc, #72]	@ (80066b0 <__kernel_rem_pio2+0x328>)
 8006666:	461f      	mov	r7, r3
 8006668:	ab70      	add	r3, sp, #448	@ 0x1c0
 800666a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800666e:	9306      	str	r3, [sp, #24]
 8006670:	f04f 0a00 	mov.w	sl, #0
 8006674:	f04f 0b00 	mov.w	fp, #0
 8006678:	2600      	movs	r6, #0
 800667a:	eba8 0504 	sub.w	r5, r8, r4
 800667e:	e0e2      	b.n	8006846 <__kernel_rem_pio2+0x4be>
 8006680:	f04f 0902 	mov.w	r9, #2
 8006684:	e754      	b.n	8006530 <__kernel_rem_pio2+0x1a8>
 8006686:	bf00      	nop
	...
 8006694:	3ff00000 	.word	0x3ff00000
 8006698:	08006e58 	.word	0x08006e58
 800669c:	40200000 	.word	0x40200000
 80066a0:	3ff00000 	.word	0x3ff00000
 80066a4:	3e700000 	.word	0x3e700000
 80066a8:	41700000 	.word	0x41700000
 80066ac:	3fe00000 	.word	0x3fe00000
 80066b0:	08006e18 	.word	0x08006e18
 80066b4:	f854 3b04 	ldr.w	r3, [r4], #4
 80066b8:	b945      	cbnz	r5, 80066cc <__kernel_rem_pio2+0x344>
 80066ba:	b123      	cbz	r3, 80066c6 <__kernel_rem_pio2+0x33e>
 80066bc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80066c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80066c4:	2301      	movs	r3, #1
 80066c6:	3201      	adds	r2, #1
 80066c8:	461d      	mov	r5, r3
 80066ca:	e738      	b.n	800653e <__kernel_rem_pio2+0x1b6>
 80066cc:	1acb      	subs	r3, r1, r3
 80066ce:	e7f7      	b.n	80066c0 <__kernel_rem_pio2+0x338>
 80066d0:	f108 32ff 	add.w	r2, r8, #4294967295
 80066d4:	ab0c      	add	r3, sp, #48	@ 0x30
 80066d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066da:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80066de:	a90c      	add	r1, sp, #48	@ 0x30
 80066e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80066e4:	e739      	b.n	800655a <__kernel_rem_pio2+0x1d2>
 80066e6:	f108 32ff 	add.w	r2, r8, #4294967295
 80066ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80066ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80066f4:	e7f3      	b.n	80066de <__kernel_rem_pio2+0x356>
 80066f6:	a90c      	add	r1, sp, #48	@ 0x30
 80066f8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	430a      	orrs	r2, r1
 8006700:	e787      	b.n	8006612 <__kernel_rem_pio2+0x28a>
 8006702:	3401      	adds	r4, #1
 8006704:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006708:	2a00      	cmp	r2, #0
 800670a:	d0fa      	beq.n	8006702 <__kernel_rem_pio2+0x37a>
 800670c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800670e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006712:	eb0d 0503 	add.w	r5, sp, r3
 8006716:	9b06      	ldr	r3, [sp, #24]
 8006718:	aa20      	add	r2, sp, #128	@ 0x80
 800671a:	4443      	add	r3, r8
 800671c:	f108 0701 	add.w	r7, r8, #1
 8006720:	3d98      	subs	r5, #152	@ 0x98
 8006722:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006726:	4444      	add	r4, r8
 8006728:	42bc      	cmp	r4, r7
 800672a:	da04      	bge.n	8006736 <__kernel_rem_pio2+0x3ae>
 800672c:	46a0      	mov	r8, r4
 800672e:	e6a2      	b.n	8006476 <__kernel_rem_pio2+0xee>
 8006730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006732:	2401      	movs	r4, #1
 8006734:	e7e6      	b.n	8006704 <__kernel_rem_pio2+0x37c>
 8006736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006738:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800673c:	f7f9 fe96 	bl	800046c <__aeabi_i2d>
 8006740:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006a08 <__kernel_rem_pio2+0x680>
 8006744:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006748:	ed8d 7b02 	vstr	d7, [sp, #8]
 800674c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006750:	46b2      	mov	sl, r6
 8006752:	f04f 0800 	mov.w	r8, #0
 8006756:	9b05      	ldr	r3, [sp, #20]
 8006758:	4598      	cmp	r8, r3
 800675a:	dd05      	ble.n	8006768 <__kernel_rem_pio2+0x3e0>
 800675c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006760:	3701      	adds	r7, #1
 8006762:	eca5 7b02 	vstmia	r5!, {d7}
 8006766:	e7df      	b.n	8006728 <__kernel_rem_pio2+0x3a0>
 8006768:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800676c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006770:	f7f9 fee6 	bl	8000540 <__aeabi_dmul>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800677c:	f7f9 fd2a 	bl	80001d4 <__adddf3>
 8006780:	f108 0801 	add.w	r8, r8, #1
 8006784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006788:	e7e5      	b.n	8006756 <__kernel_rem_pio2+0x3ce>
 800678a:	f1cb 0000 	rsb	r0, fp, #0
 800678e:	ec47 6b10 	vmov	d0, r6, r7
 8006792:	f000 f951 	bl	8006a38 <scalbn>
 8006796:	ec55 4b10 	vmov	r4, r5, d0
 800679a:	4b9d      	ldr	r3, [pc, #628]	@ (8006a10 <__kernel_rem_pio2+0x688>)
 800679c:	2200      	movs	r2, #0
 800679e:	4620      	mov	r0, r4
 80067a0:	4629      	mov	r1, r5
 80067a2:	f7fa f953 	bl	8000a4c <__aeabi_dcmpge>
 80067a6:	b300      	cbz	r0, 80067ea <__kernel_rem_pio2+0x462>
 80067a8:	4b9a      	ldr	r3, [pc, #616]	@ (8006a14 <__kernel_rem_pio2+0x68c>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	4620      	mov	r0, r4
 80067ae:	4629      	mov	r1, r5
 80067b0:	f7f9 fec6 	bl	8000540 <__aeabi_dmul>
 80067b4:	f7fa f95e 	bl	8000a74 <__aeabi_d2iz>
 80067b8:	4606      	mov	r6, r0
 80067ba:	f7f9 fe57 	bl	800046c <__aeabi_i2d>
 80067be:	4b94      	ldr	r3, [pc, #592]	@ (8006a10 <__kernel_rem_pio2+0x688>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	f7f9 febd 	bl	8000540 <__aeabi_dmul>
 80067c6:	460b      	mov	r3, r1
 80067c8:	4602      	mov	r2, r0
 80067ca:	4629      	mov	r1, r5
 80067cc:	4620      	mov	r0, r4
 80067ce:	f7f9 fcff 	bl	80001d0 <__aeabi_dsub>
 80067d2:	f7fa f94f 	bl	8000a74 <__aeabi_d2iz>
 80067d6:	ab0c      	add	r3, sp, #48	@ 0x30
 80067d8:	f10b 0b18 	add.w	fp, fp, #24
 80067dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80067e0:	f108 0801 	add.w	r8, r8, #1
 80067e4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80067e8:	e722      	b.n	8006630 <__kernel_rem_pio2+0x2a8>
 80067ea:	4620      	mov	r0, r4
 80067ec:	4629      	mov	r1, r5
 80067ee:	f7fa f941 	bl	8000a74 <__aeabi_d2iz>
 80067f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80067f4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80067f8:	e71a      	b.n	8006630 <__kernel_rem_pio2+0x2a8>
 80067fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80067fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006800:	f7f9 fe34 	bl	800046c <__aeabi_i2d>
 8006804:	4622      	mov	r2, r4
 8006806:	462b      	mov	r3, r5
 8006808:	f7f9 fe9a 	bl	8000540 <__aeabi_dmul>
 800680c:	4652      	mov	r2, sl
 800680e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006812:	465b      	mov	r3, fp
 8006814:	4620      	mov	r0, r4
 8006816:	4629      	mov	r1, r5
 8006818:	f7f9 fe92 	bl	8000540 <__aeabi_dmul>
 800681c:	3e01      	subs	r6, #1
 800681e:	4604      	mov	r4, r0
 8006820:	460d      	mov	r5, r1
 8006822:	e718      	b.n	8006656 <__kernel_rem_pio2+0x2ce>
 8006824:	9906      	ldr	r1, [sp, #24]
 8006826:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800682a:	9106      	str	r1, [sp, #24]
 800682c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006830:	f7f9 fe86 	bl	8000540 <__aeabi_dmul>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4650      	mov	r0, sl
 800683a:	4659      	mov	r1, fp
 800683c:	f7f9 fcca 	bl	80001d4 <__adddf3>
 8006840:	3601      	adds	r6, #1
 8006842:	4682      	mov	sl, r0
 8006844:	468b      	mov	fp, r1
 8006846:	9b00      	ldr	r3, [sp, #0]
 8006848:	429e      	cmp	r6, r3
 800684a:	dc01      	bgt.n	8006850 <__kernel_rem_pio2+0x4c8>
 800684c:	42b5      	cmp	r5, r6
 800684e:	dae9      	bge.n	8006824 <__kernel_rem_pio2+0x49c>
 8006850:	ab48      	add	r3, sp, #288	@ 0x120
 8006852:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006856:	e9c5 ab00 	strd	sl, fp, [r5]
 800685a:	3c01      	subs	r4, #1
 800685c:	e6ff      	b.n	800665e <__kernel_rem_pio2+0x2d6>
 800685e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006860:	2b02      	cmp	r3, #2
 8006862:	dc0b      	bgt.n	800687c <__kernel_rem_pio2+0x4f4>
 8006864:	2b00      	cmp	r3, #0
 8006866:	dc39      	bgt.n	80068dc <__kernel_rem_pio2+0x554>
 8006868:	d05d      	beq.n	8006926 <__kernel_rem_pio2+0x59e>
 800686a:	9b02      	ldr	r3, [sp, #8]
 800686c:	f003 0007 	and.w	r0, r3, #7
 8006870:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006874:	ecbd 8b02 	vpop	{d8}
 8006878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800687c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800687e:	2b03      	cmp	r3, #3
 8006880:	d1f3      	bne.n	800686a <__kernel_rem_pio2+0x4e2>
 8006882:	9b05      	ldr	r3, [sp, #20]
 8006884:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006888:	eb0d 0403 	add.w	r4, sp, r3
 800688c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006890:	4625      	mov	r5, r4
 8006892:	46c2      	mov	sl, r8
 8006894:	f1ba 0f00 	cmp.w	sl, #0
 8006898:	f1a5 0508 	sub.w	r5, r5, #8
 800689c:	dc6b      	bgt.n	8006976 <__kernel_rem_pio2+0x5ee>
 800689e:	4645      	mov	r5, r8
 80068a0:	2d01      	cmp	r5, #1
 80068a2:	f1a4 0408 	sub.w	r4, r4, #8
 80068a6:	f300 8087 	bgt.w	80069b8 <__kernel_rem_pio2+0x630>
 80068aa:	9c05      	ldr	r4, [sp, #20]
 80068ac:	ab48      	add	r3, sp, #288	@ 0x120
 80068ae:	441c      	add	r4, r3
 80068b0:	2000      	movs	r0, #0
 80068b2:	2100      	movs	r1, #0
 80068b4:	f1b8 0f01 	cmp.w	r8, #1
 80068b8:	f300 809c 	bgt.w	80069f4 <__kernel_rem_pio2+0x66c>
 80068bc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80068c0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80068c4:	f1b9 0f00 	cmp.w	r9, #0
 80068c8:	f040 80a6 	bne.w	8006a18 <__kernel_rem_pio2+0x690>
 80068cc:	9b04      	ldr	r3, [sp, #16]
 80068ce:	e9c3 7800 	strd	r7, r8, [r3]
 80068d2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80068d6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80068da:	e7c6      	b.n	800686a <__kernel_rem_pio2+0x4e2>
 80068dc:	9d05      	ldr	r5, [sp, #20]
 80068de:	ab48      	add	r3, sp, #288	@ 0x120
 80068e0:	441d      	add	r5, r3
 80068e2:	4644      	mov	r4, r8
 80068e4:	2000      	movs	r0, #0
 80068e6:	2100      	movs	r1, #0
 80068e8:	2c00      	cmp	r4, #0
 80068ea:	da35      	bge.n	8006958 <__kernel_rem_pio2+0x5d0>
 80068ec:	f1b9 0f00 	cmp.w	r9, #0
 80068f0:	d038      	beq.n	8006964 <__kernel_rem_pio2+0x5dc>
 80068f2:	4602      	mov	r2, r0
 80068f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80068f8:	9c04      	ldr	r4, [sp, #16]
 80068fa:	e9c4 2300 	strd	r2, r3, [r4]
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006906:	f7f9 fc63 	bl	80001d0 <__aeabi_dsub>
 800690a:	ad4a      	add	r5, sp, #296	@ 0x128
 800690c:	2401      	movs	r4, #1
 800690e:	45a0      	cmp	r8, r4
 8006910:	da2b      	bge.n	800696a <__kernel_rem_pio2+0x5e2>
 8006912:	f1b9 0f00 	cmp.w	r9, #0
 8006916:	d002      	beq.n	800691e <__kernel_rem_pio2+0x596>
 8006918:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800691c:	4619      	mov	r1, r3
 800691e:	9b04      	ldr	r3, [sp, #16]
 8006920:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006924:	e7a1      	b.n	800686a <__kernel_rem_pio2+0x4e2>
 8006926:	9c05      	ldr	r4, [sp, #20]
 8006928:	ab48      	add	r3, sp, #288	@ 0x120
 800692a:	441c      	add	r4, r3
 800692c:	2000      	movs	r0, #0
 800692e:	2100      	movs	r1, #0
 8006930:	f1b8 0f00 	cmp.w	r8, #0
 8006934:	da09      	bge.n	800694a <__kernel_rem_pio2+0x5c2>
 8006936:	f1b9 0f00 	cmp.w	r9, #0
 800693a:	d002      	beq.n	8006942 <__kernel_rem_pio2+0x5ba>
 800693c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006940:	4619      	mov	r1, r3
 8006942:	9b04      	ldr	r3, [sp, #16]
 8006944:	e9c3 0100 	strd	r0, r1, [r3]
 8006948:	e78f      	b.n	800686a <__kernel_rem_pio2+0x4e2>
 800694a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800694e:	f7f9 fc41 	bl	80001d4 <__adddf3>
 8006952:	f108 38ff 	add.w	r8, r8, #4294967295
 8006956:	e7eb      	b.n	8006930 <__kernel_rem_pio2+0x5a8>
 8006958:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800695c:	f7f9 fc3a 	bl	80001d4 <__adddf3>
 8006960:	3c01      	subs	r4, #1
 8006962:	e7c1      	b.n	80068e8 <__kernel_rem_pio2+0x560>
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	e7c6      	b.n	80068f8 <__kernel_rem_pio2+0x570>
 800696a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800696e:	f7f9 fc31 	bl	80001d4 <__adddf3>
 8006972:	3401      	adds	r4, #1
 8006974:	e7cb      	b.n	800690e <__kernel_rem_pio2+0x586>
 8006976:	ed95 7b00 	vldr	d7, [r5]
 800697a:	ed8d 7b00 	vstr	d7, [sp]
 800697e:	ed95 7b02 	vldr	d7, [r5, #8]
 8006982:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006986:	ec53 2b17 	vmov	r2, r3, d7
 800698a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800698e:	f7f9 fc21 	bl	80001d4 <__adddf3>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	4606      	mov	r6, r0
 8006998:	460f      	mov	r7, r1
 800699a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800699e:	f7f9 fc17 	bl	80001d0 <__aeabi_dsub>
 80069a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069a6:	f7f9 fc15 	bl	80001d4 <__adddf3>
 80069aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069ae:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80069b2:	e9c5 6700 	strd	r6, r7, [r5]
 80069b6:	e76d      	b.n	8006894 <__kernel_rem_pio2+0x50c>
 80069b8:	ed94 7b00 	vldr	d7, [r4]
 80069bc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80069c0:	ec51 0b17 	vmov	r0, r1, d7
 80069c4:	4652      	mov	r2, sl
 80069c6:	465b      	mov	r3, fp
 80069c8:	ed8d 7b00 	vstr	d7, [sp]
 80069cc:	f7f9 fc02 	bl	80001d4 <__adddf3>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4606      	mov	r6, r0
 80069d6:	460f      	mov	r7, r1
 80069d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069dc:	f7f9 fbf8 	bl	80001d0 <__aeabi_dsub>
 80069e0:	4652      	mov	r2, sl
 80069e2:	465b      	mov	r3, fp
 80069e4:	f7f9 fbf6 	bl	80001d4 <__adddf3>
 80069e8:	3d01      	subs	r5, #1
 80069ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80069ee:	e9c4 6700 	strd	r6, r7, [r4]
 80069f2:	e755      	b.n	80068a0 <__kernel_rem_pio2+0x518>
 80069f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80069f8:	f7f9 fbec 	bl	80001d4 <__adddf3>
 80069fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a00:	e758      	b.n	80068b4 <__kernel_rem_pio2+0x52c>
 8006a02:	bf00      	nop
 8006a04:	f3af 8000 	nop.w
	...
 8006a10:	41700000 	.word	0x41700000
 8006a14:	3e700000 	.word	0x3e700000
 8006a18:	9b04      	ldr	r3, [sp, #16]
 8006a1a:	9a04      	ldr	r2, [sp, #16]
 8006a1c:	601f      	str	r7, [r3, #0]
 8006a1e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006a22:	605c      	str	r4, [r3, #4]
 8006a24:	609d      	str	r5, [r3, #8]
 8006a26:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006a2a:	60d3      	str	r3, [r2, #12]
 8006a2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a30:	6110      	str	r0, [r2, #16]
 8006a32:	6153      	str	r3, [r2, #20]
 8006a34:	e719      	b.n	800686a <__kernel_rem_pio2+0x4e2>
 8006a36:	bf00      	nop

08006a38 <scalbn>:
 8006a38:	b570      	push	{r4, r5, r6, lr}
 8006a3a:	ec55 4b10 	vmov	r4, r5, d0
 8006a3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006a42:	4606      	mov	r6, r0
 8006a44:	462b      	mov	r3, r5
 8006a46:	b991      	cbnz	r1, 8006a6e <scalbn+0x36>
 8006a48:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006a4c:	4323      	orrs	r3, r4
 8006a4e:	d03d      	beq.n	8006acc <scalbn+0x94>
 8006a50:	4b35      	ldr	r3, [pc, #212]	@ (8006b28 <scalbn+0xf0>)
 8006a52:	4620      	mov	r0, r4
 8006a54:	4629      	mov	r1, r5
 8006a56:	2200      	movs	r2, #0
 8006a58:	f7f9 fd72 	bl	8000540 <__aeabi_dmul>
 8006a5c:	4b33      	ldr	r3, [pc, #204]	@ (8006b2c <scalbn+0xf4>)
 8006a5e:	429e      	cmp	r6, r3
 8006a60:	4604      	mov	r4, r0
 8006a62:	460d      	mov	r5, r1
 8006a64:	da0f      	bge.n	8006a86 <scalbn+0x4e>
 8006a66:	a328      	add	r3, pc, #160	@ (adr r3, 8006b08 <scalbn+0xd0>)
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	e01e      	b.n	8006aac <scalbn+0x74>
 8006a6e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006a72:	4291      	cmp	r1, r2
 8006a74:	d10b      	bne.n	8006a8e <scalbn+0x56>
 8006a76:	4622      	mov	r2, r4
 8006a78:	4620      	mov	r0, r4
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	f7f9 fbaa 	bl	80001d4 <__adddf3>
 8006a80:	4604      	mov	r4, r0
 8006a82:	460d      	mov	r5, r1
 8006a84:	e022      	b.n	8006acc <scalbn+0x94>
 8006a86:	460b      	mov	r3, r1
 8006a88:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006a8c:	3936      	subs	r1, #54	@ 0x36
 8006a8e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006a92:	4296      	cmp	r6, r2
 8006a94:	dd0d      	ble.n	8006ab2 <scalbn+0x7a>
 8006a96:	2d00      	cmp	r5, #0
 8006a98:	a11d      	add	r1, pc, #116	@ (adr r1, 8006b10 <scalbn+0xd8>)
 8006a9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a9e:	da02      	bge.n	8006aa6 <scalbn+0x6e>
 8006aa0:	a11d      	add	r1, pc, #116	@ (adr r1, 8006b18 <scalbn+0xe0>)
 8006aa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aa6:	a31a      	add	r3, pc, #104	@ (adr r3, 8006b10 <scalbn+0xd8>)
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	f7f9 fd48 	bl	8000540 <__aeabi_dmul>
 8006ab0:	e7e6      	b.n	8006a80 <scalbn+0x48>
 8006ab2:	1872      	adds	r2, r6, r1
 8006ab4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006ab8:	428a      	cmp	r2, r1
 8006aba:	dcec      	bgt.n	8006a96 <scalbn+0x5e>
 8006abc:	2a00      	cmp	r2, #0
 8006abe:	dd08      	ble.n	8006ad2 <scalbn+0x9a>
 8006ac0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006ac4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006ac8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006acc:	ec45 4b10 	vmov	d0, r4, r5
 8006ad0:	bd70      	pop	{r4, r5, r6, pc}
 8006ad2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006ad6:	da08      	bge.n	8006aea <scalbn+0xb2>
 8006ad8:	2d00      	cmp	r5, #0
 8006ada:	a10b      	add	r1, pc, #44	@ (adr r1, 8006b08 <scalbn+0xd0>)
 8006adc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ae0:	dac1      	bge.n	8006a66 <scalbn+0x2e>
 8006ae2:	a10f      	add	r1, pc, #60	@ (adr r1, 8006b20 <scalbn+0xe8>)
 8006ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ae8:	e7bd      	b.n	8006a66 <scalbn+0x2e>
 8006aea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006aee:	3236      	adds	r2, #54	@ 0x36
 8006af0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006af4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006af8:	4620      	mov	r0, r4
 8006afa:	4b0d      	ldr	r3, [pc, #52]	@ (8006b30 <scalbn+0xf8>)
 8006afc:	4629      	mov	r1, r5
 8006afe:	2200      	movs	r2, #0
 8006b00:	e7d4      	b.n	8006aac <scalbn+0x74>
 8006b02:	bf00      	nop
 8006b04:	f3af 8000 	nop.w
 8006b08:	c2f8f359 	.word	0xc2f8f359
 8006b0c:	01a56e1f 	.word	0x01a56e1f
 8006b10:	8800759c 	.word	0x8800759c
 8006b14:	7e37e43c 	.word	0x7e37e43c
 8006b18:	8800759c 	.word	0x8800759c
 8006b1c:	fe37e43c 	.word	0xfe37e43c
 8006b20:	c2f8f359 	.word	0xc2f8f359
 8006b24:	81a56e1f 	.word	0x81a56e1f
 8006b28:	43500000 	.word	0x43500000
 8006b2c:	ffff3cb0 	.word	0xffff3cb0
 8006b30:	3c900000 	.word	0x3c900000
 8006b34:	00000000 	.word	0x00000000

08006b38 <floor>:
 8006b38:	ec51 0b10 	vmov	r0, r1, d0
 8006b3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b44:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006b48:	2e13      	cmp	r6, #19
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	4680      	mov	r8, r0
 8006b50:	dc34      	bgt.n	8006bbc <floor+0x84>
 8006b52:	2e00      	cmp	r6, #0
 8006b54:	da17      	bge.n	8006b86 <floor+0x4e>
 8006b56:	a332      	add	r3, pc, #200	@ (adr r3, 8006c20 <floor+0xe8>)
 8006b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5c:	f7f9 fb3a 	bl	80001d4 <__adddf3>
 8006b60:	2200      	movs	r2, #0
 8006b62:	2300      	movs	r3, #0
 8006b64:	f7f9 ff7c 	bl	8000a60 <__aeabi_dcmpgt>
 8006b68:	b150      	cbz	r0, 8006b80 <floor+0x48>
 8006b6a:	2c00      	cmp	r4, #0
 8006b6c:	da55      	bge.n	8006c1a <floor+0xe2>
 8006b6e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006b72:	432c      	orrs	r4, r5
 8006b74:	2500      	movs	r5, #0
 8006b76:	42ac      	cmp	r4, r5
 8006b78:	4c2b      	ldr	r4, [pc, #172]	@ (8006c28 <floor+0xf0>)
 8006b7a:	bf08      	it	eq
 8006b7c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006b80:	4621      	mov	r1, r4
 8006b82:	4628      	mov	r0, r5
 8006b84:	e023      	b.n	8006bce <floor+0x96>
 8006b86:	4f29      	ldr	r7, [pc, #164]	@ (8006c2c <floor+0xf4>)
 8006b88:	4137      	asrs	r7, r6
 8006b8a:	ea01 0307 	and.w	r3, r1, r7
 8006b8e:	4303      	orrs	r3, r0
 8006b90:	d01d      	beq.n	8006bce <floor+0x96>
 8006b92:	a323      	add	r3, pc, #140	@ (adr r3, 8006c20 <floor+0xe8>)
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	f7f9 fb1c 	bl	80001d4 <__adddf3>
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f7f9 ff5e 	bl	8000a60 <__aeabi_dcmpgt>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d0eb      	beq.n	8006b80 <floor+0x48>
 8006ba8:	2c00      	cmp	r4, #0
 8006baa:	bfbe      	ittt	lt
 8006bac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006bb0:	4133      	asrlt	r3, r6
 8006bb2:	18e4      	addlt	r4, r4, r3
 8006bb4:	ea24 0407 	bic.w	r4, r4, r7
 8006bb8:	2500      	movs	r5, #0
 8006bba:	e7e1      	b.n	8006b80 <floor+0x48>
 8006bbc:	2e33      	cmp	r6, #51	@ 0x33
 8006bbe:	dd0a      	ble.n	8006bd6 <floor+0x9e>
 8006bc0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006bc4:	d103      	bne.n	8006bce <floor+0x96>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	f7f9 fb03 	bl	80001d4 <__adddf3>
 8006bce:	ec41 0b10 	vmov	d0, r0, r1
 8006bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006bda:	f04f 37ff 	mov.w	r7, #4294967295
 8006bde:	40df      	lsrs	r7, r3
 8006be0:	4207      	tst	r7, r0
 8006be2:	d0f4      	beq.n	8006bce <floor+0x96>
 8006be4:	a30e      	add	r3, pc, #56	@ (adr r3, 8006c20 <floor+0xe8>)
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	f7f9 faf3 	bl	80001d4 <__adddf3>
 8006bee:	2200      	movs	r2, #0
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f7f9 ff35 	bl	8000a60 <__aeabi_dcmpgt>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d0c2      	beq.n	8006b80 <floor+0x48>
 8006bfa:	2c00      	cmp	r4, #0
 8006bfc:	da0a      	bge.n	8006c14 <floor+0xdc>
 8006bfe:	2e14      	cmp	r6, #20
 8006c00:	d101      	bne.n	8006c06 <floor+0xce>
 8006c02:	3401      	adds	r4, #1
 8006c04:	e006      	b.n	8006c14 <floor+0xdc>
 8006c06:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	40b3      	lsls	r3, r6
 8006c0e:	441d      	add	r5, r3
 8006c10:	4545      	cmp	r5, r8
 8006c12:	d3f6      	bcc.n	8006c02 <floor+0xca>
 8006c14:	ea25 0507 	bic.w	r5, r5, r7
 8006c18:	e7b2      	b.n	8006b80 <floor+0x48>
 8006c1a:	2500      	movs	r5, #0
 8006c1c:	462c      	mov	r4, r5
 8006c1e:	e7af      	b.n	8006b80 <floor+0x48>
 8006c20:	8800759c 	.word	0x8800759c
 8006c24:	7e37e43c 	.word	0x7e37e43c
 8006c28:	bff00000 	.word	0xbff00000
 8006c2c:	000fffff 	.word	0x000fffff

08006c30 <_init>:
 8006c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c32:	bf00      	nop
 8006c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c36:	bc08      	pop	{r3}
 8006c38:	469e      	mov	lr, r3
 8006c3a:	4770      	bx	lr

08006c3c <_fini>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	bf00      	nop
 8006c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c42:	bc08      	pop	{r3}
 8006c44:	469e      	mov	lr, r3
 8006c46:	4770      	bx	lr
