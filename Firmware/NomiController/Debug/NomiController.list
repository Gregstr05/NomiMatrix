
NomiController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066d0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08006858  08006858  00007858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a78  08006a78  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  08006a78  08006a78  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a78  08006a78  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a78  08006a78  00007a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a7c  08006a7c  00007a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006a80  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002db4  2000000c  08006a8c  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002dc0  08006a8c  00008dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e090  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db0  00000000  00000000  000160cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00017e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009dd  00000000  00000000  00018b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b92d  00000000  00000000  000194e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106ee  00000000  00000000  00034e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5cc8  00000000  00000000  00045500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb1c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003878  00000000  00000000  000eb20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000eea84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006840 	.word	0x08006840

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006840 	.word	0x08006840

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <Set_LED_struct>:

	uint8_t LED_Data[MAX_LED][4];
	uint8_t LED_Mod[MAX_LED][4];  // for brightness

	void Set_LED_struct(int LEDnum, COLOUR colour)
	{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
		Set_LED(LEDnum, colour.r, colour.g, colour.b);
 8000bae:	f997 1000 	ldrsb.w	r1, [r7]
 8000bb2:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8000bb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f000 f804 	bl	8000bc8 <Set_LED>
	}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <Set_LED>:

	void Set_LED (int LEDnum, int8_t Red, int8_t Green, int8_t Blue)
		{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	70fb      	strb	r3, [r7, #3]
 8000bda:	460b      	mov	r3, r1
 8000bdc:	70bb      	strb	r3, [r7, #2]
 8000bde:	4613      	mov	r3, r2
 8000be0:	707b      	strb	r3, [r7, #1]
			LED_Data[LEDnum][0] = LEDnum;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	b2d9      	uxtb	r1, r3
 8000be6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c24 <Set_LED+0x5c>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
			LED_Data[LEDnum][1] = Green;
 8000bee:	78b9      	ldrb	r1, [r7, #2]
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c24 <Set_LED+0x5c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	705a      	strb	r2, [r3, #1]
			LED_Data[LEDnum][2] = Red;
 8000bfc:	78f9      	ldrb	r1, [r7, #3]
 8000bfe:	4a09      	ldr	r2, [pc, #36]	@ (8000c24 <Set_LED+0x5c>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	460a      	mov	r2, r1
 8000c08:	709a      	strb	r2, [r3, #2]
			LED_Data[LEDnum][3] = Blue;
 8000c0a:	7879      	ldrb	r1, [r7, #1]
 8000c0c:	4a05      	ldr	r2, [pc, #20]	@ (8000c24 <Set_LED+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	460a      	mov	r2, r1
 8000c16:	70da      	strb	r2, [r3, #3]
		}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	2000277c 	.word	0x2000277c

08000c28 <Set_Brightness>:

		#define PI 3.14159265

		void Set_Brightness (int8_t brightness)  // 0-45
		{
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
		#if USE_BRIGHTNESS

			if (brightness > 45) brightness = 45;
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b2d      	cmp	r3, #45	@ 0x2d
 8000c38:	dd01      	ble.n	8000c3e <Set_Brightness+0x16>
 8000c3a:	232d      	movs	r3, #45	@ 0x2d
 8000c3c:	71fb      	strb	r3, [r7, #7]
			for (int i=0; i<MAX_LED; i++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e061      	b.n	8000d08 <Set_Brightness+0xe0>
			{
				LED_Mod[i][0] = LED_Data[i][0];
 8000c44:	4a36      	ldr	r2, [pc, #216]	@ (8000d20 <Set_Brightness+0xf8>)
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000c4c:	4a35      	ldr	r2, [pc, #212]	@ (8000d24 <Set_Brightness+0xfc>)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
				for (int j=1; j<4; j++)
 8000c54:	2301      	movs	r3, #1
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	e050      	b.n	8000cfc <Set_Brightness+0xd4>
				{
					float angle = 90-brightness;  // in degrees
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8000c62:	ee07 3a90 	vmov	s15, r3
 8000c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c6a:	edc7 7a03 	vstr	s15, [r7, #12]
					angle = angle*PI / 180;  // in rad
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff fc0e 	bl	8000490 <__aeabi_f2d>
 8000c74:	a328      	add	r3, pc, #160	@ (adr r3, 8000d18 <Set_Brightness+0xf0>)
 8000c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7a:	f7ff fc61 	bl	8000540 <__aeabi_dmul>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	4610      	mov	r0, r2
 8000c84:	4619      	mov	r1, r3
 8000c86:	f04f 0200 	mov.w	r2, #0
 8000c8a:	4b27      	ldr	r3, [pc, #156]	@ (8000d28 <Set_Brightness+0x100>)
 8000c8c:	f7ff fd82 	bl	8000794 <__aeabi_ddiv>
 8000c90:	4602      	mov	r2, r0
 8000c92:	460b      	mov	r3, r1
 8000c94:	4610      	mov	r0, r2
 8000c96:	4619      	mov	r1, r3
 8000c98:	f7ff ff34 	bl	8000b04 <__aeabi_d2f>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60fb      	str	r3, [r7, #12]
					LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8000ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8000d20 <Set_Brightness+0xf8>)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	441a      	add	r2, r3
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4413      	add	r3, r2
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fbdc 	bl	800046c <__aeabi_i2d>
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	f7ff fbe9 	bl	8000490 <__aeabi_f2d>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	ec43 2b10 	vmov	d0, r2, r3
 8000cc6:	f004 fd2b 	bl	8005720 <tan>
 8000cca:	ec53 2b10 	vmov	r2, r3, d0
 8000cce:	4620      	mov	r0, r4
 8000cd0:	4629      	mov	r1, r5
 8000cd2:	f7ff fd5f 	bl	8000794 <__aeabi_ddiv>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	460b      	mov	r3, r1
 8000cda:	4610      	mov	r0, r2
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f7ff fef1 	bl	8000ac4 <__aeabi_d2uiz>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	b2d9      	uxtb	r1, r3
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d24 <Set_Brightness+0xfc>)
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	441a      	add	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	460a      	mov	r2, r1
 8000cf4:	701a      	strb	r2, [r3, #0]
				for (int j=1; j<4; j++)
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	ddab      	ble.n	8000c5a <Set_Brightness+0x32>
			for (int i=0; i<MAX_LED; i++)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8000d0c:	dd9a      	ble.n	8000c44 <Set_Brightness+0x1c>
				}
			}

		#endif

		}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bdb0      	pop	{r4, r5, r7, pc}
 8000d18:	53c8d4f1 	.word	0x53c8d4f1
 8000d1c:	400921fb 	.word	0x400921fb
 8000d20:	2000277c 	.word	0x2000277c
 8000d24:	20002a9c 	.word	0x20002a9c
 8000d28:	40668000 	.word	0x40668000

08000d2c <WS2812_Send>:

		void WS2812_Send (void)
		{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
			uint32_t indx=0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
			uint32_t color;


			for (int i= 0; i<MAX_LED; i++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	e036      	b.n	8000daa <WS2812_Send+0x7e>
			{
		#if USE_BRIGHTNESS
				color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8000d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8000df8 <WS2812_Send+0xcc>)
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	785b      	ldrb	r3, [r3, #1]
 8000d46:	041a      	lsls	r2, r3, #16
 8000d48:	492b      	ldr	r1, [pc, #172]	@ (8000df8 <WS2812_Send+0xcc>)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	440b      	add	r3, r1
 8000d50:	789b      	ldrb	r3, [r3, #2]
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	431a      	orrs	r2, r3
 8000d56:	4928      	ldr	r1, [pc, #160]	@ (8000df8 <WS2812_Send+0xcc>)
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	78db      	ldrb	r3, [r3, #3]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	607b      	str	r3, [r7, #4]
		#else
				color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
		#endif

				for (int i=23; i>=0; i--)
 8000d64:	2317      	movs	r3, #23
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	e019      	b.n	8000d9e <WS2812_Send+0x72>
				{
					if (color&(1<<i))
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4013      	ands	r3, r2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d005      	beq.n	8000d88 <WS2812_Send+0x5c>
					{
						pwmData[indx] = 60;  // 2/3 of 90
 8000d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8000dfc <WS2812_Send+0xd0>)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	213c      	movs	r1, #60	@ 0x3c
 8000d82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d86:	e004      	b.n	8000d92 <WS2812_Send+0x66>
					}

					else pwmData[indx] = 30;  // 1/3 of 90
 8000d88:	4a1c      	ldr	r2, [pc, #112]	@ (8000dfc <WS2812_Send+0xd0>)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	211e      	movs	r1, #30
 8000d8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

					indx++;
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
				for (int i=23; i>=0; i--)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	dae2      	bge.n	8000d6a <WS2812_Send+0x3e>
			for (int i= 0; i<MAX_LED; i++)
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	3301      	adds	r3, #1
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	2bc7      	cmp	r3, #199	@ 0xc7
 8000dae:	ddc5      	ble.n	8000d3c <WS2812_Send+0x10>
				}

			}

			for (int i=0; i<50; i++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	e00a      	b.n	8000dcc <WS2812_Send+0xa0>
			{
				pwmData[indx] = 0;
 8000db6:	4a11      	ldr	r2, [pc, #68]	@ (8000dfc <WS2812_Send+0xd0>)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	2100      	movs	r1, #0
 8000dbc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				indx++;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
			for (int i=0; i<50; i++)
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	2b31      	cmp	r3, #49	@ 0x31
 8000dd0:	ddf1      	ble.n	8000db6 <WS2812_Send+0x8a>
			}

			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	4a09      	ldr	r2, [pc, #36]	@ (8000dfc <WS2812_Send+0xd0>)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4809      	ldr	r0, [pc, #36]	@ (8000e00 <WS2812_Send+0xd4>)
 8000ddc:	f002 fe78 	bl	8003ad0 <HAL_TIM_PWM_Start_DMA>
			while (!datasentflag){};
 8000de0:	bf00      	nop
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <WS2812_Send+0xd8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0fb      	beq.n	8000de2 <WS2812_Send+0xb6>
			datasentflag = 0;
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <WS2812_Send+0xd8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
		}
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20002a9c 	.word	0x20002a9c
 8000dfc:	20000194 	.word	0x20000194
 8000e00:	20000028 	.word	0x20000028
 8000e04:	20002778 	.word	0x20002778

08000e08 <HAL_TIM_PWM_PulseFinishedCallback>:

		void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
		{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000e10:	2100      	movs	r1, #0
 8000e12:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000e14:	f003 f85a 	bl	8003ecc <HAL_TIM_PWM_Stop_DMA>
			datasentflag=1;
 8000e18:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]
		}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000028 	.word	0x20000028
 8000e2c:	20002778 	.word	0x20002778

08000e30 <Shift>:

		void Shift(void)
		{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
			COLOUR help;
			if(state == 6)
 8000e36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <Shift+0x74>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d102      	bne.n	8000e44 <Shift+0x14>
				state = 0;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <Shift+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]

			help = rainbow[0];
 8000e44:	4a18      	ldr	r2, [pc, #96]	@ (8000ea8 <Shift+0x78>)
 8000e46:	463b      	mov	r3, r7
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	8019      	strh	r1, [r3, #0]
 8000e4e:	3302      	adds	r3, #2
 8000e50:	0c12      	lsrs	r2, r2, #16
 8000e52:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<5; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	e014      	b.n	8000e84 <Shift+0x54>
			{
				rainbow[i] = rainbow[i+1];
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	4812      	ldr	r0, [pc, #72]	@ (8000ea8 <Shift+0x78>)
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	460b      	mov	r3, r1
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	440b      	add	r3, r1
 8000e68:	4418      	add	r0, r3
 8000e6a:	490f      	ldr	r1, [pc, #60]	@ (8000ea8 <Shift+0x78>)
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	18ca      	adds	r2, r1, r3
 8000e74:	4603      	mov	r3, r0
 8000e76:	8811      	ldrh	r1, [r2, #0]
 8000e78:	7892      	ldrb	r2, [r2, #2]
 8000e7a:	8019      	strh	r1, [r3, #0]
 8000e7c:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i<5; i++)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3301      	adds	r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	dde7      	ble.n	8000e5a <Shift+0x2a>
			}
			rainbow[5] = help;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <Shift+0x78>)
 8000e8c:	330f      	adds	r3, #15
 8000e8e:	463a      	mov	r2, r7
 8000e90:	8811      	ldrh	r1, [r2, #0]
 8000e92:	7892      	ldrb	r2, [r2, #2]
 8000e94:	8019      	strh	r1, [r3, #0]
 8000e96:	709a      	strb	r2, [r3, #2]

		}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	20000190 	.word	0x20000190
 8000ea8:	20000140 	.word	0x20000140

08000eac <shiftActive>:

		void shiftActive(void)
		{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
			Shift();
 8000eb2:	f7ff ffbd 	bl	8000e30 <Shift>
			for(int i = 0; i<MAX_LED/10; i++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	e019      	b.n	8000ef0 <shiftActive+0x44>
			{
				activeRainbow[i] = rainbow[((i)<6)?i:(i)-6];
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b05      	cmp	r3, #5
 8000ec0:	dd02      	ble.n	8000ec8 <shiftActive+0x1c>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	1f9a      	subs	r2, r3, #6
 8000ec6:	e000      	b.n	8000eca <shiftActive+0x1e>
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <shiftActive+0x54>)
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	440b      	add	r3, r1
 8000ed4:	4418      	add	r0, r3
 8000ed6:	490b      	ldr	r1, [pc, #44]	@ (8000f04 <shiftActive+0x58>)
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	18ca      	adds	r2, r1, r3
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	8811      	ldrh	r1, [r2, #0]
 8000ee4:	7892      	ldrb	r2, [r2, #2]
 8000ee6:	8019      	strh	r1, [r3, #0]
 8000ee8:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i<MAX_LED/10; i++)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3301      	adds	r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b13      	cmp	r3, #19
 8000ef4:	dde2      	ble.n	8000ebc <shiftActive+0x10>
			}
		}
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000154 	.word	0x20000154
 8000f04:	20000140 	.word	0x20000140

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0e:	f000 fc27 	bl	8001760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f12:	f000 f8f5 	bl	8001100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f16:	f000 fa49 	bl	80013ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000f1a:	f000 fa29 	bl	8001370 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f1e:	f000 f9f7 	bl	8001310 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f22:	f000 f949 	bl	80011b8 <MX_TIM1_Init>

  	  Set_LED(4, 156, 233, 100);
  	  Set_LED(5, 102, 0, 235);
  	  Set_LED(6, 47, 38, 77);
*/
  rainbow[0] = (COLOUR) {255, 0, 0};
 8000f26:	4b70      	ldr	r3, [pc, #448]	@ (80010e8 <main+0x1e0>)
 8000f28:	22ff      	movs	r2, #255	@ 0xff
 8000f2a:	701a      	strb	r2, [r3, #0]
 8000f2c:	4b6e      	ldr	r3, [pc, #440]	@ (80010e8 <main+0x1e0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	705a      	strb	r2, [r3, #1]
 8000f32:	4b6d      	ldr	r3, [pc, #436]	@ (80010e8 <main+0x1e0>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	709a      	strb	r2, [r3, #2]
  rainbow[1] = (COLOUR) {255, 140, 0};
 8000f38:	4b6b      	ldr	r3, [pc, #428]	@ (80010e8 <main+0x1e0>)
 8000f3a:	4a6c      	ldr	r2, [pc, #432]	@ (80010ec <main+0x1e4>)
 8000f3c:	3303      	adds	r3, #3
 8000f3e:	8811      	ldrh	r1, [r2, #0]
 8000f40:	7892      	ldrb	r2, [r2, #2]
 8000f42:	8019      	strh	r1, [r3, #0]
 8000f44:	709a      	strb	r2, [r3, #2]
  rainbow[2] = (COLOUR) {255, 255, 0};
 8000f46:	4b68      	ldr	r3, [pc, #416]	@ (80010e8 <main+0x1e0>)
 8000f48:	4a69      	ldr	r2, [pc, #420]	@ (80010f0 <main+0x1e8>)
 8000f4a:	3306      	adds	r3, #6
 8000f4c:	8811      	ldrh	r1, [r2, #0]
 8000f4e:	7892      	ldrb	r2, [r2, #2]
 8000f50:	8019      	strh	r1, [r3, #0]
 8000f52:	709a      	strb	r2, [r3, #2]
  rainbow[3] = (COLOUR) {0, 255, 0};
 8000f54:	4b64      	ldr	r3, [pc, #400]	@ (80010e8 <main+0x1e0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	725a      	strb	r2, [r3, #9]
 8000f5a:	4b63      	ldr	r3, [pc, #396]	@ (80010e8 <main+0x1e0>)
 8000f5c:	22ff      	movs	r2, #255	@ 0xff
 8000f5e:	729a      	strb	r2, [r3, #10]
 8000f60:	4b61      	ldr	r3, [pc, #388]	@ (80010e8 <main+0x1e0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	72da      	strb	r2, [r3, #11]
  rainbow[4] = (COLOUR) {0, 0, 255};
 8000f66:	4b60      	ldr	r3, [pc, #384]	@ (80010e8 <main+0x1e0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	731a      	strb	r2, [r3, #12]
 8000f6c:	4b5e      	ldr	r3, [pc, #376]	@ (80010e8 <main+0x1e0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	735a      	strb	r2, [r3, #13]
 8000f72:	4b5d      	ldr	r3, [pc, #372]	@ (80010e8 <main+0x1e0>)
 8000f74:	22ff      	movs	r2, #255	@ 0xff
 8000f76:	739a      	strb	r2, [r3, #14]
  rainbow[5] = (COLOUR) {170, 0, 255};
 8000f78:	4b5b      	ldr	r3, [pc, #364]	@ (80010e8 <main+0x1e0>)
 8000f7a:	4a5e      	ldr	r2, [pc, #376]	@ (80010f4 <main+0x1ec>)
 8000f7c:	330f      	adds	r3, #15
 8000f7e:	8811      	ldrh	r1, [r2, #0]
 8000f80:	7892      	ldrb	r2, [r2, #2]
 8000f82:	8019      	strh	r1, [r3, #0]
 8000f84:	709a      	strb	r2, [r3, #2]
		  WS2812_Send();
		  HAL_Delay (500);
	  }
	  */

	  for (int i = 0; i<MAX_LED; i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	e098      	b.n	80010be <main+0x1b6>
	    {
	  	  if(i<10)
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	2b09      	cmp	r3, #9
 8000f90:	dc05      	bgt.n	8000f9e <main+0x96>
	  		  Set_LED_struct(i, activeRainbow[0]);
 8000f92:	4b59      	ldr	r3, [pc, #356]	@ (80010f8 <main+0x1f0>)
 8000f94:	6819      	ldr	r1, [r3, #0]
 8000f96:	69f8      	ldr	r0, [r7, #28]
 8000f98:	f7ff fe04 	bl	8000ba4 <Set_LED_struct>
 8000f9c:	e08c      	b.n	80010b8 <main+0x1b0>
	  	  else if(i<20)
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	2b13      	cmp	r3, #19
 8000fa2:	dc0f      	bgt.n	8000fc4 <main+0xbc>
	  		  Set_LED_struct(i, activeRainbow[1]);
 8000fa4:	4b54      	ldr	r3, [pc, #336]	@ (80010f8 <main+0x1f0>)
 8000fa6:	78da      	ldrb	r2, [r3, #3]
 8000fa8:	7919      	ldrb	r1, [r3, #4]
 8000faa:	0209      	lsls	r1, r1, #8
 8000fac:	430a      	orrs	r2, r1
 8000fae:	795b      	ldrb	r3, [r3, #5]
 8000fb0:	041b      	lsls	r3, r3, #16
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f362 0317 	bfi	r3, r2, #0, #24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	69f8      	ldr	r0, [r7, #28]
 8000fbe:	f7ff fdf1 	bl	8000ba4 <Set_LED_struct>
 8000fc2:	e079      	b.n	80010b8 <main+0x1b0>
	  	  else if(i<30)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	2b1d      	cmp	r3, #29
 8000fc8:	dc0c      	bgt.n	8000fe4 <main+0xdc>
	  		  Set_LED_struct(i, activeRainbow[2]);
 8000fca:	4b4b      	ldr	r3, [pc, #300]	@ (80010f8 <main+0x1f0>)
 8000fcc:	88da      	ldrh	r2, [r3, #6]
 8000fce:	7a1b      	ldrb	r3, [r3, #8]
 8000fd0:	041b      	lsls	r3, r3, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f362 0317 	bfi	r3, r2, #0, #24
 8000fda:	4619      	mov	r1, r3
 8000fdc:	69f8      	ldr	r0, [r7, #28]
 8000fde:	f7ff fde1 	bl	8000ba4 <Set_LED_struct>
 8000fe2:	e069      	b.n	80010b8 <main+0x1b0>
	  	  else if(i<40)
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	2b27      	cmp	r3, #39	@ 0x27
 8000fe8:	dc0f      	bgt.n	800100a <main+0x102>
	  		  Set_LED_struct(i, activeRainbow[3]);
 8000fea:	4b43      	ldr	r3, [pc, #268]	@ (80010f8 <main+0x1f0>)
 8000fec:	7a5a      	ldrb	r2, [r3, #9]
 8000fee:	7a99      	ldrb	r1, [r3, #10]
 8000ff0:	0209      	lsls	r1, r1, #8
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	7adb      	ldrb	r3, [r3, #11]
 8000ff6:	041b      	lsls	r3, r3, #16
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f362 0317 	bfi	r3, r2, #0, #24
 8001000:	4619      	mov	r1, r3
 8001002:	69f8      	ldr	r0, [r7, #28]
 8001004:	f7ff fdce 	bl	8000ba4 <Set_LED_struct>
 8001008:	e056      	b.n	80010b8 <main+0x1b0>
	  	  else if(i<50)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	2b31      	cmp	r3, #49	@ 0x31
 800100e:	dc05      	bgt.n	800101c <main+0x114>
	  		  Set_LED_struct(i, activeRainbow[4]);
 8001010:	4b39      	ldr	r3, [pc, #228]	@ (80010f8 <main+0x1f0>)
 8001012:	68d9      	ldr	r1, [r3, #12]
 8001014:	69f8      	ldr	r0, [r7, #28]
 8001016:	f7ff fdc5 	bl	8000ba4 <Set_LED_struct>
 800101a:	e04d      	b.n	80010b8 <main+0x1b0>
	  	  else if(i<60)
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001020:	dc0f      	bgt.n	8001042 <main+0x13a>
	  		  Set_LED_struct(i, activeRainbow[5]);
 8001022:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <main+0x1f0>)
 8001024:	7bda      	ldrb	r2, [r3, #15]
 8001026:	7c19      	ldrb	r1, [r3, #16]
 8001028:	0209      	lsls	r1, r1, #8
 800102a:	430a      	orrs	r2, r1
 800102c:	7c5b      	ldrb	r3, [r3, #17]
 800102e:	041b      	lsls	r3, r3, #16
 8001030:	431a      	orrs	r2, r3
 8001032:	2300      	movs	r3, #0
 8001034:	f362 0317 	bfi	r3, r2, #0, #24
 8001038:	4619      	mov	r1, r3
 800103a:	69f8      	ldr	r0, [r7, #28]
 800103c:	f7ff fdb2 	bl	8000ba4 <Set_LED_struct>
 8001040:	e03a      	b.n	80010b8 <main+0x1b0>
	  	  else if(i<70)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	2b45      	cmp	r3, #69	@ 0x45
 8001046:	dc0c      	bgt.n	8001062 <main+0x15a>
	  		  Set_LED_struct(i, activeRainbow[6]);
 8001048:	4b2b      	ldr	r3, [pc, #172]	@ (80010f8 <main+0x1f0>)
 800104a:	8a5a      	ldrh	r2, [r3, #18]
 800104c:	7d1b      	ldrb	r3, [r3, #20]
 800104e:	041b      	lsls	r3, r3, #16
 8001050:	431a      	orrs	r2, r3
 8001052:	2300      	movs	r3, #0
 8001054:	f362 0317 	bfi	r3, r2, #0, #24
 8001058:	4619      	mov	r1, r3
 800105a:	69f8      	ldr	r0, [r7, #28]
 800105c:	f7ff fda2 	bl	8000ba4 <Set_LED_struct>
 8001060:	e02a      	b.n	80010b8 <main+0x1b0>
	  	  else if(i<80)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	2b4f      	cmp	r3, #79	@ 0x4f
 8001066:	dc0f      	bgt.n	8001088 <main+0x180>
	  		  Set_LED_struct(i, activeRainbow[7]);
 8001068:	4b23      	ldr	r3, [pc, #140]	@ (80010f8 <main+0x1f0>)
 800106a:	7d5a      	ldrb	r2, [r3, #21]
 800106c:	7d99      	ldrb	r1, [r3, #22]
 800106e:	0209      	lsls	r1, r1, #8
 8001070:	430a      	orrs	r2, r1
 8001072:	7ddb      	ldrb	r3, [r3, #23]
 8001074:	041b      	lsls	r3, r3, #16
 8001076:	431a      	orrs	r2, r3
 8001078:	2300      	movs	r3, #0
 800107a:	f362 0317 	bfi	r3, r2, #0, #24
 800107e:	4619      	mov	r1, r3
 8001080:	69f8      	ldr	r0, [r7, #28]
 8001082:	f7ff fd8f 	bl	8000ba4 <Set_LED_struct>
 8001086:	e017      	b.n	80010b8 <main+0x1b0>
	  	  else if(i<90)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b59      	cmp	r3, #89	@ 0x59
 800108c:	dc05      	bgt.n	800109a <main+0x192>
	  		  Set_LED_struct(i, activeRainbow[8]);
 800108e:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <main+0x1f0>)
 8001090:	6999      	ldr	r1, [r3, #24]
 8001092:	69f8      	ldr	r0, [r7, #28]
 8001094:	f7ff fd86 	bl	8000ba4 <Set_LED_struct>
 8001098:	e00e      	b.n	80010b8 <main+0x1b0>
	  	  else
	  		  Set_LED_struct(i, activeRainbow[9]);
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <main+0x1f0>)
 800109c:	7eda      	ldrb	r2, [r3, #27]
 800109e:	7f19      	ldrb	r1, [r3, #28]
 80010a0:	0209      	lsls	r1, r1, #8
 80010a2:	430a      	orrs	r2, r1
 80010a4:	7f5b      	ldrb	r3, [r3, #29]
 80010a6:	041b      	lsls	r3, r3, #16
 80010a8:	431a      	orrs	r2, r3
 80010aa:	2300      	movs	r3, #0
 80010ac:	f362 0317 	bfi	r3, r2, #0, #24
 80010b0:	4619      	mov	r1, r3
 80010b2:	69f8      	ldr	r0, [r7, #28]
 80010b4:	f7ff fd76 	bl	8000ba4 <Set_LED_struct>
	  for (int i = 0; i<MAX_LED; i++)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	3301      	adds	r3, #1
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80010c2:	f77f af63 	ble.w	8000f8c <main+0x84>
	    }
	  Set_Brightness(5);
 80010c6:	2005      	movs	r0, #5
 80010c8:	f7ff fdae 	bl	8000c28 <Set_Brightness>
	  		  WS2812_Send();
 80010cc:	f7ff fe2e 	bl	8000d2c <WS2812_Send>
	  		  HAL_Delay (100);
 80010d0:	2064      	movs	r0, #100	@ 0x64
 80010d2:	f000 fbab 	bl	800182c <HAL_Delay>
	  		  state++;
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <main+0x1f4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <main+0x1f4>)
 80010de:	6013      	str	r3, [r2, #0]
	  shiftActive();
 80010e0:	f7ff fee4 	bl	8000eac <shiftActive>
	  for (int i = 0; i<MAX_LED; i++)
 80010e4:	e74f      	b.n	8000f86 <main+0x7e>
 80010e6:	bf00      	nop
 80010e8:	20000140 	.word	0x20000140
 80010ec:	08006858 	.word	0x08006858
 80010f0:	0800685c 	.word	0x0800685c
 80010f4:	08006860 	.word	0x08006860
 80010f8:	20000154 	.word	0x20000154
 80010fc:	20000190 	.word	0x20000190

08001100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b09c      	sub	sp, #112	@ 0x70
 8001104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001106:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800110a:	2228      	movs	r2, #40	@ 0x28
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f004 fad9 	bl	80056c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001114:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	463b      	mov	r3, r7
 8001126:	2234      	movs	r2, #52	@ 0x34
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f004 facb 	bl	80056c6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001130:	2301      	movs	r3, #1
 8001132:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001134:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001138:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113e:	2301      	movs	r3, #1
 8001140:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001142:	2302      	movs	r3, #2
 8001144:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001146:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800114a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800114c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001150:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001152:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fffc 	bl	8002154 <HAL_RCC_OscConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001162:	f000 f999 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001166:	230f      	movs	r3, #15
 8001168:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116a:	2302      	movs	r3, #2
 800116c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001176:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800117c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001180:	2102      	movs	r1, #2
 8001182:	4618      	mov	r0, r3
 8001184:	f002 f824 	bl	80031d0 <HAL_RCC_ClockConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800118e:	f000 f983 	bl	8001498 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001192:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001196:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 fa4c 	bl	800363c <HAL_RCCEx_PeriphCLKConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011aa:	f000 f975 	bl	8001498 <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3770      	adds	r7, #112	@ 0x70
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b09a      	sub	sp, #104	@ 0x68
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
 80011e8:	615a      	str	r2, [r3, #20]
 80011ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	222c      	movs	r2, #44	@ 0x2c
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 fa67 	bl	80056c6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011f8:	4b43      	ldr	r3, [pc, #268]	@ (8001308 <MX_TIM1_Init+0x150>)
 80011fa:	4a44      	ldr	r2, [pc, #272]	@ (800130c <MX_TIM1_Init+0x154>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011fe:	4b42      	ldr	r3, [pc, #264]	@ (8001308 <MX_TIM1_Init+0x150>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001204:	4b40      	ldr	r3, [pc, #256]	@ (8001308 <MX_TIM1_Init+0x150>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 72-1;
 800120a:	4b3f      	ldr	r3, [pc, #252]	@ (8001308 <MX_TIM1_Init+0x150>)
 800120c:	2247      	movs	r2, #71	@ 0x47
 800120e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001210:	4b3d      	ldr	r3, [pc, #244]	@ (8001308 <MX_TIM1_Init+0x150>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001216:	4b3c      	ldr	r3, [pc, #240]	@ (8001308 <MX_TIM1_Init+0x150>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121c:	4b3a      	ldr	r3, [pc, #232]	@ (8001308 <MX_TIM1_Init+0x150>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001222:	4839      	ldr	r0, [pc, #228]	@ (8001308 <MX_TIM1_Init+0x150>)
 8001224:	f002 fb9c 	bl	8003960 <HAL_TIM_Base_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800122e:	f000 f933 	bl	8001498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001232:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001236:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001238:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800123c:	4619      	mov	r1, r3
 800123e:	4832      	ldr	r0, [pc, #200]	@ (8001308 <MX_TIM1_Init+0x150>)
 8001240:	f003 f848 	bl	80042d4 <HAL_TIM_ConfigClockSource>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800124a:	f000 f925 	bl	8001498 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800124e:	482e      	ldr	r0, [pc, #184]	@ (8001308 <MX_TIM1_Init+0x150>)
 8001250:	f002 fbdd 	bl	8003a0e <HAL_TIM_PWM_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800125a:	f000 f91d 	bl	8001498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800126a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800126e:	4619      	mov	r1, r3
 8001270:	4825      	ldr	r0, [pc, #148]	@ (8001308 <MX_TIM1_Init+0x150>)
 8001272:	f003 fdb1 	bl	8004dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800127c:	f000 f90c 	bl	8001498 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001280:	2360      	movs	r3, #96	@ 0x60
 8001282:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800128c:	2300      	movs	r3, #0
 800128e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800129c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012a0:	2200      	movs	r2, #0
 80012a2:	4619      	mov	r1, r3
 80012a4:	4818      	ldr	r0, [pc, #96]	@ (8001308 <MX_TIM1_Init+0x150>)
 80012a6:	f002 ff01 	bl	80040ac <HAL_TIM_PWM_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80012b0:	f000 f8f2 	bl	8001498 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4619      	mov	r1, r3
 80012e8:	4807      	ldr	r0, [pc, #28]	@ (8001308 <MX_TIM1_Init+0x150>)
 80012ea:	f003 fddb 	bl	8004ea4 <HAL_TIMEx_ConfigBreakDeadTime>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80012f4:	f000 f8d0 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012f8:	4803      	ldr	r0, [pc, #12]	@ (8001308 <MX_TIM1_Init+0x150>)
 80012fa:	f000 f941 	bl	8001580 <HAL_TIM_MspPostInit>

}
 80012fe:	bf00      	nop
 8001300:	3768      	adds	r7, #104	@ 0x68
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000028 	.word	0x20000028
 800130c:	40012c00 	.word	0x40012c00

08001310 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001314:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 8001316:	4a15      	ldr	r2, [pc, #84]	@ (800136c <MX_USART2_UART_Init+0x5c>)
 8001318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800131a:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 800131c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001346:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 8001354:	f003 fe1e 	bl	8004f94 <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800135e:	f000 f89b 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000b8 	.word	0x200000b8
 800136c:	40004400 	.word	0x40004400

08001370 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001376:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <MX_DMA_Init+0x38>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	4a0b      	ldr	r2, [pc, #44]	@ (80013a8 <MX_DMA_Init+0x38>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6153      	str	r3, [r2, #20]
 8001382:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <MX_DMA_Init+0x38>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	200c      	movs	r0, #12
 8001394:	f000 fb49 	bl	8001a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001398:	200c      	movs	r0, #12
 800139a:	f000 fb62 	bl	8001a62 <HAL_NVIC_EnableIRQ>

}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000

080013ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	@ 0x28
 80013b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	4b32      	ldr	r3, [pc, #200]	@ (800148c <MX_GPIO_Init+0xe0>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	4a31      	ldr	r2, [pc, #196]	@ (800148c <MX_GPIO_Init+0xe0>)
 80013c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013cc:	6153      	str	r3, [r2, #20]
 80013ce:	4b2f      	ldr	r3, [pc, #188]	@ (800148c <MX_GPIO_Init+0xe0>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013da:	4b2c      	ldr	r3, [pc, #176]	@ (800148c <MX_GPIO_Init+0xe0>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	4a2b      	ldr	r2, [pc, #172]	@ (800148c <MX_GPIO_Init+0xe0>)
 80013e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013e4:	6153      	str	r3, [r2, #20]
 80013e6:	4b29      	ldr	r3, [pc, #164]	@ (800148c <MX_GPIO_Init+0xe0>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <MX_GPIO_Init+0xe0>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	4a25      	ldr	r2, [pc, #148]	@ (800148c <MX_GPIO_Init+0xe0>)
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013fc:	6153      	str	r3, [r2, #20]
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <MX_GPIO_Init+0xe0>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	4b20      	ldr	r3, [pc, #128]	@ (800148c <MX_GPIO_Init+0xe0>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4a1f      	ldr	r2, [pc, #124]	@ (800148c <MX_GPIO_Init+0xe0>)
 8001410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001414:	6153      	str	r3, [r2, #20]
 8001416:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <MX_GPIO_Init+0xe0>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001428:	4819      	ldr	r0, [pc, #100]	@ (8001490 <MX_GPIO_Init+0xe4>)
 800142a:	f000 fe7b 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800142e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001434:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4813      	ldr	r0, [pc, #76]	@ (8001494 <MX_GPIO_Init+0xe8>)
 8001446:	f000 fcfb 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_Pin */
  GPIO_InitStruct.Pin = DATA_Pin;
 800144a:	2310      	movs	r3, #16
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800144e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	480d      	ldr	r0, [pc, #52]	@ (8001494 <MX_GPIO_Init+0xe8>)
 8001460:	f000 fcee 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001464:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	4804      	ldr	r0, [pc, #16]	@ (8001490 <MX_GPIO_Init+0xe4>)
 800147e:	f000 fcdf 	bl	8001e40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	@ 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	48000400 	.word	0x48000400
 8001494:	48000800 	.word	0x48000800

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <Error_Handler+0x8>

080014a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <HAL_MspInit+0x44>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	4a0e      	ldr	r2, [pc, #56]	@ (80014e8 <HAL_MspInit+0x44>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6193      	str	r3, [r2, #24]
 80014b6:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <HAL_MspInit+0x44>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <HAL_MspInit+0x44>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	4a08      	ldr	r2, [pc, #32]	@ (80014e8 <HAL_MspInit+0x44>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014cc:	61d3      	str	r3, [r2, #28]
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_MspInit+0x44>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014da:	2007      	movs	r0, #7
 80014dc:	f000 fa9a 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000

080014ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001570 <HAL_TIM_Base_MspInit+0x84>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d133      	bne.n	8001566 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <HAL_TIM_Base_MspInit+0x88>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	4a1c      	ldr	r2, [pc, #112]	@ (8001574 <HAL_TIM_Base_MspInit+0x88>)
 8001504:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001508:	6193      	str	r3, [r2, #24]
 800150a:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <HAL_TIM_Base_MspInit+0x88>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001516:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <HAL_TIM_Base_MspInit+0x8c>)
 8001518:	4a18      	ldr	r2, [pc, #96]	@ (800157c <HAL_TIM_Base_MspInit+0x90>)
 800151a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800151c:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <HAL_TIM_Base_MspInit+0x8c>)
 800151e:	2210      	movs	r2, #16
 8001520:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001522:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <HAL_TIM_Base_MspInit+0x8c>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001528:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <HAL_TIM_Base_MspInit+0x8c>)
 800152a:	2280      	movs	r2, #128	@ 0x80
 800152c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800152e:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <HAL_TIM_Base_MspInit+0x8c>)
 8001530:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001534:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <HAL_TIM_Base_MspInit+0x8c>)
 8001538:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800153c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <HAL_TIM_Base_MspInit+0x8c>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <HAL_TIM_Base_MspInit+0x8c>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800154a:	480b      	ldr	r0, [pc, #44]	@ (8001578 <HAL_TIM_Base_MspInit+0x8c>)
 800154c:	f000 faa3 	bl	8001a96 <HAL_DMA_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001556:	f7ff ff9f 	bl	8001498 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a06      	ldr	r2, [pc, #24]	@ (8001578 <HAL_TIM_Base_MspInit+0x8c>)
 800155e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001560:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <HAL_TIM_Base_MspInit+0x8c>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40012c00 	.word	0x40012c00
 8001574:	40021000 	.word	0x40021000
 8001578:	20000074 	.word	0x20000074
 800157c:	4002001c 	.word	0x4002001c

08001580 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a11      	ldr	r2, [pc, #68]	@ (80015e4 <HAL_TIM_MspPostInit+0x64>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d11b      	bne.n	80015da <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <HAL_TIM_MspPostInit+0x68>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	4a10      	ldr	r2, [pc, #64]	@ (80015e8 <HAL_TIM_MspPostInit+0x68>)
 80015a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015ac:	6153      	str	r3, [r2, #20]
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <HAL_TIM_MspPostInit+0x68>)
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ba:	2301      	movs	r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	@ (80015ec <HAL_TIM_MspPostInit+0x6c>)
 80015d6:	f000 fc33 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40012c00 	.word	0x40012c00
 80015e8:	40021000 	.word	0x40021000
 80015ec:	48000800 	.word	0x48000800

080015f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a17      	ldr	r2, [pc, #92]	@ (800166c <HAL_UART_MspInit+0x7c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d128      	bne.n	8001664 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001612:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <HAL_UART_MspInit+0x80>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4a16      	ldr	r2, [pc, #88]	@ (8001670 <HAL_UART_MspInit+0x80>)
 8001618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800161c:	61d3      	str	r3, [r2, #28]
 800161e:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <HAL_UART_MspInit+0x80>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <HAL_UART_MspInit+0x80>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	4a10      	ldr	r2, [pc, #64]	@ (8001670 <HAL_UART_MspInit+0x80>)
 8001630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001634:	6153      	str	r3, [r2, #20]
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <HAL_UART_MspInit+0x80>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001642:	230c      	movs	r3, #12
 8001644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001652:	2307      	movs	r3, #7
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001660:	f000 fbee 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	@ 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40004400 	.word	0x40004400
 8001670:	40021000 	.word	0x40021000

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <NMI_Handler+0x4>

0800167c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <MemManage_Handler+0x4>

0800168c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <BusFault_Handler+0x4>

08001694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <UsageFault_Handler+0x4>

0800169c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ca:	f000 f88f 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <DMA1_Channel2_IRQHandler+0x10>)
 80016da:	f000 fac0 	bl	8001c5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000074 	.word	0x20000074

080016e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <SystemInit+0x20>)
 80016ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016f2:	4a05      	ldr	r2, [pc, #20]	@ (8001708 <SystemInit+0x20>)
 80016f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001744 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001710:	f7ff ffea 	bl	80016e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001714:	480c      	ldr	r0, [pc, #48]	@ (8001748 <LoopForever+0x6>)
  ldr r1, =_edata
 8001716:	490d      	ldr	r1, [pc, #52]	@ (800174c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001718:	4a0d      	ldr	r2, [pc, #52]	@ (8001750 <LoopForever+0xe>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800172c:	4c0a      	ldr	r4, [pc, #40]	@ (8001758 <LoopForever+0x16>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173a:	f003 ffcd 	bl	80056d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800173e:	f7ff fbe3 	bl	8000f08 <main>

08001742 <LoopForever>:

LoopForever:
    b LoopForever
 8001742:	e7fe      	b.n	8001742 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001744:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800174c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001750:	08006a80 	.word	0x08006a80
  ldr r2, =_sbss
 8001754:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001758:	20002dc0 	.word	0x20002dc0

0800175c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC1_IRQHandler>
	...

08001760 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <HAL_Init+0x28>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a07      	ldr	r2, [pc, #28]	@ (8001788 <HAL_Init+0x28>)
 800176a:	f043 0310 	orr.w	r3, r3, #16
 800176e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001770:	2003      	movs	r0, #3
 8001772:	f000 f94f 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f808 	bl	800178c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800177c:	f7ff fe92 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40022000 	.word	0x40022000

0800178c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_InitTick+0x54>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <HAL_InitTick+0x58>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f967 	bl	8001a7e <HAL_SYSTICK_Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00e      	b.n	80017d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	d80a      	bhi.n	80017d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c0:	2200      	movs	r2, #0
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f000 f92f 	bl	8001a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4a06      	ldr	r2, [pc, #24]	@ (80017e8 <HAL_InitTick+0x5c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	@ (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008
 8001810:	20002dbc 	.word	0x20002dbc

08001814 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;  
 8001818:	4b03      	ldr	r3, [pc, #12]	@ (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20002dbc 	.word	0x20002dbc

0800182c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d005      	beq.n	8001852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001846:	4b0a      	ldr	r3, [pc, #40]	@ (8001870 <HAL_Delay+0x44>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001852:	bf00      	nop
 8001854:	f7ff ffde 	bl	8001814 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8f7      	bhi.n	8001854 <HAL_Delay+0x28>
  {
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000008 	.word	0x20000008

08001874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001884:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800189c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	@ (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c0:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <__NVIC_GetPriorityGrouping+0x18>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	f003 0307 	and.w	r3, r3, #7
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db0b      	blt.n	8001902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	f003 021f 	and.w	r2, r3, #31
 80018f0:	4907      	ldr	r1, [pc, #28]	@ (8001910 <__NVIC_EnableIRQ+0x38>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	2001      	movs	r0, #1
 80018fa:	fa00 f202 	lsl.w	r2, r0, r2
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	@ (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	@ (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	@ 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	@ 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f7ff ff8e 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff29 	bl	8001874 <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff3e 	bl	80018bc <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff8e 	bl	8001968 <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff5d 	bl	8001914 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff31 	bl	80018d8 <__NVIC_EnableIRQ>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffa2 	bl	80019d0 <SysTick_Config>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e037      	b.n	8001b1c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ac2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001ac6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f97e 	bl	8001e00 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}  
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_DMA_Start_IT+0x20>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e04a      	b.n	8001bda <HAL_DMA_Start_IT+0xb6>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d13a      	bne.n	8001bcc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0201 	bic.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f912 	bl	8001da4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 020e 	orr.w	r2, r2, #14
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e00f      	b.n	8001bba <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 020a 	orr.w	r2, r2, #10
 8001ba8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0204 	bic.w	r2, r2, #4
 8001bb8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 0201 	orr.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	e005      	b.n	8001bd8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d005      	beq.n	8001c04 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
 8001c02:	e027      	b.n	8001c54 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 020e 	bic.w	r2, r2, #14
 8001c12:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c32:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	4798      	blx	r3
    } 
  }
  return status;
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d024      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x72>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01f      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0320 	and.w	r3, r3, #32
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d107      	bne.n	8001cae <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0204 	bic.w	r2, r2, #4
 8001cac:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb6:	2104      	movs	r1, #4
 8001cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbc:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d06a      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001cce:	e065      	b.n	8001d9c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d02c      	beq.n	8001d3a <HAL_DMA_IRQHandler+0xdc>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d027      	beq.n	8001d3a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10b      	bne.n	8001d10 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 020a 	bic.w	r2, r2, #10
 8001d06:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d18:	2102      	movs	r1, #2
 8001d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d035      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001d38:	e030      	b.n	8001d9c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	2208      	movs	r2, #8
 8001d40:	409a      	lsls	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d028      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x13e>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d023      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 020e 	bic.w	r2, r2, #14
 8001d62:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d72:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d004      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	4798      	blx	r3
    }
  }
}  
 8001d9a:	e7ff      	b.n	8001d9c <HAL_DMA_IRQHandler+0x13e>
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d108      	bne.n	8001de4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001de2:	e007      	b.n	8001df4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	60da      	str	r2, [r3, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <DMA_CalcBaseAndBitshift+0x34>)
 8001e10:	4413      	add	r3, r2
 8001e12:	4a09      	ldr	r2, [pc, #36]	@ (8001e38 <DMA_CalcBaseAndBitshift+0x38>)
 8001e14:	fba2 2303 	umull	r2, r3, r2, r3
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	009a      	lsls	r2, r3, #2
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a06      	ldr	r2, [pc, #24]	@ (8001e3c <DMA_CalcBaseAndBitshift+0x3c>)
 8001e24:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	bffdfff8 	.word	0xbffdfff8
 8001e38:	cccccccd 	.word	0xcccccccd
 8001e3c:	40020000 	.word	0x40020000

08001e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	e14e      	b.n	80020ee <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2101      	movs	r1, #1
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8140 	beq.w	80020e8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d005      	beq.n	8001e80 <HAL_GPIO_Init+0x40>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d130      	bne.n	8001ee2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	091b      	lsrs	r3, r3, #4
 8001ecc:	f003 0201 	and.w	r2, r3, #1
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d017      	beq.n	8001f1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d123      	bne.n	8001f72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	08da      	lsrs	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3208      	adds	r2, #8
 8001f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	220f      	movs	r2, #15
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	08da      	lsrs	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3208      	adds	r2, #8
 8001f6c:	6939      	ldr	r1, [r7, #16]
 8001f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0203 	and.w	r2, r3, #3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 809a 	beq.w	80020e8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb4:	4b55      	ldr	r3, [pc, #340]	@ (800210c <HAL_GPIO_Init+0x2cc>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a54      	ldr	r2, [pc, #336]	@ (800210c <HAL_GPIO_Init+0x2cc>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b52      	ldr	r3, [pc, #328]	@ (800210c <HAL_GPIO_Init+0x2cc>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fcc:	4a50      	ldr	r2, [pc, #320]	@ (8002110 <HAL_GPIO_Init+0x2d0>)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ff6:	d013      	beq.n	8002020 <HAL_GPIO_Init+0x1e0>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a46      	ldr	r2, [pc, #280]	@ (8002114 <HAL_GPIO_Init+0x2d4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00d      	beq.n	800201c <HAL_GPIO_Init+0x1dc>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a45      	ldr	r2, [pc, #276]	@ (8002118 <HAL_GPIO_Init+0x2d8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d007      	beq.n	8002018 <HAL_GPIO_Init+0x1d8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a44      	ldr	r2, [pc, #272]	@ (800211c <HAL_GPIO_Init+0x2dc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_GPIO_Init+0x1d4>
 8002010:	2303      	movs	r3, #3
 8002012:	e006      	b.n	8002022 <HAL_GPIO_Init+0x1e2>
 8002014:	2305      	movs	r3, #5
 8002016:	e004      	b.n	8002022 <HAL_GPIO_Init+0x1e2>
 8002018:	2302      	movs	r3, #2
 800201a:	e002      	b.n	8002022 <HAL_GPIO_Init+0x1e2>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_GPIO_Init+0x1e2>
 8002020:	2300      	movs	r3, #0
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	f002 0203 	and.w	r2, r2, #3
 8002028:	0092      	lsls	r2, r2, #2
 800202a:	4093      	lsls	r3, r2
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002032:	4937      	ldr	r1, [pc, #220]	@ (8002110 <HAL_GPIO_Init+0x2d0>)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3302      	adds	r3, #2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002040:	4b37      	ldr	r3, [pc, #220]	@ (8002120 <HAL_GPIO_Init+0x2e0>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002064:	4a2e      	ldr	r2, [pc, #184]	@ (8002120 <HAL_GPIO_Init+0x2e0>)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800206a:	4b2d      	ldr	r3, [pc, #180]	@ (8002120 <HAL_GPIO_Init+0x2e0>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800208e:	4a24      	ldr	r2, [pc, #144]	@ (8002120 <HAL_GPIO_Init+0x2e0>)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002094:	4b22      	ldr	r3, [pc, #136]	@ (8002120 <HAL_GPIO_Init+0x2e0>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020b8:	4a19      	ldr	r2, [pc, #100]	@ (8002120 <HAL_GPIO_Init+0x2e0>)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020be:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <HAL_GPIO_Init+0x2e0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002120 <HAL_GPIO_Init+0x2e0>)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	3301      	adds	r3, #1
 80020ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f47f aea9 	bne.w	8001e50 <HAL_GPIO_Init+0x10>
  }
}
 80020fe:	bf00      	nop
 8002100:	bf00      	nop
 8002102:	371c      	adds	r7, #28
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40021000 	.word	0x40021000
 8002110:	40010000 	.word	0x40010000
 8002114:	48000400 	.word	0x48000400
 8002118:	48000800 	.word	0x48000800
 800211c:	48000c00 	.word	0x48000c00
 8002120:	40010400 	.word	0x40010400

08002124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
 8002130:	4613      	mov	r3, r2
 8002132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002134:	787b      	ldrb	r3, [r7, #1]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002140:	e002      	b.n	8002148 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002142:	887a      	ldrh	r2, [r7, #2]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800215a:	af00      	add	r7, sp, #0
 800215c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002160:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002164:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d102      	bne.n	800217a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	f001 b823 	b.w	80031c0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 817d 	beq.w	800248a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002190:	4bbc      	ldr	r3, [pc, #752]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b04      	cmp	r3, #4
 800219a:	d00c      	beq.n	80021b6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800219c:	4bb9      	ldr	r3, [pc, #740]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d15c      	bne.n	8002262 <HAL_RCC_OscConfig+0x10e>
 80021a8:	4bb6      	ldr	r3, [pc, #728]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b4:	d155      	bne.n	8002262 <HAL_RCC_OscConfig+0x10e>
 80021b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021ba:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d102      	bne.n	80021e8 <HAL_RCC_OscConfig+0x94>
 80021e2:	4ba8      	ldr	r3, [pc, #672]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	e015      	b.n	8002214 <HAL_RCC_OscConfig+0xc0>
 80021e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021ec:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80021fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002200:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002204:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002210:	4b9c      	ldr	r3, [pc, #624]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002218:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800221c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002220:	fa92 f2a2 	rbit	r2, r2
 8002224:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002228:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800222c:	fab2 f282 	clz	r2, r2
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	f042 0220 	orr.w	r2, r2, #32
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	f002 021f 	and.w	r2, r2, #31
 800223c:	2101      	movs	r1, #1
 800223e:	fa01 f202 	lsl.w	r2, r1, r2
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 811f 	beq.w	8002488 <HAL_RCC_OscConfig+0x334>
 800224a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f040 8116 	bne.w	8002488 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	f000 bfaf 	b.w	80031c0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002266:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002272:	d106      	bne.n	8002282 <HAL_RCC_OscConfig+0x12e>
 8002274:	4b83      	ldr	r3, [pc, #524]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a82      	ldr	r2, [pc, #520]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 800227a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e036      	b.n	80022f0 <HAL_RCC_OscConfig+0x19c>
 8002282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002286:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0x158>
 8002292:	4b7c      	ldr	r3, [pc, #496]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a7b      	ldr	r2, [pc, #492]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 8002298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b79      	ldr	r3, [pc, #484]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a78      	ldr	r2, [pc, #480]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 80022a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e021      	b.n	80022f0 <HAL_RCC_OscConfig+0x19c>
 80022ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x184>
 80022be:	4b71      	ldr	r3, [pc, #452]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a70      	ldr	r2, [pc, #448]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 80022c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a6d      	ldr	r2, [pc, #436]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e00b      	b.n	80022f0 <HAL_RCC_OscConfig+0x19c>
 80022d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a69      	ldr	r2, [pc, #420]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 80022de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	4b67      	ldr	r3, [pc, #412]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a66      	ldr	r2, [pc, #408]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 80022ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ee:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022f0:	4b64      	ldr	r3, [pc, #400]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 80022f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f4:	f023 020f 	bic.w	r2, r3, #15
 80022f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	495f      	ldr	r1, [pc, #380]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 8002306:	4313      	orrs	r3, r2
 8002308:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800230a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d059      	beq.n	80023ce <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7ff fa7b 	bl	8001814 <HAL_GetTick>
 800231e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	e00a      	b.n	800233a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002324:	f7ff fa76 	bl	8001814 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b64      	cmp	r3, #100	@ 0x64
 8002332:	d902      	bls.n	800233a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	f000 bf43 	b.w	80031c0 <HAL_RCC_OscConfig+0x106c>
 800233a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800233e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800234e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	095b      	lsrs	r3, r3, #5
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b01      	cmp	r3, #1
 8002364:	d102      	bne.n	800236c <HAL_RCC_OscConfig+0x218>
 8002366:	4b47      	ldr	r3, [pc, #284]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	e015      	b.n	8002398 <HAL_RCC_OscConfig+0x244>
 800236c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002370:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002380:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002384:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002388:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002394:	4b3b      	ldr	r3, [pc, #236]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002398:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800239c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80023a0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80023a4:	fa92 f2a2 	rbit	r2, r2
 80023a8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80023ac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80023b0:	fab2 f282 	clz	r2, r2
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	f042 0220 	orr.w	r2, r2, #32
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	f002 021f 	and.w	r2, r2, #31
 80023c0:	2101      	movs	r1, #1
 80023c2:	fa01 f202 	lsl.w	r2, r1, r2
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0ab      	beq.n	8002324 <HAL_RCC_OscConfig+0x1d0>
 80023cc:	e05d      	b.n	800248a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7ff fa21 	bl	8001814 <HAL_GetTick>
 80023d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d8:	f7ff fa1c 	bl	8001814 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b64      	cmp	r3, #100	@ 0x64
 80023e6:	d902      	bls.n	80023ee <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	f000 bee9 	b.w	80031c0 <HAL_RCC_OscConfig+0x106c>
 80023ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023f2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002402:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b01      	cmp	r3, #1
 8002418:	d102      	bne.n	8002420 <HAL_RCC_OscConfig+0x2cc>
 800241a:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	e015      	b.n	800244c <HAL_RCC_OscConfig+0x2f8>
 8002420:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002424:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002434:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002438:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800243c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002448:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <HAL_RCC_OscConfig+0x330>)
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002450:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002454:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002458:	fa92 f2a2 	rbit	r2, r2
 800245c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002460:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002464:	fab2 f282 	clz	r2, r2
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	f042 0220 	orr.w	r2, r2, #32
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	f002 021f 	and.w	r2, r2, #31
 8002474:	2101      	movs	r1, #1
 8002476:	fa01 f202 	lsl.w	r2, r1, r2
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1ab      	bne.n	80023d8 <HAL_RCC_OscConfig+0x284>
 8002480:	e003      	b.n	800248a <HAL_RCC_OscConfig+0x336>
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 817d 	beq.w	800279a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024a0:	4ba6      	ldr	r3, [pc, #664]	@ (800273c <HAL_RCC_OscConfig+0x5e8>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00b      	beq.n	80024c4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024ac:	4ba3      	ldr	r3, [pc, #652]	@ (800273c <HAL_RCC_OscConfig+0x5e8>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d172      	bne.n	800259e <HAL_RCC_OscConfig+0x44a>
 80024b8:	4ba0      	ldr	r3, [pc, #640]	@ (800273c <HAL_RCC_OscConfig+0x5e8>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d16c      	bne.n	800259e <HAL_RCC_OscConfig+0x44a>
 80024c4:	2302      	movs	r3, #2
 80024c6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80024d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d102      	bne.n	80024f4 <HAL_RCC_OscConfig+0x3a0>
 80024ee:	4b93      	ldr	r3, [pc, #588]	@ (800273c <HAL_RCC_OscConfig+0x5e8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	e013      	b.n	800251c <HAL_RCC_OscConfig+0x3c8>
 80024f4:	2302      	movs	r3, #2
 80024f6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002506:	2302      	movs	r3, #2
 8002508:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800250c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002518:	4b88      	ldr	r3, [pc, #544]	@ (800273c <HAL_RCC_OscConfig+0x5e8>)
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	2202      	movs	r2, #2
 800251e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002522:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002526:	fa92 f2a2 	rbit	r2, r2
 800252a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800252e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002532:	fab2 f282 	clz	r2, r2
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	f042 0220 	orr.w	r2, r2, #32
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	f002 021f 	and.w	r2, r2, #31
 8002542:	2101      	movs	r1, #1
 8002544:	fa01 f202 	lsl.w	r2, r1, r2
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCC_OscConfig+0x410>
 800254e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002552:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d002      	beq.n	8002564 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	f000 be2e 	b.w	80031c0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002564:	4b75      	ldr	r3, [pc, #468]	@ (800273c <HAL_RCC_OscConfig+0x5e8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800256c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002570:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	21f8      	movs	r1, #248	@ 0xf8
 800257a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002582:	fa91 f1a1 	rbit	r1, r1
 8002586:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800258a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800258e:	fab1 f181 	clz	r1, r1
 8002592:	b2c9      	uxtb	r1, r1
 8002594:	408b      	lsls	r3, r1
 8002596:	4969      	ldr	r1, [pc, #420]	@ (800273c <HAL_RCC_OscConfig+0x5e8>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259c:	e0fd      	b.n	800279a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800259e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8088 	beq.w	80026c0 <HAL_RCC_OscConfig+0x56c>
 80025b0:	2301      	movs	r3, #1
 80025b2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80025c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	461a      	mov	r2, r3
 80025d8:	2301      	movs	r3, #1
 80025da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7ff f91a 	bl	8001814 <HAL_GetTick>
 80025e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e6:	f7ff f915 	bl	8001814 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d902      	bls.n	80025fc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	f000 bde2 	b.w	80031c0 <HAL_RCC_OscConfig+0x106c>
 80025fc:	2302      	movs	r3, #2
 80025fe:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800260e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <HAL_RCC_OscConfig+0x4d8>
 8002626:	4b45      	ldr	r3, [pc, #276]	@ (800273c <HAL_RCC_OscConfig+0x5e8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	e013      	b.n	8002654 <HAL_RCC_OscConfig+0x500>
 800262c:	2302      	movs	r3, #2
 800262e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800263e:	2302      	movs	r3, #2
 8002640:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002644:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002650:	4b3a      	ldr	r3, [pc, #232]	@ (800273c <HAL_RCC_OscConfig+0x5e8>)
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	2202      	movs	r2, #2
 8002656:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800265a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800265e:	fa92 f2a2 	rbit	r2, r2
 8002662:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002666:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800266a:	fab2 f282 	clz	r2, r2
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f042 0220 	orr.w	r2, r2, #32
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	f002 021f 	and.w	r2, r2, #31
 800267a:	2101      	movs	r1, #1
 800267c:	fa01 f202 	lsl.w	r2, r1, r2
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0af      	beq.n	80025e6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002686:	4b2d      	ldr	r3, [pc, #180]	@ (800273c <HAL_RCC_OscConfig+0x5e8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800268e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002692:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	21f8      	movs	r1, #248	@ 0xf8
 800269c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80026a4:	fa91 f1a1 	rbit	r1, r1
 80026a8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80026ac:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80026b0:	fab1 f181 	clz	r1, r1
 80026b4:	b2c9      	uxtb	r1, r1
 80026b6:	408b      	lsls	r3, r1
 80026b8:	4920      	ldr	r1, [pc, #128]	@ (800273c <HAL_RCC_OscConfig+0x5e8>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
 80026be:	e06c      	b.n	800279a <HAL_RCC_OscConfig+0x646>
 80026c0:	2301      	movs	r3, #1
 80026c2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80026d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	461a      	mov	r2, r3
 80026e8:	2300      	movs	r3, #0
 80026ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7ff f892 	bl	8001814 <HAL_GetTick>
 80026f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f6:	f7ff f88d 	bl	8001814 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d902      	bls.n	800270c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	f000 bd5a 	b.w	80031c0 <HAL_RCC_OscConfig+0x106c>
 800270c:	2302      	movs	r3, #2
 800270e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800271e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d104      	bne.n	8002740 <HAL_RCC_OscConfig+0x5ec>
 8002736:	4b01      	ldr	r3, [pc, #4]	@ (800273c <HAL_RCC_OscConfig+0x5e8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	e015      	b.n	8002768 <HAL_RCC_OscConfig+0x614>
 800273c:	40021000 	.word	0x40021000
 8002740:	2302      	movs	r3, #2
 8002742:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002752:	2302      	movs	r3, #2
 8002754:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002758:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002764:	4bc8      	ldr	r3, [pc, #800]	@ (8002a88 <HAL_RCC_OscConfig+0x934>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002768:	2202      	movs	r2, #2
 800276a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800276e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002772:	fa92 f2a2 	rbit	r2, r2
 8002776:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800277a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800277e:	fab2 f282 	clz	r2, r2
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	f042 0220 	orr.w	r2, r2, #32
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	f002 021f 	and.w	r2, r2, #31
 800278e:	2101      	movs	r1, #1
 8002790:	fa01 f202 	lsl.w	r2, r1, r2
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ad      	bne.n	80026f6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800279a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8110 	beq.w	80029d0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d079      	beq.n	80028b4 <HAL_RCC_OscConfig+0x760>
 80027c0:	2301      	movs	r3, #1
 80027c2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80027d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	4bab      	ldr	r3, [pc, #684]	@ (8002a8c <HAL_RCC_OscConfig+0x938>)
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	461a      	mov	r2, r3
 80027e6:	2301      	movs	r3, #1
 80027e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7ff f813 	bl	8001814 <HAL_GetTick>
 80027ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f2:	e00a      	b.n	800280a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f4:	f7ff f80e 	bl	8001814 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d902      	bls.n	800280a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	f000 bcdb 	b.w	80031c0 <HAL_RCC_OscConfig+0x106c>
 800280a:	2302      	movs	r3, #2
 800280c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800281c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002820:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002824:	2202      	movs	r2, #2
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	fa93 f2a3 	rbit	r2, r3
 8002836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002848:	2202      	movs	r2, #2
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002862:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002864:	4b88      	ldr	r3, [pc, #544]	@ (8002a88 <HAL_RCC_OscConfig+0x934>)
 8002866:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002870:	2102      	movs	r1, #2
 8002872:	6019      	str	r1, [r3, #0]
 8002874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002878:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	fa93 f1a3 	rbit	r1, r3
 8002882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002886:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800288a:	6019      	str	r1, [r3, #0]
  return result;
 800288c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002890:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	2101      	movs	r1, #1
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0a0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x6a0>
 80028b2:	e08d      	b.n	80029d0 <HAL_RCC_OscConfig+0x87c>
 80028b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80028bc:	2201      	movs	r2, #1
 80028be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	fa93 f2a3 	rbit	r2, r3
 80028ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028d6:	601a      	str	r2, [r3, #0]
  return result;
 80028d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028dc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028e0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b68      	ldr	r3, [pc, #416]	@ (8002a8c <HAL_RCC_OscConfig+0x938>)
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	461a      	mov	r2, r3
 80028f2:	2300      	movs	r3, #0
 80028f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f6:	f7fe ff8d 	bl	8001814 <HAL_GetTick>
 80028fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002900:	f7fe ff88 	bl	8001814 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d902      	bls.n	8002916 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	f000 bc55 	b.w	80031c0 <HAL_RCC_OscConfig+0x106c>
 8002916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800291e:	2202      	movs	r2, #2
 8002920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002926:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	fa93 f2a3 	rbit	r2, r3
 8002930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002934:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002942:	2202      	movs	r2, #2
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	fa93 f2a3 	rbit	r2, r3
 8002954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002958:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002962:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002966:	2202      	movs	r2, #2
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	fa93 f2a3 	rbit	r2, r3
 8002978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002980:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002982:	4b41      	ldr	r3, [pc, #260]	@ (8002a88 <HAL_RCC_OscConfig+0x934>)
 8002984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800298e:	2102      	movs	r1, #2
 8002990:	6019      	str	r1, [r3, #0]
 8002992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002996:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	fa93 f1a3 	rbit	r1, r3
 80029a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029a8:	6019      	str	r1, [r3, #0]
  return result;
 80029aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	fab3 f383 	clz	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	2101      	movs	r1, #1
 80029c6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d197      	bne.n	8002900 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 81a1 	beq.w	8002d28 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ec:	4b26      	ldr	r3, [pc, #152]	@ (8002a88 <HAL_RCC_OscConfig+0x934>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d116      	bne.n	8002a26 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f8:	4b23      	ldr	r3, [pc, #140]	@ (8002a88 <HAL_RCC_OscConfig+0x934>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	4a22      	ldr	r2, [pc, #136]	@ (8002a88 <HAL_RCC_OscConfig+0x934>)
 80029fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a02:	61d3      	str	r3, [r2, #28]
 8002a04:	4b20      	ldr	r3, [pc, #128]	@ (8002a88 <HAL_RCC_OscConfig+0x934>)
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a10:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002a1e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a26:	4b1a      	ldr	r3, [pc, #104]	@ (8002a90 <HAL_RCC_OscConfig+0x93c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d11a      	bne.n	8002a68 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a32:	4b17      	ldr	r3, [pc, #92]	@ (8002a90 <HAL_RCC_OscConfig+0x93c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a16      	ldr	r2, [pc, #88]	@ (8002a90 <HAL_RCC_OscConfig+0x93c>)
 8002a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fee9 	bl	8001814 <HAL_GetTick>
 8002a42:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a46:	e009      	b.n	8002a5c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe fee4 	bl	8001814 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b64      	cmp	r3, #100	@ 0x64
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e3b1      	b.n	80031c0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a90 <HAL_RCC_OscConfig+0x93c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0ef      	beq.n	8002a48 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d10d      	bne.n	8002a94 <HAL_RCC_OscConfig+0x940>
 8002a78:	4b03      	ldr	r3, [pc, #12]	@ (8002a88 <HAL_RCC_OscConfig+0x934>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	4a02      	ldr	r2, [pc, #8]	@ (8002a88 <HAL_RCC_OscConfig+0x934>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6213      	str	r3, [r2, #32]
 8002a84:	e03c      	b.n	8002b00 <HAL_RCC_OscConfig+0x9ac>
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	10908120 	.word	0x10908120
 8002a90:	40007000 	.word	0x40007000
 8002a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10c      	bne.n	8002abe <HAL_RCC_OscConfig+0x96a>
 8002aa4:	4bc1      	ldr	r3, [pc, #772]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4ac0      	ldr	r2, [pc, #768]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	6213      	str	r3, [r2, #32]
 8002ab0:	4bbe      	ldr	r3, [pc, #760]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4abd      	ldr	r2, [pc, #756]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002ab6:	f023 0304 	bic.w	r3, r3, #4
 8002aba:	6213      	str	r3, [r2, #32]
 8002abc:	e020      	b.n	8002b00 <HAL_RCC_OscConfig+0x9ac>
 8002abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b05      	cmp	r3, #5
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x994>
 8002ace:	4bb7      	ldr	r3, [pc, #732]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4ab6      	ldr	r2, [pc, #728]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	6213      	str	r3, [r2, #32]
 8002ada:	4bb4      	ldr	r3, [pc, #720]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4ab3      	ldr	r2, [pc, #716]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0x9ac>
 8002ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4aaf      	ldr	r2, [pc, #700]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	6213      	str	r3, [r2, #32]
 8002af4:	4bad      	ldr	r3, [pc, #692]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4aac      	ldr	r2, [pc, #688]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002afa:	f023 0304 	bic.w	r3, r3, #4
 8002afe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 8081 	beq.w	8002c14 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b12:	f7fe fe7f 	bl	8001814 <HAL_GetTick>
 8002b16:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1a:	e00b      	b.n	8002b34 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fe fe7a 	bl	8001814 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e345      	b.n	80031c0 <HAL_RCC_OscConfig+0x106c>
 8002b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b38:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b44:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	fa93 f2a3 	rbit	r2, r3
 8002b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b52:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b60:	2202      	movs	r2, #2
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b68:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b76:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b7a:	601a      	str	r2, [r3, #0]
  return result;
 8002b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b80:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b84:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d102      	bne.n	8002ba0 <HAL_RCC_OscConfig+0xa4c>
 8002b9a:	4b84      	ldr	r3, [pc, #528]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	e013      	b.n	8002bc8 <HAL_RCC_OscConfig+0xa74>
 8002ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ba8:	2202      	movs	r2, #2
 8002baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	fa93 f2a3 	rbit	r2, r3
 8002bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	4b79      	ldr	r3, [pc, #484]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bcc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	6011      	str	r1, [r2, #0]
 8002bd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bd8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	fa92 f1a2 	rbit	r1, r2
 8002be2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002be6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002bea:	6011      	str	r1, [r2, #0]
  return result;
 8002bec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bf0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	fab2 f282 	clz	r2, r2
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f002 021f 	and.w	r2, r2, #31
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d084      	beq.n	8002b1c <HAL_RCC_OscConfig+0x9c8>
 8002c12:	e07f      	b.n	8002d14 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c14:	f7fe fdfe 	bl	8001814 <HAL_GetTick>
 8002c18:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1c:	e00b      	b.n	8002c36 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1e:	f7fe fdf9 	bl	8001814 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e2c4      	b.n	80031c0 <HAL_RCC_OscConfig+0x106c>
 8002c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c3e:	2202      	movs	r2, #2
 8002c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c46:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	fa93 f2a3 	rbit	r2, r3
 8002c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c54:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002c62:	2202      	movs	r2, #2
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	fa93 f2a3 	rbit	r2, r3
 8002c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c78:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c7c:	601a      	str	r2, [r3, #0]
  return result;
 8002c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c82:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c86:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c88:	fab3 f383 	clz	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f043 0302 	orr.w	r3, r3, #2
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d102      	bne.n	8002ca2 <HAL_RCC_OscConfig+0xb4e>
 8002c9c:	4b43      	ldr	r3, [pc, #268]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	e013      	b.n	8002cca <HAL_RCC_OscConfig+0xb76>
 8002ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002caa:	2202      	movs	r2, #2
 8002cac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	fa93 f2a3 	rbit	r2, r3
 8002cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	4b39      	ldr	r3, [pc, #228]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cce:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002cd2:	2102      	movs	r1, #2
 8002cd4:	6011      	str	r1, [r2, #0]
 8002cd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cda:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	fa92 f1a2 	rbit	r1, r2
 8002ce4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ce8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002cec:	6011      	str	r1, [r2, #0]
  return result;
 8002cee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cf2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	fab2 f282 	clz	r2, r2
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	f002 021f 	and.w	r2, r2, #31
 8002d08:	2101      	movs	r1, #1
 8002d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d184      	bne.n	8002c1e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d14:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d105      	bne.n	8002d28 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1c:	4b23      	ldr	r3, [pc, #140]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	4a22      	ldr	r2, [pc, #136]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002d22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d26:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8242 	beq.w	80031be <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dac <HAL_RCC_OscConfig+0xc58>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	f000 8213 	beq.w	800316e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	f040 8162 	bne.w	800301e <HAL_RCC_OscConfig+0xeca>
 8002d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002d62:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	fa93 f2a3 	rbit	r2, r3
 8002d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002d7e:	601a      	str	r2, [r3, #0]
  return result;
 8002d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d84:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002d88:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d94:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fe fd38 	bl	8001814 <HAL_GetTick>
 8002da4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da8:	e00c      	b.n	8002dc4 <HAL_RCC_OscConfig+0xc70>
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe fd30 	bl	8001814 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e1fd      	b.n	80031c0 <HAL_RCC_OscConfig+0x106c>
 8002dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002dcc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	fa93 f2a3 	rbit	r2, r3
 8002de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002de8:	601a      	str	r2, [r3, #0]
  return result;
 8002dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dee:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002df2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df4:	fab3 f383 	clz	r3, r3
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d102      	bne.n	8002e0e <HAL_RCC_OscConfig+0xcba>
 8002e08:	4bb0      	ldr	r3, [pc, #704]	@ (80030cc <HAL_RCC_OscConfig+0xf78>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	e027      	b.n	8002e5e <HAL_RCC_OscConfig+0xd0a>
 8002e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e12:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e20:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	fa93 f2a3 	rbit	r2, r3
 8002e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e38:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002e3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e46:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	fa93 f2a3 	rbit	r2, r3
 8002e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e54:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	4b9c      	ldr	r3, [pc, #624]	@ (80030cc <HAL_RCC_OscConfig+0xf78>)
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e62:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002e66:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e6a:	6011      	str	r1, [r2, #0]
 8002e6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e70:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	fa92 f1a2 	rbit	r1, r2
 8002e7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e7e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002e82:	6011      	str	r1, [r2, #0]
  return result;
 8002e84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e88:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	fab2 f282 	clz	r2, r2
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	f042 0220 	orr.w	r2, r2, #32
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f002 021f 	and.w	r2, r2, #31
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d182      	bne.n	8002db0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eaa:	4b88      	ldr	r3, [pc, #544]	@ (80030cc <HAL_RCC_OscConfig+0xf78>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	497f      	ldr	r1, [pc, #508]	@ (80030cc <HAL_RCC_OscConfig+0xf78>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	604b      	str	r3, [r1, #4]
 8002ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002eda:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	fa93 f2a3 	rbit	r2, r3
 8002eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002ef6:	601a      	str	r2, [r3, #0]
  return result;
 8002ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002f00:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f0c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	461a      	mov	r2, r3
 8002f14:	2301      	movs	r3, #1
 8002f16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fe fc7c 	bl	8001814 <HAL_GetTick>
 8002f1c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f20:	e009      	b.n	8002f36 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f22:	f7fe fc77 	bl	8001814 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e144      	b.n	80031c0 <HAL_RCC_OscConfig+0x106c>
 8002f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002f3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f48:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	fa93 f2a3 	rbit	r2, r3
 8002f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f56:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f5a:	601a      	str	r2, [r3, #0]
  return result;
 8002f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f60:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	095b      	lsrs	r3, r3, #5
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d102      	bne.n	8002f80 <HAL_RCC_OscConfig+0xe2c>
 8002f7a:	4b54      	ldr	r3, [pc, #336]	@ (80030cc <HAL_RCC_OscConfig+0xf78>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	e027      	b.n	8002fd0 <HAL_RCC_OscConfig+0xe7c>
 8002f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f84:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002f88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f92:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	fa93 f2a3 	rbit	r2, r3
 8002f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002faa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002fae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	fa93 f2a3 	rbit	r2, r3
 8002fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	4b3f      	ldr	r3, [pc, #252]	@ (80030cc <HAL_RCC_OscConfig+0xf78>)
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fd4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002fd8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002fdc:	6011      	str	r1, [r2, #0]
 8002fde:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fe2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	fa92 f1a2 	rbit	r1, r2
 8002fec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ff0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002ff4:	6011      	str	r1, [r2, #0]
  return result;
 8002ff6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ffa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	fab2 f282 	clz	r2, r2
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	f042 0220 	orr.w	r2, r2, #32
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	f002 021f 	and.w	r2, r2, #31
 8003010:	2101      	movs	r1, #1
 8003012:	fa01 f202 	lsl.w	r2, r1, r2
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d082      	beq.n	8002f22 <HAL_RCC_OscConfig+0xdce>
 800301c:	e0cf      	b.n	80031be <HAL_RCC_OscConfig+0x106a>
 800301e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003022:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003026:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800302a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003030:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	fa93 f2a3 	rbit	r2, r3
 800303a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800303e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003042:	601a      	str	r2, [r3, #0]
  return result;
 8003044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003048:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800304c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003058:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	461a      	mov	r2, r3
 8003060:	2300      	movs	r3, #0
 8003062:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe fbd6 	bl	8001814 <HAL_GetTick>
 8003068:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800306c:	e009      	b.n	8003082 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306e:	f7fe fbd1 	bl	8001814 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e09e      	b.n	80031c0 <HAL_RCC_OscConfig+0x106c>
 8003082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003086:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800308a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800308e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003094:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	fa93 f2a3 	rbit	r2, r3
 800309e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80030a6:	601a      	str	r2, [r3, #0]
  return result;
 80030a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ac:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80030b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d104      	bne.n	80030d0 <HAL_RCC_OscConfig+0xf7c>
 80030c6:	4b01      	ldr	r3, [pc, #4]	@ (80030cc <HAL_RCC_OscConfig+0xf78>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	e029      	b.n	8003120 <HAL_RCC_OscConfig+0xfcc>
 80030cc:	40021000 	.word	0x40021000
 80030d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80030d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	fa93 f2a3 	rbit	r2, r3
 80030ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80030fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003108:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	fa93 f2a3 	rbit	r2, r3
 8003112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003116:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	4b2b      	ldr	r3, [pc, #172]	@ (80031cc <HAL_RCC_OscConfig+0x1078>)
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003124:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003128:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800312c:	6011      	str	r1, [r2, #0]
 800312e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003132:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	fa92 f1a2 	rbit	r1, r2
 800313c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003140:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003144:	6011      	str	r1, [r2, #0]
  return result;
 8003146:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800314a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	fab2 f282 	clz	r2, r2
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	f042 0220 	orr.w	r2, r2, #32
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	f002 021f 	and.w	r2, r2, #31
 8003160:	2101      	movs	r1, #1
 8003162:	fa01 f202 	lsl.w	r2, r1, r2
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d180      	bne.n	800306e <HAL_RCC_OscConfig+0xf1a>
 800316c:	e027      	b.n	80031be <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800316e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003172:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e01e      	b.n	80031c0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003182:	4b12      	ldr	r3, [pc, #72]	@ (80031cc <HAL_RCC_OscConfig+0x1078>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800318a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800318e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003196:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d10b      	bne.n	80031ba <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80031a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d001      	beq.n	80031be <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000

080031d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b09e      	sub	sp, #120	@ 0x78
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e162      	b.n	80034ae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e8:	4b90      	ldr	r3, [pc, #576]	@ (800342c <HAL_RCC_ClockConfig+0x25c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d910      	bls.n	8003218 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b8d      	ldr	r3, [pc, #564]	@ (800342c <HAL_RCC_ClockConfig+0x25c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 0207 	bic.w	r2, r3, #7
 80031fe:	498b      	ldr	r1, [pc, #556]	@ (800342c <HAL_RCC_ClockConfig+0x25c>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b89      	ldr	r3, [pc, #548]	@ (800342c <HAL_RCC_ClockConfig+0x25c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e14a      	b.n	80034ae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b82      	ldr	r3, [pc, #520]	@ (8003430 <HAL_RCC_ClockConfig+0x260>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	497f      	ldr	r1, [pc, #508]	@ (8003430 <HAL_RCC_ClockConfig+0x260>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 80dc 	beq.w	80033fc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d13c      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xf6>
 800324c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003250:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003254:	fa93 f3a3 	rbit	r3, r3
 8003258:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800325a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325c:	fab3 f383 	clz	r3, r3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	b2db      	uxtb	r3, r3
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d102      	bne.n	8003276 <HAL_RCC_ClockConfig+0xa6>
 8003270:	4b6f      	ldr	r3, [pc, #444]	@ (8003430 <HAL_RCC_ClockConfig+0x260>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	e00f      	b.n	8003296 <HAL_RCC_ClockConfig+0xc6>
 8003276:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800327a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	667b      	str	r3, [r7, #100]	@ 0x64
 8003284:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003288:	663b      	str	r3, [r7, #96]	@ 0x60
 800328a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003292:	4b67      	ldr	r3, [pc, #412]	@ (8003430 <HAL_RCC_ClockConfig+0x260>)
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003296:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800329a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800329c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800329e:	fa92 f2a2 	rbit	r2, r2
 80032a2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80032a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032a6:	fab2 f282 	clz	r2, r2
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	f042 0220 	orr.w	r2, r2, #32
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	f002 021f 	and.w	r2, r2, #31
 80032b6:	2101      	movs	r1, #1
 80032b8:	fa01 f202 	lsl.w	r2, r1, r2
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d17b      	bne.n	80033ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0f3      	b.n	80034ae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d13c      	bne.n	8003348 <HAL_RCC_ClockConfig+0x178>
 80032ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032d2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80032dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d102      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x128>
 80032f2:	4b4f      	ldr	r3, [pc, #316]	@ (8003430 <HAL_RCC_ClockConfig+0x260>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	e00f      	b.n	8003318 <HAL_RCC_ClockConfig+0x148>
 80032f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	647b      	str	r3, [r7, #68]	@ 0x44
 8003306:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800330a:	643b      	str	r3, [r7, #64]	@ 0x40
 800330c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003314:	4b46      	ldr	r3, [pc, #280]	@ (8003430 <HAL_RCC_ClockConfig+0x260>)
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800331c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800331e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003320:	fa92 f2a2 	rbit	r2, r2
 8003324:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003326:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003328:	fab2 f282 	clz	r2, r2
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	f042 0220 	orr.w	r2, r2, #32
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	f002 021f 	and.w	r2, r2, #31
 8003338:	2101      	movs	r1, #1
 800333a:	fa01 f202 	lsl.w	r2, r1, r2
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d13a      	bne.n	80033ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0b2      	b.n	80034ae <HAL_RCC_ClockConfig+0x2de>
 8003348:	2302      	movs	r3, #2
 800334a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	095b      	lsrs	r3, r3, #5
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d102      	bne.n	8003370 <HAL_RCC_ClockConfig+0x1a0>
 800336a:	4b31      	ldr	r3, [pc, #196]	@ (8003430 <HAL_RCC_ClockConfig+0x260>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	e00d      	b.n	800338c <HAL_RCC_ClockConfig+0x1bc>
 8003370:	2302      	movs	r3, #2
 8003372:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	627b      	str	r3, [r7, #36]	@ 0x24
 800337c:	2302      	movs	r3, #2
 800337e:	623b      	str	r3, [r7, #32]
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	4b29      	ldr	r3, [pc, #164]	@ (8003430 <HAL_RCC_ClockConfig+0x260>)
 800338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338c:	2202      	movs	r2, #2
 800338e:	61ba      	str	r2, [r7, #24]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	fa92 f2a2 	rbit	r2, r2
 8003396:	617a      	str	r2, [r7, #20]
  return result;
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	fab2 f282 	clz	r2, r2
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	f042 0220 	orr.w	r2, r2, #32
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	f002 021f 	and.w	r2, r2, #31
 80033aa:	2101      	movs	r1, #1
 80033ac:	fa01 f202 	lsl.w	r2, r1, r2
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e079      	b.n	80034ae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003430 <HAL_RCC_ClockConfig+0x260>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f023 0203 	bic.w	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	491a      	ldr	r1, [pc, #104]	@ (8003430 <HAL_RCC_ClockConfig+0x260>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033cc:	f7fe fa22 	bl	8001814 <HAL_GetTick>
 80033d0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	e00a      	b.n	80033ea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d4:	f7fe fa1e 	bl	8001814 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e061      	b.n	80034ae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	4b11      	ldr	r3, [pc, #68]	@ (8003430 <HAL_RCC_ClockConfig+0x260>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 020c 	and.w	r2, r3, #12
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d1eb      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033fc:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <HAL_RCC_ClockConfig+0x25c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d214      	bcs.n	8003434 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b08      	ldr	r3, [pc, #32]	@ (800342c <HAL_RCC_ClockConfig+0x25c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 0207 	bic.w	r2, r3, #7
 8003412:	4906      	ldr	r1, [pc, #24]	@ (800342c <HAL_RCC_ClockConfig+0x25c>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b04      	ldr	r3, [pc, #16]	@ (800342c <HAL_RCC_ClockConfig+0x25c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e040      	b.n	80034ae <HAL_RCC_ClockConfig+0x2de>
 800342c:	40022000 	.word	0x40022000
 8003430:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003440:	4b1d      	ldr	r3, [pc, #116]	@ (80034b8 <HAL_RCC_ClockConfig+0x2e8>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	491a      	ldr	r1, [pc, #104]	@ (80034b8 <HAL_RCC_ClockConfig+0x2e8>)
 800344e:	4313      	orrs	r3, r2
 8003450:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800345e:	4b16      	ldr	r3, [pc, #88]	@ (80034b8 <HAL_RCC_ClockConfig+0x2e8>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4912      	ldr	r1, [pc, #72]	@ (80034b8 <HAL_RCC_ClockConfig+0x2e8>)
 800346e:	4313      	orrs	r3, r2
 8003470:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003472:	f000 f829 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 8003476:	4601      	mov	r1, r0
 8003478:	4b0f      	ldr	r3, [pc, #60]	@ (80034b8 <HAL_RCC_ClockConfig+0x2e8>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003480:	22f0      	movs	r2, #240	@ 0xf0
 8003482:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	fa92 f2a2 	rbit	r2, r2
 800348a:	60fa      	str	r2, [r7, #12]
  return result;
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	fab2 f282 	clz	r2, r2
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	40d3      	lsrs	r3, r2
 8003496:	4a09      	ldr	r2, [pc, #36]	@ (80034bc <HAL_RCC_ClockConfig+0x2ec>)
 8003498:	5cd3      	ldrb	r3, [r2, r3]
 800349a:	fa21 f303 	lsr.w	r3, r1, r3
 800349e:	4a08      	ldr	r2, [pc, #32]	@ (80034c0 <HAL_RCC_ClockConfig+0x2f0>)
 80034a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034a2:	4b08      	ldr	r3, [pc, #32]	@ (80034c4 <HAL_RCC_ClockConfig+0x2f4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe f970 	bl	800178c <HAL_InitTick>
  
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3778      	adds	r7, #120	@ 0x78
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40021000 	.word	0x40021000
 80034bc:	08006864 	.word	0x08006864
 80034c0:	20000000 	.word	0x20000000
 80034c4:	20000004 	.word	0x20000004

080034c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b08b      	sub	sp, #44	@ 0x2c
 80034cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	2300      	movs	r3, #0
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	2300      	movs	r3, #0
 80034d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80034e2:	4b29      	ldr	r3, [pc, #164]	@ (8003588 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d002      	beq.n	80034f8 <HAL_RCC_GetSysClockFreq+0x30>
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d003      	beq.n	80034fe <HAL_RCC_GetSysClockFreq+0x36>
 80034f6:	e03c      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034f8:	4b24      	ldr	r3, [pc, #144]	@ (800358c <HAL_RCC_GetSysClockFreq+0xc4>)
 80034fa:	623b      	str	r3, [r7, #32]
      break;
 80034fc:	e03c      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003504:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003508:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	fa92 f2a2 	rbit	r2, r2
 8003510:	607a      	str	r2, [r7, #4]
  return result;
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	fab2 f282 	clz	r2, r2
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	40d3      	lsrs	r3, r2
 800351c:	4a1c      	ldr	r2, [pc, #112]	@ (8003590 <HAL_RCC_GetSysClockFreq+0xc8>)
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003522:	4b19      	ldr	r3, [pc, #100]	@ (8003588 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	220f      	movs	r2, #15
 800352c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	fa92 f2a2 	rbit	r2, r2
 8003534:	60fa      	str	r2, [r7, #12]
  return result;
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	fab2 f282 	clz	r2, r2
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	40d3      	lsrs	r3, r2
 8003540:	4a14      	ldr	r2, [pc, #80]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003542:	5cd3      	ldrb	r3, [r2, r3]
 8003544:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003550:	4a0e      	ldr	r2, [pc, #56]	@ (800358c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	fbb2 f2f3 	udiv	r2, r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003560:	e004      	b.n	800356c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	4a0c      	ldr	r2, [pc, #48]	@ (8003598 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003566:	fb02 f303 	mul.w	r3, r2, r3
 800356a:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356e:	623b      	str	r3, [r7, #32]
      break;
 8003570:	e002      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003572:	4b06      	ldr	r3, [pc, #24]	@ (800358c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003574:	623b      	str	r3, [r7, #32]
      break;
 8003576:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003578:	6a3b      	ldr	r3, [r7, #32]
}
 800357a:	4618      	mov	r0, r3
 800357c:	372c      	adds	r7, #44	@ 0x2c
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40021000 	.word	0x40021000
 800358c:	007a1200 	.word	0x007a1200
 8003590:	0800687c 	.word	0x0800687c
 8003594:	0800688c 	.word	0x0800688c
 8003598:	003d0900 	.word	0x003d0900

0800359c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a0:	4b03      	ldr	r3, [pc, #12]	@ (80035b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035a2:	681b      	ldr	r3, [r3, #0]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20000000 	.word	0x20000000

080035b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80035ba:	f7ff ffef 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035be:	4601      	mov	r1, r0
 80035c0:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035c8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80035cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	fa92 f2a2 	rbit	r2, r2
 80035d4:	603a      	str	r2, [r7, #0]
  return result;
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	fab2 f282 	clz	r2, r2
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	40d3      	lsrs	r3, r2
 80035e0:	4a04      	ldr	r2, [pc, #16]	@ (80035f4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80035e2:	5cd3      	ldrb	r3, [r2, r3]
 80035e4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80035e8:	4618      	mov	r0, r3
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000
 80035f4:	08006874 	.word	0x08006874

080035f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80035fe:	f7ff ffcd 	bl	800359c <HAL_RCC_GetHCLKFreq>
 8003602:	4601      	mov	r1, r0
 8003604:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800360c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003610:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	fa92 f2a2 	rbit	r2, r2
 8003618:	603a      	str	r2, [r7, #0]
  return result;
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	fab2 f282 	clz	r2, r2
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	40d3      	lsrs	r3, r2
 8003624:	4a04      	ldr	r2, [pc, #16]	@ (8003638 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003626:	5cd3      	ldrb	r3, [r2, r3]
 8003628:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000
 8003638:	08006874 	.word	0x08006874

0800363c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b092      	sub	sp, #72	@ 0x48
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800364c:	2300      	movs	r3, #0
 800364e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80d4 	beq.w	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003660:	4b4e      	ldr	r3, [pc, #312]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10e      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366c:	4b4b      	ldr	r3, [pc, #300]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	4a4a      	ldr	r2, [pc, #296]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003676:	61d3      	str	r3, [r2, #28]
 8003678:	4b48      	ldr	r3, [pc, #288]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003684:	2301      	movs	r3, #1
 8003686:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368a:	4b45      	ldr	r3, [pc, #276]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d118      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003696:	4b42      	ldr	r3, [pc, #264]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a41      	ldr	r2, [pc, #260]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a2:	f7fe f8b7 	bl	8001814 <HAL_GetTick>
 80036a6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	e008      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036aa:	f7fe f8b3 	bl	8001814 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b64      	cmp	r3, #100	@ 0x64
 80036b6:	d901      	bls.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e14b      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	4b38      	ldr	r3, [pc, #224]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036c8:	4b34      	ldr	r3, [pc, #208]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 8084 	beq.w	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d07c      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036e8:	4b2c      	ldr	r3, [pc, #176]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036f6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	4b26      	ldr	r3, [pc, #152]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	461a      	mov	r2, r3
 8003712:	2301      	movs	r3, #1
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800371a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	461a      	mov	r2, r3
 800372e:	4b1d      	ldr	r3, [pc, #116]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	461a      	mov	r2, r3
 8003736:	2300      	movs	r3, #0
 8003738:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800373a:	4a18      	ldr	r2, [pc, #96]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800373e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d04b      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374a:	f7fe f863 	bl	8001814 <HAL_GetTick>
 800374e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	e00a      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fe f85f 	bl	8001814 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003760:	4293      	cmp	r3, r2
 8003762:	d901      	bls.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0f5      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003768:	2302      	movs	r3, #2
 800376a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24
 8003774:	2302      	movs	r3, #2
 8003776:	623b      	str	r3, [r7, #32]
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	61fb      	str	r3, [r7, #28]
  return result;
 8003780:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f043 0302 	orr.w	r3, r3, #2
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d108      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003796:	4b01      	ldr	r3, [pc, #4]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	e00d      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800379c:	40021000 	.word	0x40021000
 80037a0:	40007000 	.word	0x40007000
 80037a4:	10908100 	.word	0x10908100
 80037a8:	2302      	movs	r3, #2
 80037aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	4b69      	ldr	r3, [pc, #420]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	2202      	movs	r2, #2
 80037ba:	613a      	str	r2, [r7, #16]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	fa92 f2a2 	rbit	r2, r2
 80037c2:	60fa      	str	r2, [r7, #12]
  return result;
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	fab2 f282 	clz	r2, r2
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	f002 021f 	and.w	r2, r2, #31
 80037d6:	2101      	movs	r1, #1
 80037d8:	fa01 f202 	lsl.w	r2, r1, r2
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0b7      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037e2:	4b5e      	ldr	r3, [pc, #376]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	495b      	ldr	r1, [pc, #364]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d105      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fc:	4b57      	ldr	r3, [pc, #348]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	4a56      	ldr	r2, [pc, #344]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003806:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003814:	4b51      	ldr	r3, [pc, #324]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003818:	f023 0203 	bic.w	r2, r3, #3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	494e      	ldr	r1, [pc, #312]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003822:	4313      	orrs	r3, r2
 8003824:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003832:	4b4a      	ldr	r3, [pc, #296]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	f023 0210 	bic.w	r2, r3, #16
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	4947      	ldr	r1, [pc, #284]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003840:	4313      	orrs	r3, r2
 8003842:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003850:	4b42      	ldr	r3, [pc, #264]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385c:	493f      	ldr	r1, [pc, #252]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800385e:	4313      	orrs	r3, r2
 8003860:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d008      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800386e:	4b3b      	ldr	r3, [pc, #236]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	f023 0220 	bic.w	r2, r3, #32
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	4938      	ldr	r1, [pc, #224]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800387c:	4313      	orrs	r3, r2
 800387e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800388c:	4b33      	ldr	r3, [pc, #204]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003890:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	4930      	ldr	r1, [pc, #192]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800389a:	4313      	orrs	r3, r2
 800389c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d008      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038aa:	4b2c      	ldr	r3, [pc, #176]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	4929      	ldr	r1, [pc, #164]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80038c8:	4b24      	ldr	r3, [pc, #144]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038cc:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	4921      	ldr	r1, [pc, #132]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d008      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038e6:	4b1d      	ldr	r3, [pc, #116]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	491a      	ldr	r1, [pc, #104]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003904:	4b15      	ldr	r3, [pc, #84]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003908:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	4912      	ldr	r1, [pc, #72]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003912:	4313      	orrs	r3, r2
 8003914:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003922:	4b0e      	ldr	r3, [pc, #56]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003926:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392e:	490b      	ldr	r1, [pc, #44]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003930:	4313      	orrs	r3, r2
 8003932:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003940:	4b06      	ldr	r3, [pc, #24]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003944:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394c:	4903      	ldr	r1, [pc, #12]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800394e:	4313      	orrs	r3, r2
 8003950:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3748      	adds	r7, #72	@ 0x48
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40021000 	.word	0x40021000

08003960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e049      	b.n	8003a06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fdb0 	bl	80014ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3304      	adds	r3, #4
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f000 fe46 	bl	8004630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e049      	b.n	8003ab4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f841 	bl	8003abc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f000 fdef 	bl	8004630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <HAL_TIM_PWM_Start_DMA+0x2c>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	e03c      	b.n	8003b76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d109      	bne.n	8003b16 <HAL_TIM_PWM_Start_DMA+0x46>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	bf0c      	ite	eq
 8003b0e:	2301      	moveq	r3, #1
 8003b10:	2300      	movne	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	e02f      	b.n	8003b76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d109      	bne.n	8003b30 <HAL_TIM_PWM_Start_DMA+0x60>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	bf0c      	ite	eq
 8003b28:	2301      	moveq	r3, #1
 8003b2a:	2300      	movne	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	e022      	b.n	8003b76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b0c      	cmp	r3, #12
 8003b34:	d109      	bne.n	8003b4a <HAL_TIM_PWM_Start_DMA+0x7a>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	bf0c      	ite	eq
 8003b42:	2301      	moveq	r3, #1
 8003b44:	2300      	movne	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	e015      	b.n	8003b76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d109      	bne.n	8003b64 <HAL_TIM_PWM_Start_DMA+0x94>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2301      	moveq	r3, #1
 8003b5e:	2300      	movne	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	e008      	b.n	8003b76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e192      	b.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x3d4>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	bf0c      	ite	eq
 8003b90:	2301      	moveq	r3, #1
 8003b92:	2300      	movne	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e03c      	b.n	8003c12 <HAL_TIM_PWM_Start_DMA+0x142>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d109      	bne.n	8003bb2 <HAL_TIM_PWM_Start_DMA+0xe2>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	e02f      	b.n	8003c12 <HAL_TIM_PWM_Start_DMA+0x142>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d109      	bne.n	8003bcc <HAL_TIM_PWM_Start_DMA+0xfc>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	e022      	b.n	8003c12 <HAL_TIM_PWM_Start_DMA+0x142>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b0c      	cmp	r3, #12
 8003bd0:	d109      	bne.n	8003be6 <HAL_TIM_PWM_Start_DMA+0x116>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	bf0c      	ite	eq
 8003bde:	2301      	moveq	r3, #1
 8003be0:	2300      	movne	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	e015      	b.n	8003c12 <HAL_TIM_PWM_Start_DMA+0x142>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d109      	bne.n	8003c00 <HAL_TIM_PWM_Start_DMA+0x130>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	e008      	b.n	8003c12 <HAL_TIM_PWM_Start_DMA+0x142>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d034      	beq.n	8003c80 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <HAL_TIM_PWM_Start_DMA+0x152>
 8003c1c:	887b      	ldrh	r3, [r7, #2]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e13e      	b.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x3d4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d104      	bne.n	8003c36 <HAL_TIM_PWM_Start_DMA+0x166>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c34:	e026      	b.n	8003c84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d104      	bne.n	8003c46 <HAL_TIM_PWM_Start_DMA+0x176>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c44:	e01e      	b.n	8003c84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d104      	bne.n	8003c56 <HAL_TIM_PWM_Start_DMA+0x186>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c54:	e016      	b.n	8003c84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b0c      	cmp	r3, #12
 8003c5a:	d104      	bne.n	8003c66 <HAL_TIM_PWM_Start_DMA+0x196>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c64:	e00e      	b.n	8003c84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d104      	bne.n	8003c76 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c74:	e006      	b.n	8003c84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c7e:	e001      	b.n	8003c84 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e10f      	b.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x3d4>
  }

  switch (Channel)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b0c      	cmp	r3, #12
 8003c88:	f200 80ae 	bhi.w	8003de8 <HAL_TIM_PWM_Start_DMA+0x318>
 8003c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c94 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c92:	bf00      	nop
 8003c94:	08003cc9 	.word	0x08003cc9
 8003c98:	08003de9 	.word	0x08003de9
 8003c9c:	08003de9 	.word	0x08003de9
 8003ca0:	08003de9 	.word	0x08003de9
 8003ca4:	08003d11 	.word	0x08003d11
 8003ca8:	08003de9 	.word	0x08003de9
 8003cac:	08003de9 	.word	0x08003de9
 8003cb0:	08003de9 	.word	0x08003de9
 8003cb4:	08003d59 	.word	0x08003d59
 8003cb8:	08003de9 	.word	0x08003de9
 8003cbc:	08003de9 	.word	0x08003de9
 8003cc0:	08003de9 	.word	0x08003de9
 8003cc4:	08003da1 	.word	0x08003da1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	4a77      	ldr	r2, [pc, #476]	@ (8003eac <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003cce:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	4a76      	ldr	r2, [pc, #472]	@ (8003eb0 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8003cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	4a75      	ldr	r2, [pc, #468]	@ (8003eb4 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003cde:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3334      	adds	r3, #52	@ 0x34
 8003cec:	461a      	mov	r2, r3
 8003cee:	887b      	ldrh	r3, [r7, #2]
 8003cf0:	f7fd ff18 	bl	8001b24 <HAL_DMA_Start_IT>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e0d2      	b.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d0c:	60da      	str	r2, [r3, #12]
      break;
 8003d0e:	e06e      	b.n	8003dee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d14:	4a65      	ldr	r2, [pc, #404]	@ (8003eac <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003d16:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1c:	4a64      	ldr	r2, [pc, #400]	@ (8003eb0 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8003d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	4a63      	ldr	r2, [pc, #396]	@ (8003eb4 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003d26:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3338      	adds	r3, #56	@ 0x38
 8003d34:	461a      	mov	r2, r3
 8003d36:	887b      	ldrh	r3, [r7, #2]
 8003d38:	f7fd fef4 	bl	8001b24 <HAL_DMA_Start_IT>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e0ae      	b.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d54:	60da      	str	r2, [r3, #12]
      break;
 8003d56:	e04a      	b.n	8003dee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5c:	4a53      	ldr	r2, [pc, #332]	@ (8003eac <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003d5e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d64:	4a52      	ldr	r2, [pc, #328]	@ (8003eb0 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8003d66:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6c:	4a51      	ldr	r2, [pc, #324]	@ (8003eb4 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003d6e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	333c      	adds	r3, #60	@ 0x3c
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	887b      	ldrh	r3, [r7, #2]
 8003d80:	f7fd fed0 	bl	8001b24 <HAL_DMA_Start_IT>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e08a      	b.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d9c:	60da      	str	r2, [r3, #12]
      break;
 8003d9e:	e026      	b.n	8003dee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da4:	4a41      	ldr	r2, [pc, #260]	@ (8003eac <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003da6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	4a40      	ldr	r2, [pc, #256]	@ (8003eb0 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8003dae:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db4:	4a3f      	ldr	r2, [pc, #252]	@ (8003eb4 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003db6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3340      	adds	r3, #64	@ 0x40
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	887b      	ldrh	r3, [r7, #2]
 8003dc8:	f7fd feac 	bl	8001b24 <HAL_DMA_Start_IT>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e066      	b.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003de4:	60da      	str	r2, [r3, #12]
      break;
 8003de6:	e002      	b.n	8003dee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	75fb      	strb	r3, [r7, #23]
      break;
 8003dec:	bf00      	nop
  }

  if (status == HAL_OK)
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d156      	bne.n	8003ea2 <HAL_TIM_PWM_Start_DMA+0x3d2>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 ffc5 	bl	8004d8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb8 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00e      	beq.n	8003e2a <HAL_TIM_PWM_Start_DMA+0x35a>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a2a      	ldr	r2, [pc, #168]	@ (8003ebc <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d009      	beq.n	8003e2a <HAL_TIM_PWM_Start_DMA+0x35a>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a29      	ldr	r2, [pc, #164]	@ (8003ec0 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d004      	beq.n	8003e2a <HAL_TIM_PWM_Start_DMA+0x35a>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a27      	ldr	r2, [pc, #156]	@ (8003ec4 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d101      	bne.n	8003e2e <HAL_TIM_PWM_Start_DMA+0x35e>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <HAL_TIM_PWM_Start_DMA+0x360>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e42:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb8 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_TIM_PWM_Start_DMA+0x392>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e56:	d004      	beq.n	8003e62 <HAL_TIM_PWM_Start_DMA+0x392>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a17      	ldr	r2, [pc, #92]	@ (8003ebc <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d115      	bne.n	8003e8e <HAL_TIM_PWM_Start_DMA+0x3be>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	4b17      	ldr	r3, [pc, #92]	@ (8003ec8 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b06      	cmp	r3, #6
 8003e72:	d015      	beq.n	8003ea0 <HAL_TIM_PWM_Start_DMA+0x3d0>
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e7a:	d011      	beq.n	8003ea0 <HAL_TIM_PWM_Start_DMA+0x3d0>
      {
        __HAL_TIM_ENABLE(htim);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8c:	e008      	b.n	8003ea0 <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0201 	orr.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e000      	b.n	8003ea2 <HAL_TIM_PWM_Start_DMA+0x3d2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	08004521 	.word	0x08004521
 8003eb0:	080045c9 	.word	0x080045c9
 8003eb4:	0800448f 	.word	0x0800448f
 8003eb8:	40012c00 	.word	0x40012c00
 8003ebc:	40014000 	.word	0x40014000
 8003ec0:	40014400 	.word	0x40014400
 8003ec4:	40014800 	.word	0x40014800
 8003ec8:	00010007 	.word	0x00010007

08003ecc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b0c      	cmp	r3, #12
 8003ede:	d855      	bhi.n	8003f8c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003f1d 	.word	0x08003f1d
 8003eec:	08003f8d 	.word	0x08003f8d
 8003ef0:	08003f8d 	.word	0x08003f8d
 8003ef4:	08003f8d 	.word	0x08003f8d
 8003ef8:	08003f39 	.word	0x08003f39
 8003efc:	08003f8d 	.word	0x08003f8d
 8003f00:	08003f8d 	.word	0x08003f8d
 8003f04:	08003f8d 	.word	0x08003f8d
 8003f08:	08003f55 	.word	0x08003f55
 8003f0c:	08003f8d 	.word	0x08003f8d
 8003f10:	08003f8d 	.word	0x08003f8d
 8003f14:	08003f8d 	.word	0x08003f8d
 8003f18:	08003f71 	.word	0x08003f71
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003f2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fd fe56 	bl	8001be2 <HAL_DMA_Abort_IT>
      break;
 8003f36:	e02c      	b.n	8003f92 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fd fe48 	bl	8001be2 <HAL_DMA_Abort_IT>
      break;
 8003f52:	e01e      	b.n	8003f92 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fd fe3a 	bl	8001be2 <HAL_DMA_Abort_IT>
      break;
 8003f6e:	e010      	b.n	8003f92 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f7e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fd fe2c 	bl	8001be2 <HAL_DMA_Abort_IT>
      break;
 8003f8a:	e002      	b.n	8003f92 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f90:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d17b      	bne.n	8004090 <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	6839      	ldr	r1, [r7, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 fef3 	bl	8004d8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a3c      	ldr	r2, [pc, #240]	@ (800409c <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00e      	beq.n	8003fce <HAL_TIM_PWM_Stop_DMA+0x102>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a3a      	ldr	r2, [pc, #232]	@ (80040a0 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d009      	beq.n	8003fce <HAL_TIM_PWM_Stop_DMA+0x102>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a39      	ldr	r2, [pc, #228]	@ (80040a4 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d004      	beq.n	8003fce <HAL_TIM_PWM_Stop_DMA+0x102>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a37      	ldr	r2, [pc, #220]	@ (80040a8 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d101      	bne.n	8003fd2 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <HAL_TIM_PWM_Stop_DMA+0x108>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d017      	beq.n	8004008 <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6a1a      	ldr	r2, [r3, #32]
 8003fde:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10f      	bne.n	8004008 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a1a      	ldr	r2, [r3, #32]
 8003fee:	f240 4344 	movw	r3, #1092	@ 0x444
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d107      	bne.n	8004008 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004006:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6a1a      	ldr	r2, [r3, #32]
 800400e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10f      	bne.n	8004038 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6a1a      	ldr	r2, [r3, #32]
 800401e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004022:	4013      	ands	r3, r2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d107      	bne.n	8004038 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d104      	bne.n	8004048 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004046:	e023      	b.n	8004090 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b04      	cmp	r3, #4
 800404c:	d104      	bne.n	8004058 <HAL_TIM_PWM_Stop_DMA+0x18c>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004056:	e01b      	b.n	8004090 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b08      	cmp	r3, #8
 800405c:	d104      	bne.n	8004068 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004066:	e013      	b.n	8004090 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b0c      	cmp	r3, #12
 800406c:	d104      	bne.n	8004078 <HAL_TIM_PWM_Stop_DMA+0x1ac>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004076:	e00b      	b.n	8004090 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b10      	cmp	r3, #16
 800407c:	d104      	bne.n	8004088 <HAL_TIM_PWM_Stop_DMA+0x1bc>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004086:	e003      	b.n	8004090 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8004090:	7bfb      	ldrb	r3, [r7, #15]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40014000 	.word	0x40014000
 80040a4:	40014400 	.word	0x40014400
 80040a8:	40014800 	.word	0x40014800

080040ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e0ff      	b.n	80042ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b14      	cmp	r3, #20
 80040d6:	f200 80f0 	bhi.w	80042ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80040da:	a201      	add	r2, pc, #4	@ (adr r2, 80040e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	08004135 	.word	0x08004135
 80040e4:	080042bb 	.word	0x080042bb
 80040e8:	080042bb 	.word	0x080042bb
 80040ec:	080042bb 	.word	0x080042bb
 80040f0:	08004175 	.word	0x08004175
 80040f4:	080042bb 	.word	0x080042bb
 80040f8:	080042bb 	.word	0x080042bb
 80040fc:	080042bb 	.word	0x080042bb
 8004100:	080041b7 	.word	0x080041b7
 8004104:	080042bb 	.word	0x080042bb
 8004108:	080042bb 	.word	0x080042bb
 800410c:	080042bb 	.word	0x080042bb
 8004110:	080041f7 	.word	0x080041f7
 8004114:	080042bb 	.word	0x080042bb
 8004118:	080042bb 	.word	0x080042bb
 800411c:	080042bb 	.word	0x080042bb
 8004120:	08004239 	.word	0x08004239
 8004124:	080042bb 	.word	0x080042bb
 8004128:	080042bb 	.word	0x080042bb
 800412c:	080042bb 	.word	0x080042bb
 8004130:	08004279 	.word	0x08004279
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fae6 	bl	800470c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0208 	orr.w	r2, r2, #8
 800414e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0204 	bic.w	r2, r2, #4
 800415e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6999      	ldr	r1, [r3, #24]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	619a      	str	r2, [r3, #24]
      break;
 8004172:	e0a5      	b.n	80042c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fb4c 	bl	8004818 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800418e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800419e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6999      	ldr	r1, [r3, #24]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	021a      	lsls	r2, r3, #8
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	619a      	str	r2, [r3, #24]
      break;
 80041b4:	e084      	b.n	80042c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fbab 	bl	8004918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0208 	orr.w	r2, r2, #8
 80041d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0204 	bic.w	r2, r2, #4
 80041e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69d9      	ldr	r1, [r3, #28]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	61da      	str	r2, [r3, #28]
      break;
 80041f4:	e064      	b.n	80042c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fc09 	bl	8004a14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69d9      	ldr	r1, [r3, #28]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	021a      	lsls	r2, r3, #8
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	61da      	str	r2, [r3, #28]
      break;
 8004236:	e043      	b.n	80042c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fc4c 	bl	8004adc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0208 	orr.w	r2, r2, #8
 8004252:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0204 	bic.w	r2, r2, #4
 8004262:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004276:	e023      	b.n	80042c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fc8a 	bl	8004b98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004292:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	021a      	lsls	r2, r3, #8
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80042b8:	e002      	b.n	80042c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	75fb      	strb	r3, [r7, #23]
      break;
 80042be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop

080042d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_TIM_ConfigClockSource+0x1c>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e0b6      	b.n	800445e <HAL_TIM_ConfigClockSource+0x18a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800430e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800431a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800432c:	d03e      	beq.n	80043ac <HAL_TIM_ConfigClockSource+0xd8>
 800432e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004332:	f200 8087 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x170>
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433a:	f000 8086 	beq.w	800444a <HAL_TIM_ConfigClockSource+0x176>
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004342:	d87f      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x170>
 8004344:	2b70      	cmp	r3, #112	@ 0x70
 8004346:	d01a      	beq.n	800437e <HAL_TIM_ConfigClockSource+0xaa>
 8004348:	2b70      	cmp	r3, #112	@ 0x70
 800434a:	d87b      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x170>
 800434c:	2b60      	cmp	r3, #96	@ 0x60
 800434e:	d050      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x11e>
 8004350:	2b60      	cmp	r3, #96	@ 0x60
 8004352:	d877      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x170>
 8004354:	2b50      	cmp	r3, #80	@ 0x50
 8004356:	d03c      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0xfe>
 8004358:	2b50      	cmp	r3, #80	@ 0x50
 800435a:	d873      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x170>
 800435c:	2b40      	cmp	r3, #64	@ 0x40
 800435e:	d058      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x13e>
 8004360:	2b40      	cmp	r3, #64	@ 0x40
 8004362:	d86f      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x170>
 8004364:	2b30      	cmp	r3, #48	@ 0x30
 8004366:	d064      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15e>
 8004368:	2b30      	cmp	r3, #48	@ 0x30
 800436a:	d86b      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x170>
 800436c:	2b20      	cmp	r3, #32
 800436e:	d060      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15e>
 8004370:	2b20      	cmp	r3, #32
 8004372:	d867      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x170>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d05c      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15e>
 8004378:	2b10      	cmp	r3, #16
 800437a:	d05a      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x15e>
 800437c:	e062      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800438e:	f000 fcdd 	bl	8004d4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	609a      	str	r2, [r3, #8]
      break;
 80043aa:	e04f      	b.n	800444c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043bc:	f000 fcc6 	bl	8004d4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043ce:	609a      	str	r2, [r3, #8]
      break;
 80043d0:	e03c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043de:	461a      	mov	r2, r3
 80043e0:	f000 fc3a 	bl	8004c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2150      	movs	r1, #80	@ 0x50
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fc93 	bl	8004d16 <TIM_ITRx_SetConfig>
      break;
 80043f0:	e02c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fe:	461a      	mov	r2, r3
 8004400:	f000 fc59 	bl	8004cb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2160      	movs	r1, #96	@ 0x60
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fc83 	bl	8004d16 <TIM_ITRx_SetConfig>
      break;
 8004410:	e01c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800441e:	461a      	mov	r2, r3
 8004420:	f000 fc1a 	bl	8004c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2140      	movs	r1, #64	@ 0x40
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fc73 	bl	8004d16 <TIM_ITRx_SetConfig>
      break;
 8004430:	e00c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4619      	mov	r1, r3
 800443c:	4610      	mov	r0, r2
 800443e:	f000 fc6a 	bl	8004d16 <TIM_ITRx_SetConfig>
      break;
 8004442:	e003      	b.n	800444c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
      break;
 8004448:	e000      	b.n	800444c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800444a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d107      	bne.n	80044b6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b4:	e02a      	b.n	800450c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d107      	bne.n	80044d0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2202      	movs	r2, #2
 80044c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044ce:	e01d      	b.n	800450c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d107      	bne.n	80044ea <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2204      	movs	r2, #4
 80044de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044e8:	e010      	b.n	800450c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d107      	bne.n	8004504 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2208      	movs	r2, #8
 80044f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004502:	e003      	b.n	800450c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f7ff ffb4 	bl	800447a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	771a      	strb	r2, [r3, #28]
}
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	429a      	cmp	r2, r3
 8004536:	d10b      	bne.n	8004550 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2201      	movs	r2, #1
 800453c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d136      	bne.n	80045b4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800454e:	e031      	b.n	80045b4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	429a      	cmp	r2, r3
 8004558:	d10b      	bne.n	8004572 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2202      	movs	r2, #2
 800455e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d125      	bne.n	80045b4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004570:	e020      	b.n	80045b4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	429a      	cmp	r2, r3
 800457a:	d10b      	bne.n	8004594 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2204      	movs	r2, #4
 8004580:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d114      	bne.n	80045b4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004592:	e00f      	b.n	80045b4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	429a      	cmp	r2, r3
 800459c:	d10a      	bne.n	80045b4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2208      	movs	r2, #8
 80045a2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d103      	bne.n	80045b4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7fc fc27 	bl	8000e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d103      	bne.n	80045e8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	771a      	strb	r2, [r3, #28]
 80045e6:	e019      	b.n	800461c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d103      	bne.n	80045fa <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2202      	movs	r2, #2
 80045f6:	771a      	strb	r2, [r3, #28]
 80045f8:	e010      	b.n	800461c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	d103      	bne.n	800460c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2204      	movs	r2, #4
 8004608:	771a      	strb	r2, [r3, #28]
 800460a:	e007      	b.n	800461c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	429a      	cmp	r2, r3
 8004614:	d102      	bne.n	800461c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2208      	movs	r2, #8
 800461a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7ff ff22 	bl	8004466 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	771a      	strb	r2, [r3, #28]
}
 8004628:	bf00      	nop
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a2e      	ldr	r2, [pc, #184]	@ (80046fc <TIM_Base_SetConfig+0xcc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_Base_SetConfig+0x20>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800464e:	d108      	bne.n	8004662 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a25      	ldr	r2, [pc, #148]	@ (80046fc <TIM_Base_SetConfig+0xcc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00f      	beq.n	800468a <TIM_Base_SetConfig+0x5a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004670:	d00b      	beq.n	800468a <TIM_Base_SetConfig+0x5a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a22      	ldr	r2, [pc, #136]	@ (8004700 <TIM_Base_SetConfig+0xd0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d007      	beq.n	800468a <TIM_Base_SetConfig+0x5a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a21      	ldr	r2, [pc, #132]	@ (8004704 <TIM_Base_SetConfig+0xd4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d003      	beq.n	800468a <TIM_Base_SetConfig+0x5a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a20      	ldr	r2, [pc, #128]	@ (8004708 <TIM_Base_SetConfig+0xd8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d108      	bne.n	800469c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a0e      	ldr	r2, [pc, #56]	@ (80046fc <TIM_Base_SetConfig+0xcc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00b      	beq.n	80046e0 <TIM_Base_SetConfig+0xb0>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004700 <TIM_Base_SetConfig+0xd0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d007      	beq.n	80046e0 <TIM_Base_SetConfig+0xb0>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004704 <TIM_Base_SetConfig+0xd4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_Base_SetConfig+0xb0>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a0b      	ldr	r2, [pc, #44]	@ (8004708 <TIM_Base_SetConfig+0xd8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d103      	bne.n	80046e8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	615a      	str	r2, [r3, #20]
}
 80046ee:	bf00      	nop
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40012c00 	.word	0x40012c00
 8004700:	40014000 	.word	0x40014000
 8004704:	40014400 	.word	0x40014400
 8004708:	40014800 	.word	0x40014800

0800470c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f023 0201 	bic.w	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800473a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0303 	bic.w	r3, r3, #3
 8004746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f023 0302 	bic.w	r3, r3, #2
 8004758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a28      	ldr	r2, [pc, #160]	@ (8004808 <TIM_OC1_SetConfig+0xfc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00b      	beq.n	8004784 <TIM_OC1_SetConfig+0x78>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a27      	ldr	r2, [pc, #156]	@ (800480c <TIM_OC1_SetConfig+0x100>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d007      	beq.n	8004784 <TIM_OC1_SetConfig+0x78>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a26      	ldr	r2, [pc, #152]	@ (8004810 <TIM_OC1_SetConfig+0x104>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d003      	beq.n	8004784 <TIM_OC1_SetConfig+0x78>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a25      	ldr	r2, [pc, #148]	@ (8004814 <TIM_OC1_SetConfig+0x108>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d10c      	bne.n	800479e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f023 0308 	bic.w	r3, r3, #8
 800478a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f023 0304 	bic.w	r3, r3, #4
 800479c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a19      	ldr	r2, [pc, #100]	@ (8004808 <TIM_OC1_SetConfig+0xfc>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00b      	beq.n	80047be <TIM_OC1_SetConfig+0xb2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a18      	ldr	r2, [pc, #96]	@ (800480c <TIM_OC1_SetConfig+0x100>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d007      	beq.n	80047be <TIM_OC1_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a17      	ldr	r2, [pc, #92]	@ (8004810 <TIM_OC1_SetConfig+0x104>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d003      	beq.n	80047be <TIM_OC1_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a16      	ldr	r2, [pc, #88]	@ (8004814 <TIM_OC1_SetConfig+0x108>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d111      	bne.n	80047e2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	621a      	str	r2, [r3, #32]
}
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	40012c00 	.word	0x40012c00
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400
 8004814:	40014800 	.word	0x40014800

08004818 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f023 0210 	bic.w	r2, r3, #16
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800484a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4313      	orrs	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f023 0320 	bic.w	r3, r3, #32
 8004866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a24      	ldr	r2, [pc, #144]	@ (8004908 <TIM_OC2_SetConfig+0xf0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d10d      	bne.n	8004898 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	4313      	orrs	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004896:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a1b      	ldr	r2, [pc, #108]	@ (8004908 <TIM_OC2_SetConfig+0xf0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00b      	beq.n	80048b8 <TIM_OC2_SetConfig+0xa0>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a1a      	ldr	r2, [pc, #104]	@ (800490c <TIM_OC2_SetConfig+0xf4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d007      	beq.n	80048b8 <TIM_OC2_SetConfig+0xa0>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a19      	ldr	r2, [pc, #100]	@ (8004910 <TIM_OC2_SetConfig+0xf8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <TIM_OC2_SetConfig+0xa0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a18      	ldr	r2, [pc, #96]	@ (8004914 <TIM_OC2_SetConfig+0xfc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d113      	bne.n	80048e0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048be:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048c6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	621a      	str	r2, [r3, #32]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40014000 	.word	0x40014000
 8004910:	40014400 	.word	0x40014400
 8004914:	40014800 	.word	0x40014800

08004918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800494a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0303 	bic.w	r3, r3, #3
 8004952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a23      	ldr	r2, [pc, #140]	@ (8004a04 <TIM_OC3_SetConfig+0xec>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d10d      	bne.n	8004996 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004980:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	021b      	lsls	r3, r3, #8
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004994:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a1a      	ldr	r2, [pc, #104]	@ (8004a04 <TIM_OC3_SetConfig+0xec>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00b      	beq.n	80049b6 <TIM_OC3_SetConfig+0x9e>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a19      	ldr	r2, [pc, #100]	@ (8004a08 <TIM_OC3_SetConfig+0xf0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d007      	beq.n	80049b6 <TIM_OC3_SetConfig+0x9e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a18      	ldr	r2, [pc, #96]	@ (8004a0c <TIM_OC3_SetConfig+0xf4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d003      	beq.n	80049b6 <TIM_OC3_SetConfig+0x9e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a17      	ldr	r2, [pc, #92]	@ (8004a10 <TIM_OC3_SetConfig+0xf8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d113      	bne.n	80049de <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	621a      	str	r2, [r3, #32]
}
 80049f8:	bf00      	nop
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	40012c00 	.word	0x40012c00
 8004a08:	40014000 	.word	0x40014000
 8004a0c:	40014400 	.word	0x40014400
 8004a10:	40014800 	.word	0x40014800

08004a14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	031b      	lsls	r3, r3, #12
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a16      	ldr	r2, [pc, #88]	@ (8004acc <TIM_OC4_SetConfig+0xb8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00b      	beq.n	8004a90 <TIM_OC4_SetConfig+0x7c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a15      	ldr	r2, [pc, #84]	@ (8004ad0 <TIM_OC4_SetConfig+0xbc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d007      	beq.n	8004a90 <TIM_OC4_SetConfig+0x7c>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a14      	ldr	r2, [pc, #80]	@ (8004ad4 <TIM_OC4_SetConfig+0xc0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <TIM_OC4_SetConfig+0x7c>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a13      	ldr	r2, [pc, #76]	@ (8004ad8 <TIM_OC4_SetConfig+0xc4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d109      	bne.n	8004aa4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	019b      	lsls	r3, r3, #6
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	621a      	str	r2, [r3, #32]
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40012c00 	.word	0x40012c00
 8004ad0:	40014000 	.word	0x40014000
 8004ad4:	40014400 	.word	0x40014400
 8004ad8:	40014800 	.word	0x40014800

08004adc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004b20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	041b      	lsls	r3, r3, #16
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a15      	ldr	r2, [pc, #84]	@ (8004b88 <TIM_OC5_SetConfig+0xac>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00b      	beq.n	8004b4e <TIM_OC5_SetConfig+0x72>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a14      	ldr	r2, [pc, #80]	@ (8004b8c <TIM_OC5_SetConfig+0xb0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d007      	beq.n	8004b4e <TIM_OC5_SetConfig+0x72>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a13      	ldr	r2, [pc, #76]	@ (8004b90 <TIM_OC5_SetConfig+0xb4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d003      	beq.n	8004b4e <TIM_OC5_SetConfig+0x72>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a12      	ldr	r2, [pc, #72]	@ (8004b94 <TIM_OC5_SetConfig+0xb8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d109      	bne.n	8004b62 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	621a      	str	r2, [r3, #32]
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	40014000 	.word	0x40014000
 8004b90:	40014400 	.word	0x40014400
 8004b94:	40014800 	.word	0x40014800

08004b98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	021b      	lsls	r3, r3, #8
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004bde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	051b      	lsls	r3, r3, #20
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a16      	ldr	r2, [pc, #88]	@ (8004c48 <TIM_OC6_SetConfig+0xb0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00b      	beq.n	8004c0c <TIM_OC6_SetConfig+0x74>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a15      	ldr	r2, [pc, #84]	@ (8004c4c <TIM_OC6_SetConfig+0xb4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d007      	beq.n	8004c0c <TIM_OC6_SetConfig+0x74>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a14      	ldr	r2, [pc, #80]	@ (8004c50 <TIM_OC6_SetConfig+0xb8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_OC6_SetConfig+0x74>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a13      	ldr	r2, [pc, #76]	@ (8004c54 <TIM_OC6_SetConfig+0xbc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d109      	bne.n	8004c20 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	029b      	lsls	r3, r3, #10
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	621a      	str	r2, [r3, #32]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40012c00 	.word	0x40012c00
 8004c4c:	40014000 	.word	0x40014000
 8004c50:	40014400 	.word	0x40014400
 8004c54:	40014800 	.word	0x40014800

08004c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	f023 0201 	bic.w	r2, r3, #1
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f023 030a 	bic.w	r3, r3, #10
 8004c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	621a      	str	r2, [r3, #32]
}
 8004caa:	bf00      	nop
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b087      	sub	sp, #28
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	f023 0210 	bic.w	r2, r3, #16
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	031b      	lsls	r3, r3, #12
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	621a      	str	r2, [r3, #32]
}
 8004d0a:	bf00      	nop
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b085      	sub	sp, #20
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f043 0307 	orr.w	r3, r3, #7
 8004d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	609a      	str	r2, [r3, #8]
}
 8004d40:	bf00      	nop
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	021a      	lsls	r2, r3, #8
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	609a      	str	r2, [r3, #8]
}
 8004d80:	bf00      	nop
 8004d82:	371c      	adds	r7, #28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f003 031f 	and.w	r3, r3, #31
 8004d9e:	2201      	movs	r2, #1
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a1a      	ldr	r2, [r3, #32]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	43db      	mvns	r3, r3
 8004dae:	401a      	ands	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a1a      	ldr	r2, [r3, #32]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f003 031f 	and.w	r3, r3, #31
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	621a      	str	r2, [r3, #32]
}
 8004dca:	bf00      	nop
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e04f      	b.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a21      	ldr	r2, [pc, #132]	@ (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d108      	bne.n	8004e2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a14      	ldr	r2, [pc, #80]	@ (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d009      	beq.n	8004e64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e58:	d004      	beq.n	8004e64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a10      	ldr	r2, [pc, #64]	@ (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d10c      	bne.n	8004e7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40014000 	.word	0x40014000

08004ea4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e060      	b.n	8004f82 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	041b      	lsls	r3, r3, #16
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a14      	ldr	r2, [pc, #80]	@ (8004f90 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d115      	bne.n	8004f70 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	051b      	lsls	r3, r3, #20
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40012c00 	.word	0x40012c00

08004f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e040      	b.n	8005028 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fc fb1a 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2224      	movs	r2, #36	@ 0x24
 8004fc0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0201 	bic.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f82c 	bl	8005030 <UART_SetConfig>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e022      	b.n	8005028 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f956 	bl	800529c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ffe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800500e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f9dd 	bl	80053e0 <UART_CheckIdleState>
 8005026:	4603      	mov	r3, r0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4b8a      	ldr	r3, [pc, #552]	@ (8005284 <UART_SetConfig+0x254>)
 800505c:	4013      	ands	r3, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	6979      	ldr	r1, [r7, #20]
 8005064:	430b      	orrs	r3, r1
 8005066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	430a      	orrs	r2, r1
 80050a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a78      	ldr	r2, [pc, #480]	@ (8005288 <UART_SetConfig+0x258>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d120      	bne.n	80050ee <UART_SetConfig+0xbe>
 80050ac:	4b77      	ldr	r3, [pc, #476]	@ (800528c <UART_SetConfig+0x25c>)
 80050ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d817      	bhi.n	80050e8 <UART_SetConfig+0xb8>
 80050b8:	a201      	add	r2, pc, #4	@ (adr r2, 80050c0 <UART_SetConfig+0x90>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	080050d1 	.word	0x080050d1
 80050c4:	080050dd 	.word	0x080050dd
 80050c8:	080050e3 	.word	0x080050e3
 80050cc:	080050d7 	.word	0x080050d7
 80050d0:	2300      	movs	r3, #0
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e01d      	b.n	8005112 <UART_SetConfig+0xe2>
 80050d6:	2302      	movs	r3, #2
 80050d8:	77fb      	strb	r3, [r7, #31]
 80050da:	e01a      	b.n	8005112 <UART_SetConfig+0xe2>
 80050dc:	2304      	movs	r3, #4
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e017      	b.n	8005112 <UART_SetConfig+0xe2>
 80050e2:	2308      	movs	r3, #8
 80050e4:	77fb      	strb	r3, [r7, #31]
 80050e6:	e014      	b.n	8005112 <UART_SetConfig+0xe2>
 80050e8:	2310      	movs	r3, #16
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e011      	b.n	8005112 <UART_SetConfig+0xe2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a67      	ldr	r2, [pc, #412]	@ (8005290 <UART_SetConfig+0x260>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d102      	bne.n	80050fe <UART_SetConfig+0xce>
 80050f8:	2300      	movs	r3, #0
 80050fa:	77fb      	strb	r3, [r7, #31]
 80050fc:	e009      	b.n	8005112 <UART_SetConfig+0xe2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a64      	ldr	r2, [pc, #400]	@ (8005294 <UART_SetConfig+0x264>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d102      	bne.n	800510e <UART_SetConfig+0xde>
 8005108:	2300      	movs	r3, #0
 800510a:	77fb      	strb	r3, [r7, #31]
 800510c:	e001      	b.n	8005112 <UART_SetConfig+0xe2>
 800510e:	2310      	movs	r3, #16
 8005110:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800511a:	d15a      	bne.n	80051d2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800511c:	7ffb      	ldrb	r3, [r7, #31]
 800511e:	2b08      	cmp	r3, #8
 8005120:	d827      	bhi.n	8005172 <UART_SetConfig+0x142>
 8005122:	a201      	add	r2, pc, #4	@ (adr r2, 8005128 <UART_SetConfig+0xf8>)
 8005124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005128:	0800514d 	.word	0x0800514d
 800512c:	08005155 	.word	0x08005155
 8005130:	0800515d 	.word	0x0800515d
 8005134:	08005173 	.word	0x08005173
 8005138:	08005163 	.word	0x08005163
 800513c:	08005173 	.word	0x08005173
 8005140:	08005173 	.word	0x08005173
 8005144:	08005173 	.word	0x08005173
 8005148:	0800516b 	.word	0x0800516b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800514c:	f7fe fa32 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8005150:	61b8      	str	r0, [r7, #24]
        break;
 8005152:	e013      	b.n	800517c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005154:	f7fe fa50 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 8005158:	61b8      	str	r0, [r7, #24]
        break;
 800515a:	e00f      	b.n	800517c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800515c:	4b4e      	ldr	r3, [pc, #312]	@ (8005298 <UART_SetConfig+0x268>)
 800515e:	61bb      	str	r3, [r7, #24]
        break;
 8005160:	e00c      	b.n	800517c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005162:	f7fe f9b1 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 8005166:	61b8      	str	r0, [r7, #24]
        break;
 8005168:	e008      	b.n	800517c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800516a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800516e:	61bb      	str	r3, [r7, #24]
        break;
 8005170:	e004      	b.n	800517c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	77bb      	strb	r3, [r7, #30]
        break;
 800517a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d074      	beq.n	800526c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	005a      	lsls	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	441a      	add	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	fbb2 f3f3 	udiv	r3, r2, r3
 8005196:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b0f      	cmp	r3, #15
 800519c:	d916      	bls.n	80051cc <UART_SetConfig+0x19c>
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a4:	d212      	bcs.n	80051cc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	f023 030f 	bic.w	r3, r3, #15
 80051ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	085b      	lsrs	r3, r3, #1
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	89fb      	ldrh	r3, [r7, #14]
 80051be:	4313      	orrs	r3, r2
 80051c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	89fa      	ldrh	r2, [r7, #14]
 80051c8:	60da      	str	r2, [r3, #12]
 80051ca:	e04f      	b.n	800526c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	77bb      	strb	r3, [r7, #30]
 80051d0:	e04c      	b.n	800526c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051d2:	7ffb      	ldrb	r3, [r7, #31]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d828      	bhi.n	800522a <UART_SetConfig+0x1fa>
 80051d8:	a201      	add	r2, pc, #4	@ (adr r2, 80051e0 <UART_SetConfig+0x1b0>)
 80051da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051de:	bf00      	nop
 80051e0:	08005205 	.word	0x08005205
 80051e4:	0800520d 	.word	0x0800520d
 80051e8:	08005215 	.word	0x08005215
 80051ec:	0800522b 	.word	0x0800522b
 80051f0:	0800521b 	.word	0x0800521b
 80051f4:	0800522b 	.word	0x0800522b
 80051f8:	0800522b 	.word	0x0800522b
 80051fc:	0800522b 	.word	0x0800522b
 8005200:	08005223 	.word	0x08005223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005204:	f7fe f9d6 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8005208:	61b8      	str	r0, [r7, #24]
        break;
 800520a:	e013      	b.n	8005234 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800520c:	f7fe f9f4 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 8005210:	61b8      	str	r0, [r7, #24]
        break;
 8005212:	e00f      	b.n	8005234 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005214:	4b20      	ldr	r3, [pc, #128]	@ (8005298 <UART_SetConfig+0x268>)
 8005216:	61bb      	str	r3, [r7, #24]
        break;
 8005218:	e00c      	b.n	8005234 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521a:	f7fe f955 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 800521e:	61b8      	str	r0, [r7, #24]
        break;
 8005220:	e008      	b.n	8005234 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005226:	61bb      	str	r3, [r7, #24]
        break;
 8005228:	e004      	b.n	8005234 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	77bb      	strb	r3, [r7, #30]
        break;
 8005232:	bf00      	nop
    }

    if (pclk != 0U)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d018      	beq.n	800526c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	085a      	lsrs	r2, r3, #1
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	441a      	add	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	2b0f      	cmp	r3, #15
 8005252:	d909      	bls.n	8005268 <UART_SetConfig+0x238>
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800525a:	d205      	bcs.n	8005268 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	b29a      	uxth	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	e001      	b.n	800526c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005278:	7fbb      	ldrb	r3, [r7, #30]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	efff69f3 	.word	0xefff69f3
 8005288:	40013800 	.word	0x40013800
 800528c:	40021000 	.word	0x40021000
 8005290:	40004400 	.word	0x40004400
 8005294:	40004800 	.word	0x40004800
 8005298:	007a1200 	.word	0x007a1200

0800529c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01a      	beq.n	80053b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800539a:	d10a      	bne.n	80053b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	605a      	str	r2, [r3, #4]
  }
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b098      	sub	sp, #96	@ 0x60
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053f0:	f7fc fa10 	bl	8001814 <HAL_GetTick>
 80053f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b08      	cmp	r3, #8
 8005402:	d12e      	bne.n	8005462 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005404:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800540c:	2200      	movs	r2, #0
 800540e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f88c 	bl	8005530 <UART_WaitOnFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d021      	beq.n	8005462 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800542c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005432:	653b      	str	r3, [r7, #80]	@ 0x50
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800543c:	647b      	str	r3, [r7, #68]	@ 0x44
 800543e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005442:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800544a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e6      	bne.n	800541e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e062      	b.n	8005528 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b04      	cmp	r3, #4
 800546e:	d149      	bne.n	8005504 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005470:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005478:	2200      	movs	r2, #0
 800547a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f856 	bl	8005530 <UART_WaitOnFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d03c      	beq.n	8005504 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005492:	e853 3f00 	ldrex	r3, [r3]
 8005496:	623b      	str	r3, [r7, #32]
   return(result);
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800549e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80054aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e6      	bne.n	800548a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3308      	adds	r3, #8
 80054c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3308      	adds	r3, #8
 80054da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054dc:	61fa      	str	r2, [r7, #28]
 80054de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	69b9      	ldr	r1, [r7, #24]
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	617b      	str	r3, [r7, #20]
   return(result);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e5      	bne.n	80054bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e011      	b.n	8005528 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3758      	adds	r7, #88	@ 0x58
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	4613      	mov	r3, r2
 800553e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005540:	e049      	b.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d045      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554a:	f7fc f963 	bl	8001814 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	429a      	cmp	r2, r3
 8005558:	d302      	bcc.n	8005560 <UART_WaitOnFlagUntilTimeout+0x30>
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e048      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	d031      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b08      	cmp	r3, #8
 800557e:	d110      	bne.n	80055a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2208      	movs	r2, #8
 8005586:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 f838 	bl	80055fe <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2208      	movs	r2, #8
 8005592:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e029      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055b0:	d111      	bne.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f81e 	bl	80055fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e00f      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4013      	ands	r3, r2
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	bf0c      	ite	eq
 80055e6:	2301      	moveq	r3, #1
 80055e8:	2300      	movne	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d0a6      	beq.n	8005542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055fe:	b480      	push	{r7}
 8005600:	b095      	sub	sp, #84	@ 0x54
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800560e:	e853 3f00 	ldrex	r3, [r3]
 8005612:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005616:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800561a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	461a      	mov	r2, r3
 8005622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005624:	643b      	str	r3, [r7, #64]	@ 0x40
 8005626:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800562a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e6      	bne.n	8005606 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3308      	adds	r3, #8
 800563e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	e853 3f00 	ldrex	r3, [r3]
 8005646:	61fb      	str	r3, [r7, #28]
   return(result);
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f023 0301 	bic.w	r3, r3, #1
 800564e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3308      	adds	r3, #8
 8005656:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005658:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800565a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800565e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005660:	e841 2300 	strex	r3, r2, [r1]
 8005664:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e5      	bne.n	8005638 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005670:	2b01      	cmp	r3, #1
 8005672:	d118      	bne.n	80056a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	60bb      	str	r3, [r7, #8]
   return(result);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f023 0310 	bic.w	r3, r3, #16
 8005688:	647b      	str	r3, [r7, #68]	@ 0x44
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005692:	61bb      	str	r3, [r7, #24]
 8005694:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005696:	6979      	ldr	r1, [r7, #20]
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	613b      	str	r3, [r7, #16]
   return(result);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e6      	bne.n	8005674 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056ba:	bf00      	nop
 80056bc:	3754      	adds	r7, #84	@ 0x54
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <memset>:
 80056c6:	4402      	add	r2, r0
 80056c8:	4603      	mov	r3, r0
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d100      	bne.n	80056d0 <memset+0xa>
 80056ce:	4770      	bx	lr
 80056d0:	f803 1b01 	strb.w	r1, [r3], #1
 80056d4:	e7f9      	b.n	80056ca <memset+0x4>
	...

080056d8 <__libc_init_array>:
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	4d0d      	ldr	r5, [pc, #52]	@ (8005710 <__libc_init_array+0x38>)
 80056dc:	4c0d      	ldr	r4, [pc, #52]	@ (8005714 <__libc_init_array+0x3c>)
 80056de:	1b64      	subs	r4, r4, r5
 80056e0:	10a4      	asrs	r4, r4, #2
 80056e2:	2600      	movs	r6, #0
 80056e4:	42a6      	cmp	r6, r4
 80056e6:	d109      	bne.n	80056fc <__libc_init_array+0x24>
 80056e8:	4d0b      	ldr	r5, [pc, #44]	@ (8005718 <__libc_init_array+0x40>)
 80056ea:	4c0c      	ldr	r4, [pc, #48]	@ (800571c <__libc_init_array+0x44>)
 80056ec:	f001 f8a8 	bl	8006840 <_init>
 80056f0:	1b64      	subs	r4, r4, r5
 80056f2:	10a4      	asrs	r4, r4, #2
 80056f4:	2600      	movs	r6, #0
 80056f6:	42a6      	cmp	r6, r4
 80056f8:	d105      	bne.n	8005706 <__libc_init_array+0x2e>
 80056fa:	bd70      	pop	{r4, r5, r6, pc}
 80056fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005700:	4798      	blx	r3
 8005702:	3601      	adds	r6, #1
 8005704:	e7ee      	b.n	80056e4 <__libc_init_array+0xc>
 8005706:	f855 3b04 	ldr.w	r3, [r5], #4
 800570a:	4798      	blx	r3
 800570c:	3601      	adds	r6, #1
 800570e:	e7f2      	b.n	80056f6 <__libc_init_array+0x1e>
 8005710:	08006a78 	.word	0x08006a78
 8005714:	08006a78 	.word	0x08006a78
 8005718:	08006a78 	.word	0x08006a78
 800571c:	08006a7c 	.word	0x08006a7c

08005720 <tan>:
 8005720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005722:	ec53 2b10 	vmov	r2, r3, d0
 8005726:	4816      	ldr	r0, [pc, #88]	@ (8005780 <tan+0x60>)
 8005728:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800572c:	4281      	cmp	r1, r0
 800572e:	d807      	bhi.n	8005740 <tan+0x20>
 8005730:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8005778 <tan+0x58>
 8005734:	2001      	movs	r0, #1
 8005736:	b005      	add	sp, #20
 8005738:	f85d eb04 	ldr.w	lr, [sp], #4
 800573c:	f000 b824 	b.w	8005788 <__kernel_tan>
 8005740:	4810      	ldr	r0, [pc, #64]	@ (8005784 <tan+0x64>)
 8005742:	4281      	cmp	r1, r0
 8005744:	d908      	bls.n	8005758 <tan+0x38>
 8005746:	4610      	mov	r0, r2
 8005748:	4619      	mov	r1, r3
 800574a:	f7fa fd41 	bl	80001d0 <__aeabi_dsub>
 800574e:	ec41 0b10 	vmov	d0, r0, r1
 8005752:	b005      	add	sp, #20
 8005754:	f85d fb04 	ldr.w	pc, [sp], #4
 8005758:	4668      	mov	r0, sp
 800575a:	f000 fa19 	bl	8005b90 <__ieee754_rem_pio2>
 800575e:	0040      	lsls	r0, r0, #1
 8005760:	f000 0002 	and.w	r0, r0, #2
 8005764:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005768:	ed9d 0b00 	vldr	d0, [sp]
 800576c:	f1c0 0001 	rsb	r0, r0, #1
 8005770:	f000 f80a 	bl	8005788 <__kernel_tan>
 8005774:	e7ed      	b.n	8005752 <tan+0x32>
 8005776:	bf00      	nop
	...
 8005780:	3fe921fb 	.word	0x3fe921fb
 8005784:	7fefffff 	.word	0x7fefffff

08005788 <__kernel_tan>:
 8005788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578c:	ec5b ab10 	vmov	sl, fp, d0
 8005790:	4bdb      	ldr	r3, [pc, #876]	@ (8005b00 <__kernel_tan+0x378>)
 8005792:	b089      	sub	sp, #36	@ 0x24
 8005794:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 8005798:	429f      	cmp	r7, r3
 800579a:	ec59 8b11 	vmov	r8, r9, d1
 800579e:	4606      	mov	r6, r0
 80057a0:	f8cd b008 	str.w	fp, [sp, #8]
 80057a4:	d85d      	bhi.n	8005862 <__kernel_tan+0xda>
 80057a6:	4650      	mov	r0, sl
 80057a8:	4659      	mov	r1, fp
 80057aa:	f7fb f963 	bl	8000a74 <__aeabi_d2iz>
 80057ae:	4605      	mov	r5, r0
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d17c      	bne.n	80058ae <__kernel_tan+0x126>
 80057b4:	1c73      	adds	r3, r6, #1
 80057b6:	4652      	mov	r2, sl
 80057b8:	4313      	orrs	r3, r2
 80057ba:	433b      	orrs	r3, r7
 80057bc:	d110      	bne.n	80057e0 <__kernel_tan+0x58>
 80057be:	ec4b ab10 	vmov	d0, sl, fp
 80057c2:	f000 fbe1 	bl	8005f88 <fabs>
 80057c6:	49cf      	ldr	r1, [pc, #828]	@ (8005b04 <__kernel_tan+0x37c>)
 80057c8:	ec53 2b10 	vmov	r2, r3, d0
 80057cc:	2000      	movs	r0, #0
 80057ce:	f7fa ffe1 	bl	8000794 <__aeabi_ddiv>
 80057d2:	4682      	mov	sl, r0
 80057d4:	468b      	mov	fp, r1
 80057d6:	ec4b ab10 	vmov	d0, sl, fp
 80057da:	b009      	add	sp, #36	@ 0x24
 80057dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e0:	2e01      	cmp	r6, #1
 80057e2:	d0f8      	beq.n	80057d6 <__kernel_tan+0x4e>
 80057e4:	4642      	mov	r2, r8
 80057e6:	464b      	mov	r3, r9
 80057e8:	4650      	mov	r0, sl
 80057ea:	4659      	mov	r1, fp
 80057ec:	f7fa fcf2 	bl	80001d4 <__adddf3>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	460f      	mov	r7, r1
 80057f6:	2000      	movs	r0, #0
 80057f8:	49c3      	ldr	r1, [pc, #780]	@ (8005b08 <__kernel_tan+0x380>)
 80057fa:	f7fa ffcb 	bl	8000794 <__aeabi_ddiv>
 80057fe:	e9cd 0100 	strd	r0, r1, [sp]
 8005802:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005806:	462e      	mov	r6, r5
 8005808:	4652      	mov	r2, sl
 800580a:	462c      	mov	r4, r5
 800580c:	4630      	mov	r0, r6
 800580e:	461d      	mov	r5, r3
 8005810:	4639      	mov	r1, r7
 8005812:	465b      	mov	r3, fp
 8005814:	f7fa fcdc 	bl	80001d0 <__aeabi_dsub>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4640      	mov	r0, r8
 800581e:	4649      	mov	r1, r9
 8005820:	f7fa fcd6 	bl	80001d0 <__aeabi_dsub>
 8005824:	4632      	mov	r2, r6
 8005826:	462b      	mov	r3, r5
 8005828:	f7fa fe8a 	bl	8000540 <__aeabi_dmul>
 800582c:	4632      	mov	r2, r6
 800582e:	4682      	mov	sl, r0
 8005830:	468b      	mov	fp, r1
 8005832:	462b      	mov	r3, r5
 8005834:	4630      	mov	r0, r6
 8005836:	4639      	mov	r1, r7
 8005838:	f7fa fe82 	bl	8000540 <__aeabi_dmul>
 800583c:	4bb1      	ldr	r3, [pc, #708]	@ (8005b04 <__kernel_tan+0x37c>)
 800583e:	2200      	movs	r2, #0
 8005840:	f7fa fcc8 	bl	80001d4 <__adddf3>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4650      	mov	r0, sl
 800584a:	4659      	mov	r1, fp
 800584c:	f7fa fcc2 	bl	80001d4 <__adddf3>
 8005850:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005854:	f7fa fe74 	bl	8000540 <__aeabi_dmul>
 8005858:	4622      	mov	r2, r4
 800585a:	462b      	mov	r3, r5
 800585c:	f7fa fcba 	bl	80001d4 <__adddf3>
 8005860:	e7b7      	b.n	80057d2 <__kernel_tan+0x4a>
 8005862:	4baa      	ldr	r3, [pc, #680]	@ (8005b0c <__kernel_tan+0x384>)
 8005864:	429f      	cmp	r7, r3
 8005866:	d922      	bls.n	80058ae <__kernel_tan+0x126>
 8005868:	9b02      	ldr	r3, [sp, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	da05      	bge.n	800587a <__kernel_tan+0xf2>
 800586e:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005872:	469b      	mov	fp, r3
 8005874:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005878:	4699      	mov	r9, r3
 800587a:	4652      	mov	r2, sl
 800587c:	465b      	mov	r3, fp
 800587e:	a182      	add	r1, pc, #520	@ (adr r1, 8005a88 <__kernel_tan+0x300>)
 8005880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005884:	f7fa fca4 	bl	80001d0 <__aeabi_dsub>
 8005888:	4642      	mov	r2, r8
 800588a:	464b      	mov	r3, r9
 800588c:	4604      	mov	r4, r0
 800588e:	460d      	mov	r5, r1
 8005890:	a17f      	add	r1, pc, #508	@ (adr r1, 8005a90 <__kernel_tan+0x308>)
 8005892:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005896:	f7fa fc9b 	bl	80001d0 <__aeabi_dsub>
 800589a:	4622      	mov	r2, r4
 800589c:	462b      	mov	r3, r5
 800589e:	f7fa fc99 	bl	80001d4 <__adddf3>
 80058a2:	f04f 0800 	mov.w	r8, #0
 80058a6:	4682      	mov	sl, r0
 80058a8:	468b      	mov	fp, r1
 80058aa:	f04f 0900 	mov.w	r9, #0
 80058ae:	4652      	mov	r2, sl
 80058b0:	465b      	mov	r3, fp
 80058b2:	4650      	mov	r0, sl
 80058b4:	4659      	mov	r1, fp
 80058b6:	f7fa fe43 	bl	8000540 <__aeabi_dmul>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	e9cd 2300 	strd	r2, r3, [sp]
 80058c2:	f7fa fe3d 	bl	8000540 <__aeabi_dmul>
 80058c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058ca:	4604      	mov	r4, r0
 80058cc:	460d      	mov	r5, r1
 80058ce:	4650      	mov	r0, sl
 80058d0:	4659      	mov	r1, fp
 80058d2:	f7fa fe35 	bl	8000540 <__aeabi_dmul>
 80058d6:	a370      	add	r3, pc, #448	@ (adr r3, 8005a98 <__kernel_tan+0x310>)
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058e0:	4620      	mov	r0, r4
 80058e2:	4629      	mov	r1, r5
 80058e4:	f7fa fe2c 	bl	8000540 <__aeabi_dmul>
 80058e8:	a36d      	add	r3, pc, #436	@ (adr r3, 8005aa0 <__kernel_tan+0x318>)
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f7fa fc71 	bl	80001d4 <__adddf3>
 80058f2:	4622      	mov	r2, r4
 80058f4:	462b      	mov	r3, r5
 80058f6:	f7fa fe23 	bl	8000540 <__aeabi_dmul>
 80058fa:	a36b      	add	r3, pc, #428	@ (adr r3, 8005aa8 <__kernel_tan+0x320>)
 80058fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005900:	f7fa fc68 	bl	80001d4 <__adddf3>
 8005904:	4622      	mov	r2, r4
 8005906:	462b      	mov	r3, r5
 8005908:	f7fa fe1a 	bl	8000540 <__aeabi_dmul>
 800590c:	a368      	add	r3, pc, #416	@ (adr r3, 8005ab0 <__kernel_tan+0x328>)
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	f7fa fc5f 	bl	80001d4 <__adddf3>
 8005916:	4622      	mov	r2, r4
 8005918:	462b      	mov	r3, r5
 800591a:	f7fa fe11 	bl	8000540 <__aeabi_dmul>
 800591e:	a366      	add	r3, pc, #408	@ (adr r3, 8005ab8 <__kernel_tan+0x330>)
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f7fa fc56 	bl	80001d4 <__adddf3>
 8005928:	4622      	mov	r2, r4
 800592a:	462b      	mov	r3, r5
 800592c:	f7fa fe08 	bl	8000540 <__aeabi_dmul>
 8005930:	a363      	add	r3, pc, #396	@ (adr r3, 8005ac0 <__kernel_tan+0x338>)
 8005932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005936:	f7fa fc4d 	bl	80001d4 <__adddf3>
 800593a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800593e:	f7fa fdff 	bl	8000540 <__aeabi_dmul>
 8005942:	a361      	add	r3, pc, #388	@ (adr r3, 8005ac8 <__kernel_tan+0x340>)
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800594c:	4620      	mov	r0, r4
 800594e:	4629      	mov	r1, r5
 8005950:	f7fa fdf6 	bl	8000540 <__aeabi_dmul>
 8005954:	a35e      	add	r3, pc, #376	@ (adr r3, 8005ad0 <__kernel_tan+0x348>)
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	f7fa fc3b 	bl	80001d4 <__adddf3>
 800595e:	4622      	mov	r2, r4
 8005960:	462b      	mov	r3, r5
 8005962:	f7fa fded 	bl	8000540 <__aeabi_dmul>
 8005966:	a35c      	add	r3, pc, #368	@ (adr r3, 8005ad8 <__kernel_tan+0x350>)
 8005968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596c:	f7fa fc32 	bl	80001d4 <__adddf3>
 8005970:	4622      	mov	r2, r4
 8005972:	462b      	mov	r3, r5
 8005974:	f7fa fde4 	bl	8000540 <__aeabi_dmul>
 8005978:	a359      	add	r3, pc, #356	@ (adr r3, 8005ae0 <__kernel_tan+0x358>)
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	f7fa fc29 	bl	80001d4 <__adddf3>
 8005982:	4622      	mov	r2, r4
 8005984:	462b      	mov	r3, r5
 8005986:	f7fa fddb 	bl	8000540 <__aeabi_dmul>
 800598a:	a357      	add	r3, pc, #348	@ (adr r3, 8005ae8 <__kernel_tan+0x360>)
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f7fa fc20 	bl	80001d4 <__adddf3>
 8005994:	4622      	mov	r2, r4
 8005996:	462b      	mov	r3, r5
 8005998:	f7fa fdd2 	bl	8000540 <__aeabi_dmul>
 800599c:	a354      	add	r3, pc, #336	@ (adr r3, 8005af0 <__kernel_tan+0x368>)
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	f7fa fc17 	bl	80001d4 <__adddf3>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059ae:	f7fa fc11 	bl	80001d4 <__adddf3>
 80059b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059b6:	f7fa fdc3 	bl	8000540 <__aeabi_dmul>
 80059ba:	4642      	mov	r2, r8
 80059bc:	464b      	mov	r3, r9
 80059be:	f7fa fc09 	bl	80001d4 <__adddf3>
 80059c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059c6:	f7fa fdbb 	bl	8000540 <__aeabi_dmul>
 80059ca:	4642      	mov	r2, r8
 80059cc:	464b      	mov	r3, r9
 80059ce:	f7fa fc01 	bl	80001d4 <__adddf3>
 80059d2:	a349      	add	r3, pc, #292	@ (adr r3, 8005af8 <__kernel_tan+0x370>)
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	4604      	mov	r4, r0
 80059da:	460d      	mov	r5, r1
 80059dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059e0:	f7fa fdae 	bl	8000540 <__aeabi_dmul>
 80059e4:	4622      	mov	r2, r4
 80059e6:	462b      	mov	r3, r5
 80059e8:	f7fa fbf4 	bl	80001d4 <__adddf3>
 80059ec:	e9cd 0100 	strd	r0, r1, [sp]
 80059f0:	460b      	mov	r3, r1
 80059f2:	4602      	mov	r2, r0
 80059f4:	4659      	mov	r1, fp
 80059f6:	4650      	mov	r0, sl
 80059f8:	f7fa fbec 	bl	80001d4 <__adddf3>
 80059fc:	4b43      	ldr	r3, [pc, #268]	@ (8005b0c <__kernel_tan+0x384>)
 80059fe:	429f      	cmp	r7, r3
 8005a00:	4604      	mov	r4, r0
 8005a02:	460d      	mov	r5, r1
 8005a04:	f240 8084 	bls.w	8005b10 <__kernel_tan+0x388>
 8005a08:	4630      	mov	r0, r6
 8005a0a:	f7fa fd2f 	bl	800046c <__aeabi_i2d>
 8005a0e:	4622      	mov	r2, r4
 8005a10:	4680      	mov	r8, r0
 8005a12:	4689      	mov	r9, r1
 8005a14:	462b      	mov	r3, r5
 8005a16:	4620      	mov	r0, r4
 8005a18:	4629      	mov	r1, r5
 8005a1a:	f7fa fd91 	bl	8000540 <__aeabi_dmul>
 8005a1e:	4642      	mov	r2, r8
 8005a20:	4606      	mov	r6, r0
 8005a22:	460f      	mov	r7, r1
 8005a24:	464b      	mov	r3, r9
 8005a26:	4620      	mov	r0, r4
 8005a28:	4629      	mov	r1, r5
 8005a2a:	f7fa fbd3 	bl	80001d4 <__adddf3>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4630      	mov	r0, r6
 8005a34:	4639      	mov	r1, r7
 8005a36:	f7fa fead 	bl	8000794 <__aeabi_ddiv>
 8005a3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a3e:	f7fa fbc7 	bl	80001d0 <__aeabi_dsub>
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	4650      	mov	r0, sl
 8005a48:	4659      	mov	r1, fp
 8005a4a:	f7fa fbc1 	bl	80001d0 <__aeabi_dsub>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	f7fa fbbf 	bl	80001d4 <__adddf3>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	f7fa fbb7 	bl	80001d0 <__aeabi_dsub>
 8005a62:	9b02      	ldr	r3, [sp, #8]
 8005a64:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8005a68:	f00a 0a02 	and.w	sl, sl, #2
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	f1ca 0001 	rsb	r0, sl, #1
 8005a72:	460d      	mov	r5, r1
 8005a74:	f7fa fcfa 	bl	800046c <__aeabi_i2d>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	4629      	mov	r1, r5
 8005a80:	f7fa fd5e 	bl	8000540 <__aeabi_dmul>
 8005a84:	e6a5      	b.n	80057d2 <__kernel_tan+0x4a>
 8005a86:	bf00      	nop
 8005a88:	54442d18 	.word	0x54442d18
 8005a8c:	3fe921fb 	.word	0x3fe921fb
 8005a90:	33145c07 	.word	0x33145c07
 8005a94:	3c81a626 	.word	0x3c81a626
 8005a98:	74bf7ad4 	.word	0x74bf7ad4
 8005a9c:	3efb2a70 	.word	0x3efb2a70
 8005aa0:	32f0a7e9 	.word	0x32f0a7e9
 8005aa4:	3f12b80f 	.word	0x3f12b80f
 8005aa8:	1a8d1068 	.word	0x1a8d1068
 8005aac:	3f3026f7 	.word	0x3f3026f7
 8005ab0:	fee08315 	.word	0xfee08315
 8005ab4:	3f57dbc8 	.word	0x3f57dbc8
 8005ab8:	e96e8493 	.word	0xe96e8493
 8005abc:	3f8226e3 	.word	0x3f8226e3
 8005ac0:	1bb341fe 	.word	0x1bb341fe
 8005ac4:	3faba1ba 	.word	0x3faba1ba
 8005ac8:	db605373 	.word	0xdb605373
 8005acc:	bef375cb 	.word	0xbef375cb
 8005ad0:	a03792a6 	.word	0xa03792a6
 8005ad4:	3f147e88 	.word	0x3f147e88
 8005ad8:	f2f26501 	.word	0xf2f26501
 8005adc:	3f4344d8 	.word	0x3f4344d8
 8005ae0:	c9560328 	.word	0xc9560328
 8005ae4:	3f6d6d22 	.word	0x3f6d6d22
 8005ae8:	8406d637 	.word	0x8406d637
 8005aec:	3f9664f4 	.word	0x3f9664f4
 8005af0:	1110fe7a 	.word	0x1110fe7a
 8005af4:	3fc11111 	.word	0x3fc11111
 8005af8:	55555563 	.word	0x55555563
 8005afc:	3fd55555 	.word	0x3fd55555
 8005b00:	3e2fffff 	.word	0x3e2fffff
 8005b04:	3ff00000 	.word	0x3ff00000
 8005b08:	bff00000 	.word	0xbff00000
 8005b0c:	3fe59427 	.word	0x3fe59427
 8005b10:	2e01      	cmp	r6, #1
 8005b12:	d033      	beq.n	8005b7c <__kernel_tan+0x3f4>
 8005b14:	f04f 0800 	mov.w	r8, #0
 8005b18:	4689      	mov	r9, r1
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	2000      	movs	r0, #0
 8005b20:	4918      	ldr	r1, [pc, #96]	@ (8005b84 <__kernel_tan+0x3fc>)
 8005b22:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005b26:	f7fa fe35 	bl	8000794 <__aeabi_ddiv>
 8005b2a:	4652      	mov	r2, sl
 8005b2c:	460f      	mov	r7, r1
 8005b2e:	465b      	mov	r3, fp
 8005b30:	4606      	mov	r6, r0
 8005b32:	460d      	mov	r5, r1
 8005b34:	4640      	mov	r0, r8
 8005b36:	4649      	mov	r1, r9
 8005b38:	f7fa fb4a 	bl	80001d0 <__aeabi_dsub>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b44:	f7fa fb44 	bl	80001d0 <__aeabi_dsub>
 8005b48:	4642      	mov	r2, r8
 8005b4a:	463b      	mov	r3, r7
 8005b4c:	f7fa fcf8 	bl	8000540 <__aeabi_dmul>
 8005b50:	4642      	mov	r2, r8
 8005b52:	4682      	mov	sl, r0
 8005b54:	468b      	mov	fp, r1
 8005b56:	463b      	mov	r3, r7
 8005b58:	4640      	mov	r0, r8
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	f7fa fcf0 	bl	8000540 <__aeabi_dmul>
 8005b60:	4b09      	ldr	r3, [pc, #36]	@ (8005b88 <__kernel_tan+0x400>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	f7fa fb36 	bl	80001d4 <__adddf3>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4650      	mov	r0, sl
 8005b6e:	4659      	mov	r1, fp
 8005b70:	f7fa fb30 	bl	80001d4 <__adddf3>
 8005b74:	4644      	mov	r4, r8
 8005b76:	4632      	mov	r2, r6
 8005b78:	463b      	mov	r3, r7
 8005b7a:	e66b      	b.n	8005854 <__kernel_tan+0xcc>
 8005b7c:	4682      	mov	sl, r0
 8005b7e:	468b      	mov	fp, r1
 8005b80:	e629      	b.n	80057d6 <__kernel_tan+0x4e>
 8005b82:	bf00      	nop
 8005b84:	bff00000 	.word	0xbff00000
 8005b88:	3ff00000 	.word	0x3ff00000
 8005b8c:	00000000 	.word	0x00000000

08005b90 <__ieee754_rem_pio2>:
 8005b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b94:	ec57 6b10 	vmov	r6, r7, d0
 8005b98:	4bc5      	ldr	r3, [pc, #788]	@ (8005eb0 <__ieee754_rem_pio2+0x320>)
 8005b9a:	b08d      	sub	sp, #52	@ 0x34
 8005b9c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005ba0:	4598      	cmp	r8, r3
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	9704      	str	r7, [sp, #16]
 8005ba6:	d807      	bhi.n	8005bb8 <__ieee754_rem_pio2+0x28>
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2300      	movs	r3, #0
 8005bac:	ed80 0b00 	vstr	d0, [r0]
 8005bb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005bb4:	2500      	movs	r5, #0
 8005bb6:	e028      	b.n	8005c0a <__ieee754_rem_pio2+0x7a>
 8005bb8:	4bbe      	ldr	r3, [pc, #760]	@ (8005eb4 <__ieee754_rem_pio2+0x324>)
 8005bba:	4598      	cmp	r8, r3
 8005bbc:	d878      	bhi.n	8005cb0 <__ieee754_rem_pio2+0x120>
 8005bbe:	9b04      	ldr	r3, [sp, #16]
 8005bc0:	4dbd      	ldr	r5, [pc, #756]	@ (8005eb8 <__ieee754_rem_pio2+0x328>)
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005e78 <__ieee754_rem_pio2+0x2e8>)
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	4639      	mov	r1, r7
 8005bce:	dd38      	ble.n	8005c42 <__ieee754_rem_pio2+0xb2>
 8005bd0:	f7fa fafe 	bl	80001d0 <__aeabi_dsub>
 8005bd4:	45a8      	cmp	r8, r5
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	460f      	mov	r7, r1
 8005bda:	d01a      	beq.n	8005c12 <__ieee754_rem_pio2+0x82>
 8005bdc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005e80 <__ieee754_rem_pio2+0x2f0>)
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	f7fa faf5 	bl	80001d0 <__aeabi_dsub>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	4680      	mov	r8, r0
 8005bec:	4689      	mov	r9, r1
 8005bee:	4630      	mov	r0, r6
 8005bf0:	4639      	mov	r1, r7
 8005bf2:	f7fa faed 	bl	80001d0 <__aeabi_dsub>
 8005bf6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005e80 <__ieee754_rem_pio2+0x2f0>)
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	f7fa fae8 	bl	80001d0 <__aeabi_dsub>
 8005c00:	e9c4 8900 	strd	r8, r9, [r4]
 8005c04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005c08:	2501      	movs	r5, #1
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	b00d      	add	sp, #52	@ 0x34
 8005c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c12:	a39d      	add	r3, pc, #628	@ (adr r3, 8005e88 <__ieee754_rem_pio2+0x2f8>)
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	f7fa fada 	bl	80001d0 <__aeabi_dsub>
 8005c1c:	a39c      	add	r3, pc, #624	@ (adr r3, 8005e90 <__ieee754_rem_pio2+0x300>)
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	4606      	mov	r6, r0
 8005c24:	460f      	mov	r7, r1
 8005c26:	f7fa fad3 	bl	80001d0 <__aeabi_dsub>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4680      	mov	r8, r0
 8005c30:	4689      	mov	r9, r1
 8005c32:	4630      	mov	r0, r6
 8005c34:	4639      	mov	r1, r7
 8005c36:	f7fa facb 	bl	80001d0 <__aeabi_dsub>
 8005c3a:	a395      	add	r3, pc, #596	@ (adr r3, 8005e90 <__ieee754_rem_pio2+0x300>)
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	e7dc      	b.n	8005bfc <__ieee754_rem_pio2+0x6c>
 8005c42:	f7fa fac7 	bl	80001d4 <__adddf3>
 8005c46:	45a8      	cmp	r8, r5
 8005c48:	4606      	mov	r6, r0
 8005c4a:	460f      	mov	r7, r1
 8005c4c:	d018      	beq.n	8005c80 <__ieee754_rem_pio2+0xf0>
 8005c4e:	a38c      	add	r3, pc, #560	@ (adr r3, 8005e80 <__ieee754_rem_pio2+0x2f0>)
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	f7fa fabe 	bl	80001d4 <__adddf3>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4680      	mov	r8, r0
 8005c5e:	4689      	mov	r9, r1
 8005c60:	4630      	mov	r0, r6
 8005c62:	4639      	mov	r1, r7
 8005c64:	f7fa fab4 	bl	80001d0 <__aeabi_dsub>
 8005c68:	a385      	add	r3, pc, #532	@ (adr r3, 8005e80 <__ieee754_rem_pio2+0x2f0>)
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	f7fa fab1 	bl	80001d4 <__adddf3>
 8005c72:	f04f 35ff 	mov.w	r5, #4294967295
 8005c76:	e9c4 8900 	strd	r8, r9, [r4]
 8005c7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005c7e:	e7c4      	b.n	8005c0a <__ieee754_rem_pio2+0x7a>
 8005c80:	a381      	add	r3, pc, #516	@ (adr r3, 8005e88 <__ieee754_rem_pio2+0x2f8>)
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	f7fa faa5 	bl	80001d4 <__adddf3>
 8005c8a:	a381      	add	r3, pc, #516	@ (adr r3, 8005e90 <__ieee754_rem_pio2+0x300>)
 8005c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c90:	4606      	mov	r6, r0
 8005c92:	460f      	mov	r7, r1
 8005c94:	f7fa fa9e 	bl	80001d4 <__adddf3>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4680      	mov	r8, r0
 8005c9e:	4689      	mov	r9, r1
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	f7fa fa94 	bl	80001d0 <__aeabi_dsub>
 8005ca8:	a379      	add	r3, pc, #484	@ (adr r3, 8005e90 <__ieee754_rem_pio2+0x300>)
 8005caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cae:	e7de      	b.n	8005c6e <__ieee754_rem_pio2+0xde>
 8005cb0:	4b82      	ldr	r3, [pc, #520]	@ (8005ebc <__ieee754_rem_pio2+0x32c>)
 8005cb2:	4598      	cmp	r8, r3
 8005cb4:	f200 80d1 	bhi.w	8005e5a <__ieee754_rem_pio2+0x2ca>
 8005cb8:	f000 f966 	bl	8005f88 <fabs>
 8005cbc:	ec57 6b10 	vmov	r6, r7, d0
 8005cc0:	a375      	add	r3, pc, #468	@ (adr r3, 8005e98 <__ieee754_rem_pio2+0x308>)
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	4639      	mov	r1, r7
 8005cca:	f7fa fc39 	bl	8000540 <__aeabi_dmul>
 8005cce:	4b7c      	ldr	r3, [pc, #496]	@ (8005ec0 <__ieee754_rem_pio2+0x330>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f7fa fa7f 	bl	80001d4 <__adddf3>
 8005cd6:	f7fa fecd 	bl	8000a74 <__aeabi_d2iz>
 8005cda:	4605      	mov	r5, r0
 8005cdc:	f7fa fbc6 	bl	800046c <__aeabi_i2d>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ce8:	a363      	add	r3, pc, #396	@ (adr r3, 8005e78 <__ieee754_rem_pio2+0x2e8>)
 8005cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cee:	f7fa fc27 	bl	8000540 <__aeabi_dmul>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	4639      	mov	r1, r7
 8005cfa:	f7fa fa69 	bl	80001d0 <__aeabi_dsub>
 8005cfe:	a360      	add	r3, pc, #384	@ (adr r3, 8005e80 <__ieee754_rem_pio2+0x2f0>)
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	4682      	mov	sl, r0
 8005d06:	468b      	mov	fp, r1
 8005d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d0c:	f7fa fc18 	bl	8000540 <__aeabi_dmul>
 8005d10:	2d1f      	cmp	r5, #31
 8005d12:	4606      	mov	r6, r0
 8005d14:	460f      	mov	r7, r1
 8005d16:	dc0c      	bgt.n	8005d32 <__ieee754_rem_pio2+0x1a2>
 8005d18:	4b6a      	ldr	r3, [pc, #424]	@ (8005ec4 <__ieee754_rem_pio2+0x334>)
 8005d1a:	1e6a      	subs	r2, r5, #1
 8005d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d20:	4543      	cmp	r3, r8
 8005d22:	d006      	beq.n	8005d32 <__ieee754_rem_pio2+0x1a2>
 8005d24:	4632      	mov	r2, r6
 8005d26:	463b      	mov	r3, r7
 8005d28:	4650      	mov	r0, sl
 8005d2a:	4659      	mov	r1, fp
 8005d2c:	f7fa fa50 	bl	80001d0 <__aeabi_dsub>
 8005d30:	e00e      	b.n	8005d50 <__ieee754_rem_pio2+0x1c0>
 8005d32:	463b      	mov	r3, r7
 8005d34:	4632      	mov	r2, r6
 8005d36:	4650      	mov	r0, sl
 8005d38:	4659      	mov	r1, fp
 8005d3a:	f7fa fa49 	bl	80001d0 <__aeabi_dsub>
 8005d3e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005d42:	9305      	str	r3, [sp, #20]
 8005d44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005d48:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005d4c:	2b10      	cmp	r3, #16
 8005d4e:	dc02      	bgt.n	8005d56 <__ieee754_rem_pio2+0x1c6>
 8005d50:	e9c4 0100 	strd	r0, r1, [r4]
 8005d54:	e039      	b.n	8005dca <__ieee754_rem_pio2+0x23a>
 8005d56:	a34c      	add	r3, pc, #304	@ (adr r3, 8005e88 <__ieee754_rem_pio2+0x2f8>)
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d60:	f7fa fbee 	bl	8000540 <__aeabi_dmul>
 8005d64:	4606      	mov	r6, r0
 8005d66:	460f      	mov	r7, r1
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4650      	mov	r0, sl
 8005d6e:	4659      	mov	r1, fp
 8005d70:	f7fa fa2e 	bl	80001d0 <__aeabi_dsub>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4680      	mov	r8, r0
 8005d7a:	4689      	mov	r9, r1
 8005d7c:	4650      	mov	r0, sl
 8005d7e:	4659      	mov	r1, fp
 8005d80:	f7fa fa26 	bl	80001d0 <__aeabi_dsub>
 8005d84:	4632      	mov	r2, r6
 8005d86:	463b      	mov	r3, r7
 8005d88:	f7fa fa22 	bl	80001d0 <__aeabi_dsub>
 8005d8c:	a340      	add	r3, pc, #256	@ (adr r3, 8005e90 <__ieee754_rem_pio2+0x300>)
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	4606      	mov	r6, r0
 8005d94:	460f      	mov	r7, r1
 8005d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d9a:	f7fa fbd1 	bl	8000540 <__aeabi_dmul>
 8005d9e:	4632      	mov	r2, r6
 8005da0:	463b      	mov	r3, r7
 8005da2:	f7fa fa15 	bl	80001d0 <__aeabi_dsub>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4606      	mov	r6, r0
 8005dac:	460f      	mov	r7, r1
 8005dae:	4640      	mov	r0, r8
 8005db0:	4649      	mov	r1, r9
 8005db2:	f7fa fa0d 	bl	80001d0 <__aeabi_dsub>
 8005db6:	9a05      	ldr	r2, [sp, #20]
 8005db8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b31      	cmp	r3, #49	@ 0x31
 8005dc0:	dc20      	bgt.n	8005e04 <__ieee754_rem_pio2+0x274>
 8005dc2:	e9c4 0100 	strd	r0, r1, [r4]
 8005dc6:	46c2      	mov	sl, r8
 8005dc8:	46cb      	mov	fp, r9
 8005dca:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005dce:	4650      	mov	r0, sl
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	4659      	mov	r1, fp
 8005dd6:	f7fa f9fb 	bl	80001d0 <__aeabi_dsub>
 8005dda:	463b      	mov	r3, r7
 8005ddc:	4632      	mov	r2, r6
 8005dde:	f7fa f9f7 	bl	80001d0 <__aeabi_dsub>
 8005de2:	9b04      	ldr	r3, [sp, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005dea:	f6bf af0e 	bge.w	8005c0a <__ieee754_rem_pio2+0x7a>
 8005dee:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005df2:	6063      	str	r3, [r4, #4]
 8005df4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005df8:	f8c4 8000 	str.w	r8, [r4]
 8005dfc:	60a0      	str	r0, [r4, #8]
 8005dfe:	60e3      	str	r3, [r4, #12]
 8005e00:	426d      	negs	r5, r5
 8005e02:	e702      	b.n	8005c0a <__ieee754_rem_pio2+0x7a>
 8005e04:	a326      	add	r3, pc, #152	@ (adr r3, 8005ea0 <__ieee754_rem_pio2+0x310>)
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e0e:	f7fa fb97 	bl	8000540 <__aeabi_dmul>
 8005e12:	4606      	mov	r6, r0
 8005e14:	460f      	mov	r7, r1
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4640      	mov	r0, r8
 8005e1c:	4649      	mov	r1, r9
 8005e1e:	f7fa f9d7 	bl	80001d0 <__aeabi_dsub>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4682      	mov	sl, r0
 8005e28:	468b      	mov	fp, r1
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	4649      	mov	r1, r9
 8005e2e:	f7fa f9cf 	bl	80001d0 <__aeabi_dsub>
 8005e32:	4632      	mov	r2, r6
 8005e34:	463b      	mov	r3, r7
 8005e36:	f7fa f9cb 	bl	80001d0 <__aeabi_dsub>
 8005e3a:	a31b      	add	r3, pc, #108	@ (adr r3, 8005ea8 <__ieee754_rem_pio2+0x318>)
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	4606      	mov	r6, r0
 8005e42:	460f      	mov	r7, r1
 8005e44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e48:	f7fa fb7a 	bl	8000540 <__aeabi_dmul>
 8005e4c:	4632      	mov	r2, r6
 8005e4e:	463b      	mov	r3, r7
 8005e50:	f7fa f9be 	bl	80001d0 <__aeabi_dsub>
 8005e54:	4606      	mov	r6, r0
 8005e56:	460f      	mov	r7, r1
 8005e58:	e764      	b.n	8005d24 <__ieee754_rem_pio2+0x194>
 8005e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec8 <__ieee754_rem_pio2+0x338>)
 8005e5c:	4598      	cmp	r8, r3
 8005e5e:	d935      	bls.n	8005ecc <__ieee754_rem_pio2+0x33c>
 8005e60:	4632      	mov	r2, r6
 8005e62:	463b      	mov	r3, r7
 8005e64:	4630      	mov	r0, r6
 8005e66:	4639      	mov	r1, r7
 8005e68:	f7fa f9b2 	bl	80001d0 <__aeabi_dsub>
 8005e6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e70:	e9c4 0100 	strd	r0, r1, [r4]
 8005e74:	e69e      	b.n	8005bb4 <__ieee754_rem_pio2+0x24>
 8005e76:	bf00      	nop
 8005e78:	54400000 	.word	0x54400000
 8005e7c:	3ff921fb 	.word	0x3ff921fb
 8005e80:	1a626331 	.word	0x1a626331
 8005e84:	3dd0b461 	.word	0x3dd0b461
 8005e88:	1a600000 	.word	0x1a600000
 8005e8c:	3dd0b461 	.word	0x3dd0b461
 8005e90:	2e037073 	.word	0x2e037073
 8005e94:	3ba3198a 	.word	0x3ba3198a
 8005e98:	6dc9c883 	.word	0x6dc9c883
 8005e9c:	3fe45f30 	.word	0x3fe45f30
 8005ea0:	2e000000 	.word	0x2e000000
 8005ea4:	3ba3198a 	.word	0x3ba3198a
 8005ea8:	252049c1 	.word	0x252049c1
 8005eac:	397b839a 	.word	0x397b839a
 8005eb0:	3fe921fb 	.word	0x3fe921fb
 8005eb4:	4002d97b 	.word	0x4002d97b
 8005eb8:	3ff921fb 	.word	0x3ff921fb
 8005ebc:	413921fb 	.word	0x413921fb
 8005ec0:	3fe00000 	.word	0x3fe00000
 8005ec4:	0800689c 	.word	0x0800689c
 8005ec8:	7fefffff 	.word	0x7fefffff
 8005ecc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005ed0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8005ed4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005ed8:	4630      	mov	r0, r6
 8005eda:	460f      	mov	r7, r1
 8005edc:	f7fa fdca 	bl	8000a74 <__aeabi_d2iz>
 8005ee0:	f7fa fac4 	bl	800046c <__aeabi_i2d>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4630      	mov	r0, r6
 8005eea:	4639      	mov	r1, r7
 8005eec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005ef0:	f7fa f96e 	bl	80001d0 <__aeabi_dsub>
 8005ef4:	4b22      	ldr	r3, [pc, #136]	@ (8005f80 <__ieee754_rem_pio2+0x3f0>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f7fa fb22 	bl	8000540 <__aeabi_dmul>
 8005efc:	460f      	mov	r7, r1
 8005efe:	4606      	mov	r6, r0
 8005f00:	f7fa fdb8 	bl	8000a74 <__aeabi_d2iz>
 8005f04:	f7fa fab2 	bl	800046c <__aeabi_i2d>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	4639      	mov	r1, r7
 8005f10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f14:	f7fa f95c 	bl	80001d0 <__aeabi_dsub>
 8005f18:	4b19      	ldr	r3, [pc, #100]	@ (8005f80 <__ieee754_rem_pio2+0x3f0>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f7fa fb10 	bl	8000540 <__aeabi_dmul>
 8005f20:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005f24:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005f28:	f04f 0803 	mov.w	r8, #3
 8005f2c:	2600      	movs	r6, #0
 8005f2e:	2700      	movs	r7, #0
 8005f30:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005f34:	4632      	mov	r2, r6
 8005f36:	463b      	mov	r3, r7
 8005f38:	46c2      	mov	sl, r8
 8005f3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f3e:	f7fa fd67 	bl	8000a10 <__aeabi_dcmpeq>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d1f4      	bne.n	8005f30 <__ieee754_rem_pio2+0x3a0>
 8005f46:	4b0f      	ldr	r3, [pc, #60]	@ (8005f84 <__ieee754_rem_pio2+0x3f4>)
 8005f48:	9301      	str	r3, [sp, #4]
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	462a      	mov	r2, r5
 8005f50:	4653      	mov	r3, sl
 8005f52:	4621      	mov	r1, r4
 8005f54:	a806      	add	r0, sp, #24
 8005f56:	f000 f81f 	bl	8005f98 <__kernel_rem_pio2>
 8005f5a:	9b04      	ldr	r3, [sp, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	4605      	mov	r5, r0
 8005f60:	f6bf ae53 	bge.w	8005c0a <__ieee754_rem_pio2+0x7a>
 8005f64:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005f68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005f6c:	e9c4 2300 	strd	r2, r3, [r4]
 8005f70:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005f74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005f78:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005f7c:	e740      	b.n	8005e00 <__ieee754_rem_pio2+0x270>
 8005f7e:	bf00      	nop
 8005f80:	41700000 	.word	0x41700000
 8005f84:	0800691c 	.word	0x0800691c

08005f88 <fabs>:
 8005f88:	ec51 0b10 	vmov	r0, r1, d0
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005f92:	ec43 2b10 	vmov	d0, r2, r3
 8005f96:	4770      	bx	lr

08005f98 <__kernel_rem_pio2>:
 8005f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9c:	ed2d 8b02 	vpush	{d8}
 8005fa0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8005fa4:	f112 0f14 	cmn.w	r2, #20
 8005fa8:	9306      	str	r3, [sp, #24]
 8005faa:	9104      	str	r1, [sp, #16]
 8005fac:	4bbe      	ldr	r3, [pc, #760]	@ (80062a8 <__kernel_rem_pio2+0x310>)
 8005fae:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005fb0:	9008      	str	r0, [sp, #32]
 8005fb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	9b06      	ldr	r3, [sp, #24]
 8005fba:	f103 33ff 	add.w	r3, r3, #4294967295
 8005fbe:	bfa8      	it	ge
 8005fc0:	1ed4      	subge	r4, r2, #3
 8005fc2:	9305      	str	r3, [sp, #20]
 8005fc4:	bfb2      	itee	lt
 8005fc6:	2400      	movlt	r4, #0
 8005fc8:	2318      	movge	r3, #24
 8005fca:	fb94 f4f3 	sdivge	r4, r4, r3
 8005fce:	f06f 0317 	mvn.w	r3, #23
 8005fd2:	fb04 3303 	mla	r3, r4, r3, r3
 8005fd6:	eb03 0b02 	add.w	fp, r3, r2
 8005fda:	9b00      	ldr	r3, [sp, #0]
 8005fdc:	9a05      	ldr	r2, [sp, #20]
 8005fde:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006298 <__kernel_rem_pio2+0x300>
 8005fe2:	eb03 0802 	add.w	r8, r3, r2
 8005fe6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005fe8:	1aa7      	subs	r7, r4, r2
 8005fea:	ae20      	add	r6, sp, #128	@ 0x80
 8005fec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005ff0:	2500      	movs	r5, #0
 8005ff2:	4545      	cmp	r5, r8
 8005ff4:	dd13      	ble.n	800601e <__kernel_rem_pio2+0x86>
 8005ff6:	9b06      	ldr	r3, [sp, #24]
 8005ff8:	aa20      	add	r2, sp, #128	@ 0x80
 8005ffa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005ffe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8006002:	f04f 0800 	mov.w	r8, #0
 8006006:	9b00      	ldr	r3, [sp, #0]
 8006008:	4598      	cmp	r8, r3
 800600a:	dc31      	bgt.n	8006070 <__kernel_rem_pio2+0xd8>
 800600c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006298 <__kernel_rem_pio2+0x300>
 8006010:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006014:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006018:	462f      	mov	r7, r5
 800601a:	2600      	movs	r6, #0
 800601c:	e01b      	b.n	8006056 <__kernel_rem_pio2+0xbe>
 800601e:	42ef      	cmn	r7, r5
 8006020:	d407      	bmi.n	8006032 <__kernel_rem_pio2+0x9a>
 8006022:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006026:	f7fa fa21 	bl	800046c <__aeabi_i2d>
 800602a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800602e:	3501      	adds	r5, #1
 8006030:	e7df      	b.n	8005ff2 <__kernel_rem_pio2+0x5a>
 8006032:	ec51 0b18 	vmov	r0, r1, d8
 8006036:	e7f8      	b.n	800602a <__kernel_rem_pio2+0x92>
 8006038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800603c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006040:	f7fa fa7e 	bl	8000540 <__aeabi_dmul>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800604c:	f7fa f8c2 	bl	80001d4 <__adddf3>
 8006050:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006054:	3601      	adds	r6, #1
 8006056:	9b05      	ldr	r3, [sp, #20]
 8006058:	429e      	cmp	r6, r3
 800605a:	f1a7 0708 	sub.w	r7, r7, #8
 800605e:	ddeb      	ble.n	8006038 <__kernel_rem_pio2+0xa0>
 8006060:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006064:	f108 0801 	add.w	r8, r8, #1
 8006068:	ecaa 7b02 	vstmia	sl!, {d7}
 800606c:	3508      	adds	r5, #8
 800606e:	e7ca      	b.n	8006006 <__kernel_rem_pio2+0x6e>
 8006070:	9b00      	ldr	r3, [sp, #0]
 8006072:	f8dd 8000 	ldr.w	r8, [sp]
 8006076:	aa0c      	add	r2, sp, #48	@ 0x30
 8006078:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800607c:	930a      	str	r3, [sp, #40]	@ 0x28
 800607e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006080:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006084:	9309      	str	r3, [sp, #36]	@ 0x24
 8006086:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800608a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800608c:	ab98      	add	r3, sp, #608	@ 0x260
 800608e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006092:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8006096:	ed8d 7b02 	vstr	d7, [sp, #8]
 800609a:	ac0c      	add	r4, sp, #48	@ 0x30
 800609c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800609e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80060a2:	46a1      	mov	r9, r4
 80060a4:	46c2      	mov	sl, r8
 80060a6:	f1ba 0f00 	cmp.w	sl, #0
 80060aa:	f1a5 0508 	sub.w	r5, r5, #8
 80060ae:	dc77      	bgt.n	80061a0 <__kernel_rem_pio2+0x208>
 80060b0:	4658      	mov	r0, fp
 80060b2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80060b6:	f000 fac7 	bl	8006648 <scalbn>
 80060ba:	ec57 6b10 	vmov	r6, r7, d0
 80060be:	2200      	movs	r2, #0
 80060c0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80060c4:	4630      	mov	r0, r6
 80060c6:	4639      	mov	r1, r7
 80060c8:	f7fa fa3a 	bl	8000540 <__aeabi_dmul>
 80060cc:	ec41 0b10 	vmov	d0, r0, r1
 80060d0:	f000 fb3a 	bl	8006748 <floor>
 80060d4:	4b75      	ldr	r3, [pc, #468]	@ (80062ac <__kernel_rem_pio2+0x314>)
 80060d6:	ec51 0b10 	vmov	r0, r1, d0
 80060da:	2200      	movs	r2, #0
 80060dc:	f7fa fa30 	bl	8000540 <__aeabi_dmul>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4630      	mov	r0, r6
 80060e6:	4639      	mov	r1, r7
 80060e8:	f7fa f872 	bl	80001d0 <__aeabi_dsub>
 80060ec:	460f      	mov	r7, r1
 80060ee:	4606      	mov	r6, r0
 80060f0:	f7fa fcc0 	bl	8000a74 <__aeabi_d2iz>
 80060f4:	9002      	str	r0, [sp, #8]
 80060f6:	f7fa f9b9 	bl	800046c <__aeabi_i2d>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	4630      	mov	r0, r6
 8006100:	4639      	mov	r1, r7
 8006102:	f7fa f865 	bl	80001d0 <__aeabi_dsub>
 8006106:	f1bb 0f00 	cmp.w	fp, #0
 800610a:	4606      	mov	r6, r0
 800610c:	460f      	mov	r7, r1
 800610e:	dd6c      	ble.n	80061ea <__kernel_rem_pio2+0x252>
 8006110:	f108 31ff 	add.w	r1, r8, #4294967295
 8006114:	ab0c      	add	r3, sp, #48	@ 0x30
 8006116:	9d02      	ldr	r5, [sp, #8]
 8006118:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800611c:	f1cb 0018 	rsb	r0, fp, #24
 8006120:	fa43 f200 	asr.w	r2, r3, r0
 8006124:	4415      	add	r5, r2
 8006126:	4082      	lsls	r2, r0
 8006128:	1a9b      	subs	r3, r3, r2
 800612a:	aa0c      	add	r2, sp, #48	@ 0x30
 800612c:	9502      	str	r5, [sp, #8]
 800612e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006132:	f1cb 0217 	rsb	r2, fp, #23
 8006136:	fa43 f902 	asr.w	r9, r3, r2
 800613a:	f1b9 0f00 	cmp.w	r9, #0
 800613e:	dd64      	ble.n	800620a <__kernel_rem_pio2+0x272>
 8006140:	9b02      	ldr	r3, [sp, #8]
 8006142:	2200      	movs	r2, #0
 8006144:	3301      	adds	r3, #1
 8006146:	9302      	str	r3, [sp, #8]
 8006148:	4615      	mov	r5, r2
 800614a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800614e:	4590      	cmp	r8, r2
 8006150:	f300 80b8 	bgt.w	80062c4 <__kernel_rem_pio2+0x32c>
 8006154:	f1bb 0f00 	cmp.w	fp, #0
 8006158:	dd07      	ble.n	800616a <__kernel_rem_pio2+0x1d2>
 800615a:	f1bb 0f01 	cmp.w	fp, #1
 800615e:	f000 80bf 	beq.w	80062e0 <__kernel_rem_pio2+0x348>
 8006162:	f1bb 0f02 	cmp.w	fp, #2
 8006166:	f000 80c6 	beq.w	80062f6 <__kernel_rem_pio2+0x35e>
 800616a:	f1b9 0f02 	cmp.w	r9, #2
 800616e:	d14c      	bne.n	800620a <__kernel_rem_pio2+0x272>
 8006170:	4632      	mov	r2, r6
 8006172:	463b      	mov	r3, r7
 8006174:	494e      	ldr	r1, [pc, #312]	@ (80062b0 <__kernel_rem_pio2+0x318>)
 8006176:	2000      	movs	r0, #0
 8006178:	f7fa f82a 	bl	80001d0 <__aeabi_dsub>
 800617c:	4606      	mov	r6, r0
 800617e:	460f      	mov	r7, r1
 8006180:	2d00      	cmp	r5, #0
 8006182:	d042      	beq.n	800620a <__kernel_rem_pio2+0x272>
 8006184:	4658      	mov	r0, fp
 8006186:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80062a0 <__kernel_rem_pio2+0x308>
 800618a:	f000 fa5d 	bl	8006648 <scalbn>
 800618e:	4630      	mov	r0, r6
 8006190:	4639      	mov	r1, r7
 8006192:	ec53 2b10 	vmov	r2, r3, d0
 8006196:	f7fa f81b 	bl	80001d0 <__aeabi_dsub>
 800619a:	4606      	mov	r6, r0
 800619c:	460f      	mov	r7, r1
 800619e:	e034      	b.n	800620a <__kernel_rem_pio2+0x272>
 80061a0:	4b44      	ldr	r3, [pc, #272]	@ (80062b4 <__kernel_rem_pio2+0x31c>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061a8:	f7fa f9ca 	bl	8000540 <__aeabi_dmul>
 80061ac:	f7fa fc62 	bl	8000a74 <__aeabi_d2iz>
 80061b0:	f7fa f95c 	bl	800046c <__aeabi_i2d>
 80061b4:	4b40      	ldr	r3, [pc, #256]	@ (80062b8 <__kernel_rem_pio2+0x320>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	4606      	mov	r6, r0
 80061ba:	460f      	mov	r7, r1
 80061bc:	f7fa f9c0 	bl	8000540 <__aeabi_dmul>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061c8:	f7fa f802 	bl	80001d0 <__aeabi_dsub>
 80061cc:	f7fa fc52 	bl	8000a74 <__aeabi_d2iz>
 80061d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061d4:	f849 0b04 	str.w	r0, [r9], #4
 80061d8:	4639      	mov	r1, r7
 80061da:	4630      	mov	r0, r6
 80061dc:	f7f9 fffa 	bl	80001d4 <__adddf3>
 80061e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061e8:	e75d      	b.n	80060a6 <__kernel_rem_pio2+0x10e>
 80061ea:	d107      	bne.n	80061fc <__kernel_rem_pio2+0x264>
 80061ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80061f0:	aa0c      	add	r2, sp, #48	@ 0x30
 80061f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80061fa:	e79e      	b.n	800613a <__kernel_rem_pio2+0x1a2>
 80061fc:	4b2f      	ldr	r3, [pc, #188]	@ (80062bc <__kernel_rem_pio2+0x324>)
 80061fe:	2200      	movs	r2, #0
 8006200:	f7fa fc24 	bl	8000a4c <__aeabi_dcmpge>
 8006204:	2800      	cmp	r0, #0
 8006206:	d143      	bne.n	8006290 <__kernel_rem_pio2+0x2f8>
 8006208:	4681      	mov	r9, r0
 800620a:	2200      	movs	r2, #0
 800620c:	2300      	movs	r3, #0
 800620e:	4630      	mov	r0, r6
 8006210:	4639      	mov	r1, r7
 8006212:	f7fa fbfd 	bl	8000a10 <__aeabi_dcmpeq>
 8006216:	2800      	cmp	r0, #0
 8006218:	f000 80bf 	beq.w	800639a <__kernel_rem_pio2+0x402>
 800621c:	f108 33ff 	add.w	r3, r8, #4294967295
 8006220:	2200      	movs	r2, #0
 8006222:	9900      	ldr	r1, [sp, #0]
 8006224:	428b      	cmp	r3, r1
 8006226:	da6e      	bge.n	8006306 <__kernel_rem_pio2+0x36e>
 8006228:	2a00      	cmp	r2, #0
 800622a:	f000 8089 	beq.w	8006340 <__kernel_rem_pio2+0x3a8>
 800622e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006232:	ab0c      	add	r3, sp, #48	@ 0x30
 8006234:	f1ab 0b18 	sub.w	fp, fp, #24
 8006238:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0f6      	beq.n	800622e <__kernel_rem_pio2+0x296>
 8006240:	4658      	mov	r0, fp
 8006242:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80062a0 <__kernel_rem_pio2+0x308>
 8006246:	f000 f9ff 	bl	8006648 <scalbn>
 800624a:	f108 0301 	add.w	r3, r8, #1
 800624e:	00da      	lsls	r2, r3, #3
 8006250:	9205      	str	r2, [sp, #20]
 8006252:	ec55 4b10 	vmov	r4, r5, d0
 8006256:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006258:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80062b4 <__kernel_rem_pio2+0x31c>
 800625c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006260:	4646      	mov	r6, r8
 8006262:	f04f 0a00 	mov.w	sl, #0
 8006266:	2e00      	cmp	r6, #0
 8006268:	f280 80cf 	bge.w	800640a <__kernel_rem_pio2+0x472>
 800626c:	4644      	mov	r4, r8
 800626e:	2c00      	cmp	r4, #0
 8006270:	f2c0 80fd 	blt.w	800646e <__kernel_rem_pio2+0x4d6>
 8006274:	4b12      	ldr	r3, [pc, #72]	@ (80062c0 <__kernel_rem_pio2+0x328>)
 8006276:	461f      	mov	r7, r3
 8006278:	ab70      	add	r3, sp, #448	@ 0x1c0
 800627a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800627e:	9306      	str	r3, [sp, #24]
 8006280:	f04f 0a00 	mov.w	sl, #0
 8006284:	f04f 0b00 	mov.w	fp, #0
 8006288:	2600      	movs	r6, #0
 800628a:	eba8 0504 	sub.w	r5, r8, r4
 800628e:	e0e2      	b.n	8006456 <__kernel_rem_pio2+0x4be>
 8006290:	f04f 0902 	mov.w	r9, #2
 8006294:	e754      	b.n	8006140 <__kernel_rem_pio2+0x1a8>
 8006296:	bf00      	nop
	...
 80062a4:	3ff00000 	.word	0x3ff00000
 80062a8:	08006a68 	.word	0x08006a68
 80062ac:	40200000 	.word	0x40200000
 80062b0:	3ff00000 	.word	0x3ff00000
 80062b4:	3e700000 	.word	0x3e700000
 80062b8:	41700000 	.word	0x41700000
 80062bc:	3fe00000 	.word	0x3fe00000
 80062c0:	08006a28 	.word	0x08006a28
 80062c4:	f854 3b04 	ldr.w	r3, [r4], #4
 80062c8:	b945      	cbnz	r5, 80062dc <__kernel_rem_pio2+0x344>
 80062ca:	b123      	cbz	r3, 80062d6 <__kernel_rem_pio2+0x33e>
 80062cc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80062d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80062d4:	2301      	movs	r3, #1
 80062d6:	3201      	adds	r2, #1
 80062d8:	461d      	mov	r5, r3
 80062da:	e738      	b.n	800614e <__kernel_rem_pio2+0x1b6>
 80062dc:	1acb      	subs	r3, r1, r3
 80062de:	e7f7      	b.n	80062d0 <__kernel_rem_pio2+0x338>
 80062e0:	f108 32ff 	add.w	r2, r8, #4294967295
 80062e4:	ab0c      	add	r3, sp, #48	@ 0x30
 80062e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80062ee:	a90c      	add	r1, sp, #48	@ 0x30
 80062f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80062f4:	e739      	b.n	800616a <__kernel_rem_pio2+0x1d2>
 80062f6:	f108 32ff 	add.w	r2, r8, #4294967295
 80062fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80062fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006300:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006304:	e7f3      	b.n	80062ee <__kernel_rem_pio2+0x356>
 8006306:	a90c      	add	r1, sp, #48	@ 0x30
 8006308:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800630c:	3b01      	subs	r3, #1
 800630e:	430a      	orrs	r2, r1
 8006310:	e787      	b.n	8006222 <__kernel_rem_pio2+0x28a>
 8006312:	3401      	adds	r4, #1
 8006314:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006318:	2a00      	cmp	r2, #0
 800631a:	d0fa      	beq.n	8006312 <__kernel_rem_pio2+0x37a>
 800631c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800631e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006322:	eb0d 0503 	add.w	r5, sp, r3
 8006326:	9b06      	ldr	r3, [sp, #24]
 8006328:	aa20      	add	r2, sp, #128	@ 0x80
 800632a:	4443      	add	r3, r8
 800632c:	f108 0701 	add.w	r7, r8, #1
 8006330:	3d98      	subs	r5, #152	@ 0x98
 8006332:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006336:	4444      	add	r4, r8
 8006338:	42bc      	cmp	r4, r7
 800633a:	da04      	bge.n	8006346 <__kernel_rem_pio2+0x3ae>
 800633c:	46a0      	mov	r8, r4
 800633e:	e6a2      	b.n	8006086 <__kernel_rem_pio2+0xee>
 8006340:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006342:	2401      	movs	r4, #1
 8006344:	e7e6      	b.n	8006314 <__kernel_rem_pio2+0x37c>
 8006346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006348:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800634c:	f7fa f88e 	bl	800046c <__aeabi_i2d>
 8006350:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006618 <__kernel_rem_pio2+0x680>
 8006354:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006358:	ed8d 7b02 	vstr	d7, [sp, #8]
 800635c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006360:	46b2      	mov	sl, r6
 8006362:	f04f 0800 	mov.w	r8, #0
 8006366:	9b05      	ldr	r3, [sp, #20]
 8006368:	4598      	cmp	r8, r3
 800636a:	dd05      	ble.n	8006378 <__kernel_rem_pio2+0x3e0>
 800636c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006370:	3701      	adds	r7, #1
 8006372:	eca5 7b02 	vstmia	r5!, {d7}
 8006376:	e7df      	b.n	8006338 <__kernel_rem_pio2+0x3a0>
 8006378:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800637c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006380:	f7fa f8de 	bl	8000540 <__aeabi_dmul>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800638c:	f7f9 ff22 	bl	80001d4 <__adddf3>
 8006390:	f108 0801 	add.w	r8, r8, #1
 8006394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006398:	e7e5      	b.n	8006366 <__kernel_rem_pio2+0x3ce>
 800639a:	f1cb 0000 	rsb	r0, fp, #0
 800639e:	ec47 6b10 	vmov	d0, r6, r7
 80063a2:	f000 f951 	bl	8006648 <scalbn>
 80063a6:	ec55 4b10 	vmov	r4, r5, d0
 80063aa:	4b9d      	ldr	r3, [pc, #628]	@ (8006620 <__kernel_rem_pio2+0x688>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	4620      	mov	r0, r4
 80063b0:	4629      	mov	r1, r5
 80063b2:	f7fa fb4b 	bl	8000a4c <__aeabi_dcmpge>
 80063b6:	b300      	cbz	r0, 80063fa <__kernel_rem_pio2+0x462>
 80063b8:	4b9a      	ldr	r3, [pc, #616]	@ (8006624 <__kernel_rem_pio2+0x68c>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	4620      	mov	r0, r4
 80063be:	4629      	mov	r1, r5
 80063c0:	f7fa f8be 	bl	8000540 <__aeabi_dmul>
 80063c4:	f7fa fb56 	bl	8000a74 <__aeabi_d2iz>
 80063c8:	4606      	mov	r6, r0
 80063ca:	f7fa f84f 	bl	800046c <__aeabi_i2d>
 80063ce:	4b94      	ldr	r3, [pc, #592]	@ (8006620 <__kernel_rem_pio2+0x688>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	f7fa f8b5 	bl	8000540 <__aeabi_dmul>
 80063d6:	460b      	mov	r3, r1
 80063d8:	4602      	mov	r2, r0
 80063da:	4629      	mov	r1, r5
 80063dc:	4620      	mov	r0, r4
 80063de:	f7f9 fef7 	bl	80001d0 <__aeabi_dsub>
 80063e2:	f7fa fb47 	bl	8000a74 <__aeabi_d2iz>
 80063e6:	ab0c      	add	r3, sp, #48	@ 0x30
 80063e8:	f10b 0b18 	add.w	fp, fp, #24
 80063ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80063f0:	f108 0801 	add.w	r8, r8, #1
 80063f4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80063f8:	e722      	b.n	8006240 <__kernel_rem_pio2+0x2a8>
 80063fa:	4620      	mov	r0, r4
 80063fc:	4629      	mov	r1, r5
 80063fe:	f7fa fb39 	bl	8000a74 <__aeabi_d2iz>
 8006402:	ab0c      	add	r3, sp, #48	@ 0x30
 8006404:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006408:	e71a      	b.n	8006240 <__kernel_rem_pio2+0x2a8>
 800640a:	ab0c      	add	r3, sp, #48	@ 0x30
 800640c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006410:	f7fa f82c 	bl	800046c <__aeabi_i2d>
 8006414:	4622      	mov	r2, r4
 8006416:	462b      	mov	r3, r5
 8006418:	f7fa f892 	bl	8000540 <__aeabi_dmul>
 800641c:	4652      	mov	r2, sl
 800641e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006422:	465b      	mov	r3, fp
 8006424:	4620      	mov	r0, r4
 8006426:	4629      	mov	r1, r5
 8006428:	f7fa f88a 	bl	8000540 <__aeabi_dmul>
 800642c:	3e01      	subs	r6, #1
 800642e:	4604      	mov	r4, r0
 8006430:	460d      	mov	r5, r1
 8006432:	e718      	b.n	8006266 <__kernel_rem_pio2+0x2ce>
 8006434:	9906      	ldr	r1, [sp, #24]
 8006436:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800643a:	9106      	str	r1, [sp, #24]
 800643c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006440:	f7fa f87e 	bl	8000540 <__aeabi_dmul>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4650      	mov	r0, sl
 800644a:	4659      	mov	r1, fp
 800644c:	f7f9 fec2 	bl	80001d4 <__adddf3>
 8006450:	3601      	adds	r6, #1
 8006452:	4682      	mov	sl, r0
 8006454:	468b      	mov	fp, r1
 8006456:	9b00      	ldr	r3, [sp, #0]
 8006458:	429e      	cmp	r6, r3
 800645a:	dc01      	bgt.n	8006460 <__kernel_rem_pio2+0x4c8>
 800645c:	42b5      	cmp	r5, r6
 800645e:	dae9      	bge.n	8006434 <__kernel_rem_pio2+0x49c>
 8006460:	ab48      	add	r3, sp, #288	@ 0x120
 8006462:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006466:	e9c5 ab00 	strd	sl, fp, [r5]
 800646a:	3c01      	subs	r4, #1
 800646c:	e6ff      	b.n	800626e <__kernel_rem_pio2+0x2d6>
 800646e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006470:	2b02      	cmp	r3, #2
 8006472:	dc0b      	bgt.n	800648c <__kernel_rem_pio2+0x4f4>
 8006474:	2b00      	cmp	r3, #0
 8006476:	dc39      	bgt.n	80064ec <__kernel_rem_pio2+0x554>
 8006478:	d05d      	beq.n	8006536 <__kernel_rem_pio2+0x59e>
 800647a:	9b02      	ldr	r3, [sp, #8]
 800647c:	f003 0007 	and.w	r0, r3, #7
 8006480:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006484:	ecbd 8b02 	vpop	{d8}
 8006488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800648e:	2b03      	cmp	r3, #3
 8006490:	d1f3      	bne.n	800647a <__kernel_rem_pio2+0x4e2>
 8006492:	9b05      	ldr	r3, [sp, #20]
 8006494:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006498:	eb0d 0403 	add.w	r4, sp, r3
 800649c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80064a0:	4625      	mov	r5, r4
 80064a2:	46c2      	mov	sl, r8
 80064a4:	f1ba 0f00 	cmp.w	sl, #0
 80064a8:	f1a5 0508 	sub.w	r5, r5, #8
 80064ac:	dc6b      	bgt.n	8006586 <__kernel_rem_pio2+0x5ee>
 80064ae:	4645      	mov	r5, r8
 80064b0:	2d01      	cmp	r5, #1
 80064b2:	f1a4 0408 	sub.w	r4, r4, #8
 80064b6:	f300 8087 	bgt.w	80065c8 <__kernel_rem_pio2+0x630>
 80064ba:	9c05      	ldr	r4, [sp, #20]
 80064bc:	ab48      	add	r3, sp, #288	@ 0x120
 80064be:	441c      	add	r4, r3
 80064c0:	2000      	movs	r0, #0
 80064c2:	2100      	movs	r1, #0
 80064c4:	f1b8 0f01 	cmp.w	r8, #1
 80064c8:	f300 809c 	bgt.w	8006604 <__kernel_rem_pio2+0x66c>
 80064cc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80064d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80064d4:	f1b9 0f00 	cmp.w	r9, #0
 80064d8:	f040 80a6 	bne.w	8006628 <__kernel_rem_pio2+0x690>
 80064dc:	9b04      	ldr	r3, [sp, #16]
 80064de:	e9c3 7800 	strd	r7, r8, [r3]
 80064e2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80064e6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80064ea:	e7c6      	b.n	800647a <__kernel_rem_pio2+0x4e2>
 80064ec:	9d05      	ldr	r5, [sp, #20]
 80064ee:	ab48      	add	r3, sp, #288	@ 0x120
 80064f0:	441d      	add	r5, r3
 80064f2:	4644      	mov	r4, r8
 80064f4:	2000      	movs	r0, #0
 80064f6:	2100      	movs	r1, #0
 80064f8:	2c00      	cmp	r4, #0
 80064fa:	da35      	bge.n	8006568 <__kernel_rem_pio2+0x5d0>
 80064fc:	f1b9 0f00 	cmp.w	r9, #0
 8006500:	d038      	beq.n	8006574 <__kernel_rem_pio2+0x5dc>
 8006502:	4602      	mov	r2, r0
 8006504:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006508:	9c04      	ldr	r4, [sp, #16]
 800650a:	e9c4 2300 	strd	r2, r3, [r4]
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006516:	f7f9 fe5b 	bl	80001d0 <__aeabi_dsub>
 800651a:	ad4a      	add	r5, sp, #296	@ 0x128
 800651c:	2401      	movs	r4, #1
 800651e:	45a0      	cmp	r8, r4
 8006520:	da2b      	bge.n	800657a <__kernel_rem_pio2+0x5e2>
 8006522:	f1b9 0f00 	cmp.w	r9, #0
 8006526:	d002      	beq.n	800652e <__kernel_rem_pio2+0x596>
 8006528:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800652c:	4619      	mov	r1, r3
 800652e:	9b04      	ldr	r3, [sp, #16]
 8006530:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006534:	e7a1      	b.n	800647a <__kernel_rem_pio2+0x4e2>
 8006536:	9c05      	ldr	r4, [sp, #20]
 8006538:	ab48      	add	r3, sp, #288	@ 0x120
 800653a:	441c      	add	r4, r3
 800653c:	2000      	movs	r0, #0
 800653e:	2100      	movs	r1, #0
 8006540:	f1b8 0f00 	cmp.w	r8, #0
 8006544:	da09      	bge.n	800655a <__kernel_rem_pio2+0x5c2>
 8006546:	f1b9 0f00 	cmp.w	r9, #0
 800654a:	d002      	beq.n	8006552 <__kernel_rem_pio2+0x5ba>
 800654c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006550:	4619      	mov	r1, r3
 8006552:	9b04      	ldr	r3, [sp, #16]
 8006554:	e9c3 0100 	strd	r0, r1, [r3]
 8006558:	e78f      	b.n	800647a <__kernel_rem_pio2+0x4e2>
 800655a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800655e:	f7f9 fe39 	bl	80001d4 <__adddf3>
 8006562:	f108 38ff 	add.w	r8, r8, #4294967295
 8006566:	e7eb      	b.n	8006540 <__kernel_rem_pio2+0x5a8>
 8006568:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800656c:	f7f9 fe32 	bl	80001d4 <__adddf3>
 8006570:	3c01      	subs	r4, #1
 8006572:	e7c1      	b.n	80064f8 <__kernel_rem_pio2+0x560>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	e7c6      	b.n	8006508 <__kernel_rem_pio2+0x570>
 800657a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800657e:	f7f9 fe29 	bl	80001d4 <__adddf3>
 8006582:	3401      	adds	r4, #1
 8006584:	e7cb      	b.n	800651e <__kernel_rem_pio2+0x586>
 8006586:	ed95 7b00 	vldr	d7, [r5]
 800658a:	ed8d 7b00 	vstr	d7, [sp]
 800658e:	ed95 7b02 	vldr	d7, [r5, #8]
 8006592:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006596:	ec53 2b17 	vmov	r2, r3, d7
 800659a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800659e:	f7f9 fe19 	bl	80001d4 <__adddf3>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4606      	mov	r6, r0
 80065a8:	460f      	mov	r7, r1
 80065aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065ae:	f7f9 fe0f 	bl	80001d0 <__aeabi_dsub>
 80065b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065b6:	f7f9 fe0d 	bl	80001d4 <__adddf3>
 80065ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065be:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80065c2:	e9c5 6700 	strd	r6, r7, [r5]
 80065c6:	e76d      	b.n	80064a4 <__kernel_rem_pio2+0x50c>
 80065c8:	ed94 7b00 	vldr	d7, [r4]
 80065cc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80065d0:	ec51 0b17 	vmov	r0, r1, d7
 80065d4:	4652      	mov	r2, sl
 80065d6:	465b      	mov	r3, fp
 80065d8:	ed8d 7b00 	vstr	d7, [sp]
 80065dc:	f7f9 fdfa 	bl	80001d4 <__adddf3>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4606      	mov	r6, r0
 80065e6:	460f      	mov	r7, r1
 80065e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065ec:	f7f9 fdf0 	bl	80001d0 <__aeabi_dsub>
 80065f0:	4652      	mov	r2, sl
 80065f2:	465b      	mov	r3, fp
 80065f4:	f7f9 fdee 	bl	80001d4 <__adddf3>
 80065f8:	3d01      	subs	r5, #1
 80065fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80065fe:	e9c4 6700 	strd	r6, r7, [r4]
 8006602:	e755      	b.n	80064b0 <__kernel_rem_pio2+0x518>
 8006604:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006608:	f7f9 fde4 	bl	80001d4 <__adddf3>
 800660c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006610:	e758      	b.n	80064c4 <__kernel_rem_pio2+0x52c>
 8006612:	bf00      	nop
 8006614:	f3af 8000 	nop.w
	...
 8006620:	41700000 	.word	0x41700000
 8006624:	3e700000 	.word	0x3e700000
 8006628:	9b04      	ldr	r3, [sp, #16]
 800662a:	9a04      	ldr	r2, [sp, #16]
 800662c:	601f      	str	r7, [r3, #0]
 800662e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006632:	605c      	str	r4, [r3, #4]
 8006634:	609d      	str	r5, [r3, #8]
 8006636:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800663a:	60d3      	str	r3, [r2, #12]
 800663c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006640:	6110      	str	r0, [r2, #16]
 8006642:	6153      	str	r3, [r2, #20]
 8006644:	e719      	b.n	800647a <__kernel_rem_pio2+0x4e2>
 8006646:	bf00      	nop

08006648 <scalbn>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	ec55 4b10 	vmov	r4, r5, d0
 800664e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006652:	4606      	mov	r6, r0
 8006654:	462b      	mov	r3, r5
 8006656:	b991      	cbnz	r1, 800667e <scalbn+0x36>
 8006658:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800665c:	4323      	orrs	r3, r4
 800665e:	d03d      	beq.n	80066dc <scalbn+0x94>
 8006660:	4b35      	ldr	r3, [pc, #212]	@ (8006738 <scalbn+0xf0>)
 8006662:	4620      	mov	r0, r4
 8006664:	4629      	mov	r1, r5
 8006666:	2200      	movs	r2, #0
 8006668:	f7f9 ff6a 	bl	8000540 <__aeabi_dmul>
 800666c:	4b33      	ldr	r3, [pc, #204]	@ (800673c <scalbn+0xf4>)
 800666e:	429e      	cmp	r6, r3
 8006670:	4604      	mov	r4, r0
 8006672:	460d      	mov	r5, r1
 8006674:	da0f      	bge.n	8006696 <scalbn+0x4e>
 8006676:	a328      	add	r3, pc, #160	@ (adr r3, 8006718 <scalbn+0xd0>)
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	e01e      	b.n	80066bc <scalbn+0x74>
 800667e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006682:	4291      	cmp	r1, r2
 8006684:	d10b      	bne.n	800669e <scalbn+0x56>
 8006686:	4622      	mov	r2, r4
 8006688:	4620      	mov	r0, r4
 800668a:	4629      	mov	r1, r5
 800668c:	f7f9 fda2 	bl	80001d4 <__adddf3>
 8006690:	4604      	mov	r4, r0
 8006692:	460d      	mov	r5, r1
 8006694:	e022      	b.n	80066dc <scalbn+0x94>
 8006696:	460b      	mov	r3, r1
 8006698:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800669c:	3936      	subs	r1, #54	@ 0x36
 800669e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80066a2:	4296      	cmp	r6, r2
 80066a4:	dd0d      	ble.n	80066c2 <scalbn+0x7a>
 80066a6:	2d00      	cmp	r5, #0
 80066a8:	a11d      	add	r1, pc, #116	@ (adr r1, 8006720 <scalbn+0xd8>)
 80066aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066ae:	da02      	bge.n	80066b6 <scalbn+0x6e>
 80066b0:	a11d      	add	r1, pc, #116	@ (adr r1, 8006728 <scalbn+0xe0>)
 80066b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066b6:	a31a      	add	r3, pc, #104	@ (adr r3, 8006720 <scalbn+0xd8>)
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	f7f9 ff40 	bl	8000540 <__aeabi_dmul>
 80066c0:	e7e6      	b.n	8006690 <scalbn+0x48>
 80066c2:	1872      	adds	r2, r6, r1
 80066c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80066c8:	428a      	cmp	r2, r1
 80066ca:	dcec      	bgt.n	80066a6 <scalbn+0x5e>
 80066cc:	2a00      	cmp	r2, #0
 80066ce:	dd08      	ble.n	80066e2 <scalbn+0x9a>
 80066d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80066d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80066d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80066dc:	ec45 4b10 	vmov	d0, r4, r5
 80066e0:	bd70      	pop	{r4, r5, r6, pc}
 80066e2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80066e6:	da08      	bge.n	80066fa <scalbn+0xb2>
 80066e8:	2d00      	cmp	r5, #0
 80066ea:	a10b      	add	r1, pc, #44	@ (adr r1, 8006718 <scalbn+0xd0>)
 80066ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066f0:	dac1      	bge.n	8006676 <scalbn+0x2e>
 80066f2:	a10f      	add	r1, pc, #60	@ (adr r1, 8006730 <scalbn+0xe8>)
 80066f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066f8:	e7bd      	b.n	8006676 <scalbn+0x2e>
 80066fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80066fe:	3236      	adds	r2, #54	@ 0x36
 8006700:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006704:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006708:	4620      	mov	r0, r4
 800670a:	4b0d      	ldr	r3, [pc, #52]	@ (8006740 <scalbn+0xf8>)
 800670c:	4629      	mov	r1, r5
 800670e:	2200      	movs	r2, #0
 8006710:	e7d4      	b.n	80066bc <scalbn+0x74>
 8006712:	bf00      	nop
 8006714:	f3af 8000 	nop.w
 8006718:	c2f8f359 	.word	0xc2f8f359
 800671c:	01a56e1f 	.word	0x01a56e1f
 8006720:	8800759c 	.word	0x8800759c
 8006724:	7e37e43c 	.word	0x7e37e43c
 8006728:	8800759c 	.word	0x8800759c
 800672c:	fe37e43c 	.word	0xfe37e43c
 8006730:	c2f8f359 	.word	0xc2f8f359
 8006734:	81a56e1f 	.word	0x81a56e1f
 8006738:	43500000 	.word	0x43500000
 800673c:	ffff3cb0 	.word	0xffff3cb0
 8006740:	3c900000 	.word	0x3c900000
 8006744:	00000000 	.word	0x00000000

08006748 <floor>:
 8006748:	ec51 0b10 	vmov	r0, r1, d0
 800674c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006754:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006758:	2e13      	cmp	r6, #19
 800675a:	460c      	mov	r4, r1
 800675c:	4605      	mov	r5, r0
 800675e:	4680      	mov	r8, r0
 8006760:	dc34      	bgt.n	80067cc <floor+0x84>
 8006762:	2e00      	cmp	r6, #0
 8006764:	da17      	bge.n	8006796 <floor+0x4e>
 8006766:	a332      	add	r3, pc, #200	@ (adr r3, 8006830 <floor+0xe8>)
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f7f9 fd32 	bl	80001d4 <__adddf3>
 8006770:	2200      	movs	r2, #0
 8006772:	2300      	movs	r3, #0
 8006774:	f7fa f974 	bl	8000a60 <__aeabi_dcmpgt>
 8006778:	b150      	cbz	r0, 8006790 <floor+0x48>
 800677a:	2c00      	cmp	r4, #0
 800677c:	da55      	bge.n	800682a <floor+0xe2>
 800677e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006782:	432c      	orrs	r4, r5
 8006784:	2500      	movs	r5, #0
 8006786:	42ac      	cmp	r4, r5
 8006788:	4c2b      	ldr	r4, [pc, #172]	@ (8006838 <floor+0xf0>)
 800678a:	bf08      	it	eq
 800678c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006790:	4621      	mov	r1, r4
 8006792:	4628      	mov	r0, r5
 8006794:	e023      	b.n	80067de <floor+0x96>
 8006796:	4f29      	ldr	r7, [pc, #164]	@ (800683c <floor+0xf4>)
 8006798:	4137      	asrs	r7, r6
 800679a:	ea01 0307 	and.w	r3, r1, r7
 800679e:	4303      	orrs	r3, r0
 80067a0:	d01d      	beq.n	80067de <floor+0x96>
 80067a2:	a323      	add	r3, pc, #140	@ (adr r3, 8006830 <floor+0xe8>)
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f7f9 fd14 	bl	80001d4 <__adddf3>
 80067ac:	2200      	movs	r2, #0
 80067ae:	2300      	movs	r3, #0
 80067b0:	f7fa f956 	bl	8000a60 <__aeabi_dcmpgt>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d0eb      	beq.n	8006790 <floor+0x48>
 80067b8:	2c00      	cmp	r4, #0
 80067ba:	bfbe      	ittt	lt
 80067bc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80067c0:	4133      	asrlt	r3, r6
 80067c2:	18e4      	addlt	r4, r4, r3
 80067c4:	ea24 0407 	bic.w	r4, r4, r7
 80067c8:	2500      	movs	r5, #0
 80067ca:	e7e1      	b.n	8006790 <floor+0x48>
 80067cc:	2e33      	cmp	r6, #51	@ 0x33
 80067ce:	dd0a      	ble.n	80067e6 <floor+0x9e>
 80067d0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80067d4:	d103      	bne.n	80067de <floor+0x96>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	f7f9 fcfb 	bl	80001d4 <__adddf3>
 80067de:	ec41 0b10 	vmov	d0, r0, r1
 80067e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067e6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80067ea:	f04f 37ff 	mov.w	r7, #4294967295
 80067ee:	40df      	lsrs	r7, r3
 80067f0:	4207      	tst	r7, r0
 80067f2:	d0f4      	beq.n	80067de <floor+0x96>
 80067f4:	a30e      	add	r3, pc, #56	@ (adr r3, 8006830 <floor+0xe8>)
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	f7f9 fceb 	bl	80001d4 <__adddf3>
 80067fe:	2200      	movs	r2, #0
 8006800:	2300      	movs	r3, #0
 8006802:	f7fa f92d 	bl	8000a60 <__aeabi_dcmpgt>
 8006806:	2800      	cmp	r0, #0
 8006808:	d0c2      	beq.n	8006790 <floor+0x48>
 800680a:	2c00      	cmp	r4, #0
 800680c:	da0a      	bge.n	8006824 <floor+0xdc>
 800680e:	2e14      	cmp	r6, #20
 8006810:	d101      	bne.n	8006816 <floor+0xce>
 8006812:	3401      	adds	r4, #1
 8006814:	e006      	b.n	8006824 <floor+0xdc>
 8006816:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800681a:	2301      	movs	r3, #1
 800681c:	40b3      	lsls	r3, r6
 800681e:	441d      	add	r5, r3
 8006820:	4545      	cmp	r5, r8
 8006822:	d3f6      	bcc.n	8006812 <floor+0xca>
 8006824:	ea25 0507 	bic.w	r5, r5, r7
 8006828:	e7b2      	b.n	8006790 <floor+0x48>
 800682a:	2500      	movs	r5, #0
 800682c:	462c      	mov	r4, r5
 800682e:	e7af      	b.n	8006790 <floor+0x48>
 8006830:	8800759c 	.word	0x8800759c
 8006834:	7e37e43c 	.word	0x7e37e43c
 8006838:	bff00000 	.word	0xbff00000
 800683c:	000fffff 	.word	0x000fffff

08006840 <_init>:
 8006840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006842:	bf00      	nop
 8006844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006846:	bc08      	pop	{r3}
 8006848:	469e      	mov	lr, r3
 800684a:	4770      	bx	lr

0800684c <_fini>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	bf00      	nop
 8006850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006852:	bc08      	pop	{r3}
 8006854:	469e      	mov	lr, r3
 8006856:	4770      	bx	lr
